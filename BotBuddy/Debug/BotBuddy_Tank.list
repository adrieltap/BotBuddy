
BotBuddy_Tank.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002434  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080024f4  080024f4  000124f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002554  08002554  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002554  08002554  00012554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800255c  0800255c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800255c  0800255c  0001255c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002560  08002560  00012560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08002570  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08002570  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000066dd  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013d1  00000000  00000000  00026754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007c8  00000000  00000000  00027b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005e9  00000000  00000000  000282f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001030d  00000000  00000000  000288d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000879e  00000000  00000000  00038be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00065243  00000000  00000000  00041384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001bc0  00000000  00000000  000a65c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000a8188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080024dc 	.word	0x080024dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080024dc 	.word	0x080024dc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f834 	bl	8000490 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_lmul>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	46ce      	mov	lr, r9
 8000438:	4699      	mov	r9, r3
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	469c      	mov	ip, r3
 800043e:	0413      	lsls	r3, r2, #16
 8000440:	4647      	mov	r7, r8
 8000442:	0c1b      	lsrs	r3, r3, #16
 8000444:	001d      	movs	r5, r3
 8000446:	000e      	movs	r6, r1
 8000448:	4661      	mov	r1, ip
 800044a:	0404      	lsls	r4, r0, #16
 800044c:	0c24      	lsrs	r4, r4, #16
 800044e:	b580      	push	{r7, lr}
 8000450:	0007      	movs	r7, r0
 8000452:	0c10      	lsrs	r0, r2, #16
 8000454:	434b      	muls	r3, r1
 8000456:	4365      	muls	r5, r4
 8000458:	4341      	muls	r1, r0
 800045a:	4360      	muls	r0, r4
 800045c:	0c2c      	lsrs	r4, r5, #16
 800045e:	18c0      	adds	r0, r0, r3
 8000460:	1820      	adds	r0, r4, r0
 8000462:	468c      	mov	ip, r1
 8000464:	4283      	cmp	r3, r0
 8000466:	d903      	bls.n	8000470 <__aeabi_lmul+0x3c>
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	025b      	lsls	r3, r3, #9
 800046c:	4698      	mov	r8, r3
 800046e:	44c4      	add	ip, r8
 8000470:	4649      	mov	r1, r9
 8000472:	4379      	muls	r1, r7
 8000474:	4356      	muls	r6, r2
 8000476:	0c03      	lsrs	r3, r0, #16
 8000478:	042d      	lsls	r5, r5, #16
 800047a:	0c2d      	lsrs	r5, r5, #16
 800047c:	1989      	adds	r1, r1, r6
 800047e:	4463      	add	r3, ip
 8000480:	0400      	lsls	r0, r0, #16
 8000482:	1940      	adds	r0, r0, r5
 8000484:	18c9      	adds	r1, r1, r3
 8000486:	bcc0      	pop	{r6, r7}
 8000488:	46b9      	mov	r9, r7
 800048a:	46b0      	mov	r8, r6
 800048c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__udivmoddi4>:
 8000490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000492:	4657      	mov	r7, sl
 8000494:	464e      	mov	r6, r9
 8000496:	4645      	mov	r5, r8
 8000498:	46de      	mov	lr, fp
 800049a:	b5e0      	push	{r5, r6, r7, lr}
 800049c:	0004      	movs	r4, r0
 800049e:	000d      	movs	r5, r1
 80004a0:	4692      	mov	sl, r2
 80004a2:	4699      	mov	r9, r3
 80004a4:	b083      	sub	sp, #12
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d830      	bhi.n	800050c <__udivmoddi4+0x7c>
 80004aa:	d02d      	beq.n	8000508 <__udivmoddi4+0x78>
 80004ac:	4649      	mov	r1, r9
 80004ae:	4650      	mov	r0, sl
 80004b0:	f000 f8ba 	bl	8000628 <__clzdi2>
 80004b4:	0029      	movs	r1, r5
 80004b6:	0006      	movs	r6, r0
 80004b8:	0020      	movs	r0, r4
 80004ba:	f000 f8b5 	bl	8000628 <__clzdi2>
 80004be:	1a33      	subs	r3, r6, r0
 80004c0:	4698      	mov	r8, r3
 80004c2:	3b20      	subs	r3, #32
 80004c4:	d434      	bmi.n	8000530 <__udivmoddi4+0xa0>
 80004c6:	469b      	mov	fp, r3
 80004c8:	4653      	mov	r3, sl
 80004ca:	465a      	mov	r2, fp
 80004cc:	4093      	lsls	r3, r2
 80004ce:	4642      	mov	r2, r8
 80004d0:	001f      	movs	r7, r3
 80004d2:	4653      	mov	r3, sl
 80004d4:	4093      	lsls	r3, r2
 80004d6:	001e      	movs	r6, r3
 80004d8:	42af      	cmp	r7, r5
 80004da:	d83b      	bhi.n	8000554 <__udivmoddi4+0xc4>
 80004dc:	42af      	cmp	r7, r5
 80004de:	d100      	bne.n	80004e2 <__udivmoddi4+0x52>
 80004e0:	e079      	b.n	80005d6 <__udivmoddi4+0x146>
 80004e2:	465b      	mov	r3, fp
 80004e4:	1ba4      	subs	r4, r4, r6
 80004e6:	41bd      	sbcs	r5, r7
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	da00      	bge.n	80004ee <__udivmoddi4+0x5e>
 80004ec:	e076      	b.n	80005dc <__udivmoddi4+0x14c>
 80004ee:	2200      	movs	r2, #0
 80004f0:	2300      	movs	r3, #0
 80004f2:	9200      	str	r2, [sp, #0]
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2301      	movs	r3, #1
 80004f8:	465a      	mov	r2, fp
 80004fa:	4093      	lsls	r3, r2
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2301      	movs	r3, #1
 8000500:	4642      	mov	r2, r8
 8000502:	4093      	lsls	r3, r2
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	e029      	b.n	800055c <__udivmoddi4+0xcc>
 8000508:	4282      	cmp	r2, r0
 800050a:	d9cf      	bls.n	80004ac <__udivmoddi4+0x1c>
 800050c:	2200      	movs	r2, #0
 800050e:	2300      	movs	r3, #0
 8000510:	9200      	str	r2, [sp, #0]
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <__udivmoddi4+0x8e>
 800051a:	601c      	str	r4, [r3, #0]
 800051c:	605d      	str	r5, [r3, #4]
 800051e:	9800      	ldr	r0, [sp, #0]
 8000520:	9901      	ldr	r1, [sp, #4]
 8000522:	b003      	add	sp, #12
 8000524:	bcf0      	pop	{r4, r5, r6, r7}
 8000526:	46bb      	mov	fp, r7
 8000528:	46b2      	mov	sl, r6
 800052a:	46a9      	mov	r9, r5
 800052c:	46a0      	mov	r8, r4
 800052e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000530:	4642      	mov	r2, r8
 8000532:	469b      	mov	fp, r3
 8000534:	2320      	movs	r3, #32
 8000536:	1a9b      	subs	r3, r3, r2
 8000538:	4652      	mov	r2, sl
 800053a:	40da      	lsrs	r2, r3
 800053c:	4641      	mov	r1, r8
 800053e:	0013      	movs	r3, r2
 8000540:	464a      	mov	r2, r9
 8000542:	408a      	lsls	r2, r1
 8000544:	0017      	movs	r7, r2
 8000546:	4642      	mov	r2, r8
 8000548:	431f      	orrs	r7, r3
 800054a:	4653      	mov	r3, sl
 800054c:	4093      	lsls	r3, r2
 800054e:	001e      	movs	r6, r3
 8000550:	42af      	cmp	r7, r5
 8000552:	d9c3      	bls.n	80004dc <__udivmoddi4+0x4c>
 8000554:	2200      	movs	r2, #0
 8000556:	2300      	movs	r3, #0
 8000558:	9200      	str	r2, [sp, #0]
 800055a:	9301      	str	r3, [sp, #4]
 800055c:	4643      	mov	r3, r8
 800055e:	2b00      	cmp	r3, #0
 8000560:	d0d8      	beq.n	8000514 <__udivmoddi4+0x84>
 8000562:	07fb      	lsls	r3, r7, #31
 8000564:	0872      	lsrs	r2, r6, #1
 8000566:	431a      	orrs	r2, r3
 8000568:	4646      	mov	r6, r8
 800056a:	087b      	lsrs	r3, r7, #1
 800056c:	e00e      	b.n	800058c <__udivmoddi4+0xfc>
 800056e:	42ab      	cmp	r3, r5
 8000570:	d101      	bne.n	8000576 <__udivmoddi4+0xe6>
 8000572:	42a2      	cmp	r2, r4
 8000574:	d80c      	bhi.n	8000590 <__udivmoddi4+0x100>
 8000576:	1aa4      	subs	r4, r4, r2
 8000578:	419d      	sbcs	r5, r3
 800057a:	2001      	movs	r0, #1
 800057c:	1924      	adds	r4, r4, r4
 800057e:	416d      	adcs	r5, r5
 8000580:	2100      	movs	r1, #0
 8000582:	3e01      	subs	r6, #1
 8000584:	1824      	adds	r4, r4, r0
 8000586:	414d      	adcs	r5, r1
 8000588:	2e00      	cmp	r6, #0
 800058a:	d006      	beq.n	800059a <__udivmoddi4+0x10a>
 800058c:	42ab      	cmp	r3, r5
 800058e:	d9ee      	bls.n	800056e <__udivmoddi4+0xde>
 8000590:	3e01      	subs	r6, #1
 8000592:	1924      	adds	r4, r4, r4
 8000594:	416d      	adcs	r5, r5
 8000596:	2e00      	cmp	r6, #0
 8000598:	d1f8      	bne.n	800058c <__udivmoddi4+0xfc>
 800059a:	9800      	ldr	r0, [sp, #0]
 800059c:	9901      	ldr	r1, [sp, #4]
 800059e:	465b      	mov	r3, fp
 80005a0:	1900      	adds	r0, r0, r4
 80005a2:	4169      	adcs	r1, r5
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	db24      	blt.n	80005f2 <__udivmoddi4+0x162>
 80005a8:	002b      	movs	r3, r5
 80005aa:	465a      	mov	r2, fp
 80005ac:	4644      	mov	r4, r8
 80005ae:	40d3      	lsrs	r3, r2
 80005b0:	002a      	movs	r2, r5
 80005b2:	40e2      	lsrs	r2, r4
 80005b4:	001c      	movs	r4, r3
 80005b6:	465b      	mov	r3, fp
 80005b8:	0015      	movs	r5, r2
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db2a      	blt.n	8000614 <__udivmoddi4+0x184>
 80005be:	0026      	movs	r6, r4
 80005c0:	409e      	lsls	r6, r3
 80005c2:	0033      	movs	r3, r6
 80005c4:	0026      	movs	r6, r4
 80005c6:	4647      	mov	r7, r8
 80005c8:	40be      	lsls	r6, r7
 80005ca:	0032      	movs	r2, r6
 80005cc:	1a80      	subs	r0, r0, r2
 80005ce:	4199      	sbcs	r1, r3
 80005d0:	9000      	str	r0, [sp, #0]
 80005d2:	9101      	str	r1, [sp, #4]
 80005d4:	e79e      	b.n	8000514 <__udivmoddi4+0x84>
 80005d6:	42a3      	cmp	r3, r4
 80005d8:	d8bc      	bhi.n	8000554 <__udivmoddi4+0xc4>
 80005da:	e782      	b.n	80004e2 <__udivmoddi4+0x52>
 80005dc:	4642      	mov	r2, r8
 80005de:	2320      	movs	r3, #32
 80005e0:	2100      	movs	r1, #0
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	2200      	movs	r2, #0
 80005e6:	9100      	str	r1, [sp, #0]
 80005e8:	9201      	str	r2, [sp, #4]
 80005ea:	2201      	movs	r2, #1
 80005ec:	40da      	lsrs	r2, r3
 80005ee:	9201      	str	r2, [sp, #4]
 80005f0:	e785      	b.n	80004fe <__udivmoddi4+0x6e>
 80005f2:	4642      	mov	r2, r8
 80005f4:	2320      	movs	r3, #32
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	002a      	movs	r2, r5
 80005fa:	4646      	mov	r6, r8
 80005fc:	409a      	lsls	r2, r3
 80005fe:	0023      	movs	r3, r4
 8000600:	40f3      	lsrs	r3, r6
 8000602:	4644      	mov	r4, r8
 8000604:	4313      	orrs	r3, r2
 8000606:	002a      	movs	r2, r5
 8000608:	40e2      	lsrs	r2, r4
 800060a:	001c      	movs	r4, r3
 800060c:	465b      	mov	r3, fp
 800060e:	0015      	movs	r5, r2
 8000610:	2b00      	cmp	r3, #0
 8000612:	dad4      	bge.n	80005be <__udivmoddi4+0x12e>
 8000614:	4642      	mov	r2, r8
 8000616:	002f      	movs	r7, r5
 8000618:	2320      	movs	r3, #32
 800061a:	0026      	movs	r6, r4
 800061c:	4097      	lsls	r7, r2
 800061e:	1a9b      	subs	r3, r3, r2
 8000620:	40de      	lsrs	r6, r3
 8000622:	003b      	movs	r3, r7
 8000624:	4333      	orrs	r3, r6
 8000626:	e7cd      	b.n	80005c4 <__udivmoddi4+0x134>

08000628 <__clzdi2>:
 8000628:	b510      	push	{r4, lr}
 800062a:	2900      	cmp	r1, #0
 800062c:	d103      	bne.n	8000636 <__clzdi2+0xe>
 800062e:	f000 f807 	bl	8000640 <__clzsi2>
 8000632:	3020      	adds	r0, #32
 8000634:	e002      	b.n	800063c <__clzdi2+0x14>
 8000636:	0008      	movs	r0, r1
 8000638:	f000 f802 	bl	8000640 <__clzsi2>
 800063c:	bd10      	pop	{r4, pc}
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <__clzsi2>:
 8000640:	211c      	movs	r1, #28
 8000642:	2301      	movs	r3, #1
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	4298      	cmp	r0, r3
 8000648:	d301      	bcc.n	800064e <__clzsi2+0xe>
 800064a:	0c00      	lsrs	r0, r0, #16
 800064c:	3910      	subs	r1, #16
 800064e:	0a1b      	lsrs	r3, r3, #8
 8000650:	4298      	cmp	r0, r3
 8000652:	d301      	bcc.n	8000658 <__clzsi2+0x18>
 8000654:	0a00      	lsrs	r0, r0, #8
 8000656:	3908      	subs	r1, #8
 8000658:	091b      	lsrs	r3, r3, #4
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0x22>
 800065e:	0900      	lsrs	r0, r0, #4
 8000660:	3904      	subs	r1, #4
 8000662:	a202      	add	r2, pc, #8	; (adr r2, 800066c <__clzsi2+0x2c>)
 8000664:	5c10      	ldrb	r0, [r2, r0]
 8000666:	1840      	adds	r0, r0, r1
 8000668:	4770      	bx	lr
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	02020304 	.word	0x02020304
 8000670:	01010101 	.word	0x01010101
	...

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000680:	f000 fb40 	bl	8000d04 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* Initialize our bot buddy */
   BT_BUDDY_Init();
 8000684:	f000 fa38 	bl	8000af8 <BT_BUDDY_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f808 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 f8c4 	bl	8000818 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000690:	f000 f858 	bl	8000744 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  event_loop();
 8000694:	f000 f916 	bl	80008c4 <event_loop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000698:	e7fe      	b.n	8000698 <main+0x1c>
	...

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b590      	push	{r4, r7, lr}
 800069e:	b093      	sub	sp, #76	; 0x4c
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	2414      	movs	r4, #20
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	0018      	movs	r0, r3
 80006a8:	2334      	movs	r3, #52	; 0x34
 80006aa:	001a      	movs	r2, r3
 80006ac:	2100      	movs	r1, #0
 80006ae:	f001 fee9 	bl	8002484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b2:	003b      	movs	r3, r7
 80006b4:	0018      	movs	r0, r3
 80006b6:	2314      	movs	r3, #20
 80006b8:	001a      	movs	r2, r3
 80006ba:	2100      	movs	r1, #0
 80006bc:	f001 fee2 	bl	8002484 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c0:	4b1e      	ldr	r3, [pc, #120]	; (800073c <SystemClock_Config+0xa0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a1e      	ldr	r2, [pc, #120]	; (8000740 <SystemClock_Config+0xa4>)
 80006c6:	401a      	ands	r2, r3
 80006c8:	4b1c      	ldr	r3, [pc, #112]	; (800073c <SystemClock_Config+0xa0>)
 80006ca:	2180      	movs	r1, #128	; 0x80
 80006cc:	0109      	lsls	r1, r1, #4
 80006ce:	430a      	orrs	r2, r1
 80006d0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006d2:	0021      	movs	r1, r4
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2210      	movs	r2, #16
 80006d8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2201      	movs	r2, #1
 80006de:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	22a0      	movs	r2, #160	; 0xa0
 80006ea:	0212      	lsls	r2, r2, #8
 80006ec:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2200      	movs	r2, #0
 80006f2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	0018      	movs	r0, r3
 80006f8:	f000 fdf4 	bl	80012e4 <HAL_RCC_OscConfig>
 80006fc:	1e03      	subs	r3, r0, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000700:	f000 fa2a 	bl	8000b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000704:	003b      	movs	r3, r7
 8000706:	220f      	movs	r2, #15
 8000708:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800070a:	003b      	movs	r3, r7
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	003b      	movs	r3, r7
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000716:	003b      	movs	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071c:	003b      	movs	r3, r7
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000722:	003b      	movs	r3, r7
 8000724:	2100      	movs	r1, #0
 8000726:	0018      	movs	r0, r3
 8000728:	f001 f958 	bl	80019dc <HAL_RCC_ClockConfig>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000730:	f000 fa12 	bl	8000b58 <Error_Handler>
  }
}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	b013      	add	sp, #76	; 0x4c
 800073a:	bd90      	pop	{r4, r7, pc}
 800073c:	40007000 	.word	0x40007000
 8000740:	ffffe7ff 	.word	0xffffe7ff

08000744 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074a:	2310      	movs	r3, #16
 800074c:	18fb      	adds	r3, r7, r3
 800074e:	0018      	movs	r0, r3
 8000750:	2308      	movs	r3, #8
 8000752:	001a      	movs	r2, r3
 8000754:	2100      	movs	r1, #0
 8000756:	f001 fe95 	bl	8002484 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800075a:	003b      	movs	r3, r7
 800075c:	0018      	movs	r0, r3
 800075e:	2310      	movs	r3, #16
 8000760:	001a      	movs	r2, r3
 8000762:	2100      	movs	r1, #0
 8000764:	f001 fe8e 	bl	8002484 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000768:	4b29      	ldr	r3, [pc, #164]	; (8000810 <MX_TIM2_Init+0xcc>)
 800076a:	2280      	movs	r2, #128	; 0x80
 800076c:	05d2      	lsls	r2, r2, #23
 800076e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000770:	4b27      	ldr	r3, [pc, #156]	; (8000810 <MX_TIM2_Init+0xcc>)
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <MX_TIM2_Init+0xcc>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 839;
 800077c:	4b24      	ldr	r3, [pc, #144]	; (8000810 <MX_TIM2_Init+0xcc>)
 800077e:	4a25      	ldr	r2, [pc, #148]	; (8000814 <MX_TIM2_Init+0xd0>)
 8000780:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000782:	4b23      	ldr	r3, [pc, #140]	; (8000810 <MX_TIM2_Init+0xcc>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000788:	4b21      	ldr	r3, [pc, #132]	; (8000810 <MX_TIM2_Init+0xcc>)
 800078a:	2200      	movs	r2, #0
 800078c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800078e:	4b20      	ldr	r3, [pc, #128]	; (8000810 <MX_TIM2_Init+0xcc>)
 8000790:	0018      	movs	r0, r3
 8000792:	f001 fb11 	bl	8001db8 <HAL_TIM_PWM_Init>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d001      	beq.n	800079e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800079a:	f000 f9dd 	bl	8000b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079e:	2110      	movs	r1, #16
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2200      	movs	r2, #0
 80007aa:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ac:	187a      	adds	r2, r7, r1
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_TIM2_Init+0xcc>)
 80007b0:	0011      	movs	r1, r2
 80007b2:	0018      	movs	r0, r3
 80007b4:	f001 fe0e 	bl	80023d4 <HAL_TIMEx_MasterConfigSynchronization>
 80007b8:	1e03      	subs	r3, r0, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80007bc:	f000 f9cc 	bl	8000b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007c0:	003b      	movs	r3, r7
 80007c2:	2260      	movs	r2, #96	; 0x60
 80007c4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80007c6:	003b      	movs	r3, r7
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007cc:	003b      	movs	r3, r7
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d2:	003b      	movs	r3, r7
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007d8:	0039      	movs	r1, r7
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <MX_TIM2_Init+0xcc>)
 80007dc:	2200      	movs	r2, #0
 80007de:	0018      	movs	r0, r3
 80007e0:	f001 fbb6 	bl	8001f50 <HAL_TIM_PWM_ConfigChannel>
 80007e4:	1e03      	subs	r3, r0, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80007e8:	f000 f9b6 	bl	8000b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007ec:	0039      	movs	r1, r7
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <MX_TIM2_Init+0xcc>)
 80007f0:	2204      	movs	r2, #4
 80007f2:	0018      	movs	r0, r3
 80007f4:	f001 fbac 	bl	8001f50 <HAL_TIM_PWM_ConfigChannel>
 80007f8:	1e03      	subs	r3, r0, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80007fc:	f000 f9ac 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000800:	4b03      	ldr	r3, [pc, #12]	; (8000810 <MX_TIM2_Init+0xcc>)
 8000802:	0018      	movs	r0, r3
 8000804:	f000 f9d8 	bl	8000bb8 <HAL_TIM_MspPostInit>

}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	b006      	add	sp, #24
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000028 	.word	0x20000028
 8000814:	00000347 	.word	0x00000347

08000818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b590      	push	{r4, r7, lr}
 800081a:	b089      	sub	sp, #36	; 0x24
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	240c      	movs	r4, #12
 8000820:	193b      	adds	r3, r7, r4
 8000822:	0018      	movs	r0, r3
 8000824:	2314      	movs	r3, #20
 8000826:	001a      	movs	r2, r3
 8000828:	2100      	movs	r1, #0
 800082a:	f001 fe2b 	bl	8002484 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <MX_GPIO_Init+0xa8>)
 8000830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000832:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <MX_GPIO_Init+0xa8>)
 8000834:	2101      	movs	r1, #1
 8000836:	430a      	orrs	r2, r1
 8000838:	62da      	str	r2, [r3, #44]	; 0x2c
 800083a:	4b21      	ldr	r3, [pc, #132]	; (80008c0 <MX_GPIO_Init+0xa8>)
 800083c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083e:	2201      	movs	r2, #1
 8000840:	4013      	ands	r3, r2
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <MX_GPIO_Init+0xa8>)
 8000848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800084a:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <MX_GPIO_Init+0xa8>)
 800084c:	2102      	movs	r1, #2
 800084e:	430a      	orrs	r2, r1
 8000850:	62da      	str	r2, [r3, #44]	; 0x2c
 8000852:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_GPIO_Init+0xa8>)
 8000854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000856:	2202      	movs	r2, #2
 8000858:	4013      	ands	r3, r2
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800085e:	23a0      	movs	r3, #160	; 0xa0
 8000860:	05db      	lsls	r3, r3, #23
 8000862:	2200      	movs	r2, #0
 8000864:	21e8      	movs	r1, #232	; 0xe8
 8000866:	0018      	movs	r0, r3
 8000868:	f000 fd1f 	bl	80012aa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800086c:	193b      	adds	r3, r7, r4
 800086e:	22e8      	movs	r2, #232	; 0xe8
 8000870:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	193b      	adds	r3, r7, r4
 8000874:	2201      	movs	r2, #1
 8000876:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	193b      	adds	r3, r7, r4
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	193b      	adds	r3, r7, r4
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	193a      	adds	r2, r7, r4
 8000886:	23a0      	movs	r3, #160	; 0xa0
 8000888:	05db      	lsls	r3, r3, #23
 800088a:	0011      	movs	r1, r2
 800088c:	0018      	movs	r0, r3
 800088e:	f000 fb81 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000892:	0021      	movs	r1, r4
 8000894:	187b      	adds	r3, r7, r1
 8000896:	22f0      	movs	r2, #240	; 0xf0
 8000898:	0152      	lsls	r2, r2, #5
 800089a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	187a      	adds	r2, r7, r1
 80008aa:	23a0      	movs	r3, #160	; 0xa0
 80008ac:	05db      	lsls	r3, r3, #23
 80008ae:	0011      	movs	r1, r2
 80008b0:	0018      	movs	r0, r3
 80008b2:	f000 fb6f 	bl	8000f94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b009      	add	sp, #36	; 0x24
 80008bc:	bd90      	pop	{r4, r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	40021000 	.word	0x40021000

080008c4 <event_loop>:

/* USER CODE BEGIN 4 */


/* Event loop that handles our botbuddy when it is running */
void event_loop(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0

	int counter = 0; // FOR TESTING
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
	int idx = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]

	while (1) {

		/* FOR TESTING */
		// change button states, go from right, left, backward, forward, power
		idx = (counter % 5);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2105      	movs	r1, #5
 80008d6:	0018      	movs	r0, r3
 80008d8:	f7ff fd86 	bl	80003e8 <__aeabi_idivmod>
 80008dc:	000b      	movs	r3, r1
 80008de:	603b      	str	r3, [r7, #0]

		b_buddy.rot_speed = (50 + (idx * 10)) % 100;
 80008e0:	683a      	ldr	r2, [r7, #0]
 80008e2:	0013      	movs	r3, r2
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	189b      	adds	r3, r3, r2
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	3332      	adds	r3, #50	; 0x32
 80008ec:	2164      	movs	r1, #100	; 0x64
 80008ee:	0018      	movs	r0, r3
 80008f0:	f7ff fd7a 	bl	80003e8 <__aeabi_idivmod>
 80008f4:	000b      	movs	r3, r1
 80008f6:	001a      	movs	r2, r3
 80008f8:	4b55      	ldr	r3, [pc, #340]	; (8000a50 <event_loop+0x18c>)
 80008fa:	605a      	str	r2, [r3, #4]
		// b_buddy.button_state |= (1 << idx);
		DEBUG_GPIO_TEST();
 80008fc:	f000 f8ae 	bl	8000a5c <DEBUG_GPIO_TEST>




		switch(b_buddy.button_state) {
 8000900:	4b53      	ldr	r3, [pc, #332]	; (8000a50 <event_loop+0x18c>)
 8000902:	785b      	ldrb	r3, [r3, #1]
 8000904:	2b10      	cmp	r3, #16
 8000906:	d900      	bls.n	800090a <event_loop+0x46>
 8000908:	e095      	b.n	8000a36 <event_loop+0x172>
 800090a:	009a      	lsls	r2, r3, #2
 800090c:	4b51      	ldr	r3, [pc, #324]	; (8000a54 <event_loop+0x190>)
 800090e:	18d3      	adds	r3, r2, r3
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	469f      	mov	pc, r3
			// run both motors forward by switching GPIO PINs ON for S0 for both motors
			case FORWARD:
				// switch 0 on both motors will be ON
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000914:	23a0      	movs	r3, #160	; 0xa0
 8000916:	05db      	lsls	r3, r3, #23
 8000918:	2201      	movs	r2, #1
 800091a:	2108      	movs	r1, #8
 800091c:	0018      	movs	r0, r3
 800091e:	f000 fcc4 	bl	80012aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000922:	23a0      	movs	r3, #160	; 0xa0
 8000924:	05db      	lsls	r3, r3, #23
 8000926:	2201      	movs	r2, #1
 8000928:	2140      	movs	r1, #64	; 0x40
 800092a:	0018      	movs	r0, r3
 800092c:	f000 fcbd 	bl	80012aa <HAL_GPIO_WritePin>

				// switch 1 on both motors will be OFF
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000930:	23a0      	movs	r3, #160	; 0xa0
 8000932:	05db      	lsls	r3, r3, #23
 8000934:	2200      	movs	r2, #0
 8000936:	2120      	movs	r1, #32
 8000938:	0018      	movs	r0, r3
 800093a:	f000 fcb6 	bl	80012aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800093e:	23a0      	movs	r3, #160	; 0xa0
 8000940:	05db      	lsls	r3, r3, #23
 8000942:	2200      	movs	r2, #0
 8000944:	2180      	movs	r1, #128	; 0x80
 8000946:	0018      	movs	r0, r3
 8000948:	f000 fcaf 	bl	80012aa <HAL_GPIO_WritePin>

				break;
 800094c:	e073      	b.n	8000a36 <event_loop+0x172>
			// run both motors if it is backward
			case BACKWARD:
				// switch 0 on both motors will be OFF
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800094e:	23a0      	movs	r3, #160	; 0xa0
 8000950:	05db      	lsls	r3, r3, #23
 8000952:	2200      	movs	r2, #0
 8000954:	2108      	movs	r1, #8
 8000956:	0018      	movs	r0, r3
 8000958:	f000 fca7 	bl	80012aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800095c:	23a0      	movs	r3, #160	; 0xa0
 800095e:	05db      	lsls	r3, r3, #23
 8000960:	2200      	movs	r2, #0
 8000962:	2140      	movs	r1, #64	; 0x40
 8000964:	0018      	movs	r0, r3
 8000966:	f000 fca0 	bl	80012aa <HAL_GPIO_WritePin>

				// switch 1 on both motors will be ON
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800096a:	23a0      	movs	r3, #160	; 0xa0
 800096c:	05db      	lsls	r3, r3, #23
 800096e:	2201      	movs	r2, #1
 8000970:	2120      	movs	r1, #32
 8000972:	0018      	movs	r0, r3
 8000974:	f000 fc99 	bl	80012aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000978:	23a0      	movs	r3, #160	; 0xa0
 800097a:	05db      	lsls	r3, r3, #23
 800097c:	2201      	movs	r2, #1
 800097e:	2180      	movs	r1, #128	; 0x80
 8000980:	0018      	movs	r0, r3
 8000982:	f000 fc92 	bl	80012aa <HAL_GPIO_WritePin>

				break;
 8000986:	e056      	b.n	8000a36 <event_loop+0x172>
			// run the right motor to turn left
			case LEFT:
				// s1 for left motor will be 1 and s0 for right motor will be 1
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000988:	23a0      	movs	r3, #160	; 0xa0
 800098a:	05db      	lsls	r3, r3, #23
 800098c:	2201      	movs	r2, #1
 800098e:	2180      	movs	r1, #128	; 0x80
 8000990:	0018      	movs	r0, r3
 8000992:	f000 fc8a 	bl	80012aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000996:	23a0      	movs	r3, #160	; 0xa0
 8000998:	05db      	lsls	r3, r3, #23
 800099a:	2201      	movs	r2, #1
 800099c:	2108      	movs	r1, #8
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 fc83 	bl	80012aa <HAL_GPIO_WritePin>

				// otherwise 0
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80009a4:	23a0      	movs	r3, #160	; 0xa0
 80009a6:	05db      	lsls	r3, r3, #23
 80009a8:	2200      	movs	r2, #0
 80009aa:	2140      	movs	r1, #64	; 0x40
 80009ac:	0018      	movs	r0, r3
 80009ae:	f000 fc7c 	bl	80012aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80009b2:	23a0      	movs	r3, #160	; 0xa0
 80009b4:	05db      	lsls	r3, r3, #23
 80009b6:	2200      	movs	r2, #0
 80009b8:	2120      	movs	r1, #32
 80009ba:	0018      	movs	r0, r3
 80009bc:	f000 fc75 	bl	80012aa <HAL_GPIO_WritePin>

				break;
 80009c0:	e039      	b.n	8000a36 <event_loop+0x172>
			// run the left motor to turn right
			case RIGHT:

				// s0 for left motor will be 1 and s1 of right motor should be 1
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80009c2:	23a0      	movs	r3, #160	; 0xa0
 80009c4:	05db      	lsls	r3, r3, #23
 80009c6:	2201      	movs	r2, #1
 80009c8:	2140      	movs	r1, #64	; 0x40
 80009ca:	0018      	movs	r0, r3
 80009cc:	f000 fc6d 	bl	80012aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80009d0:	23a0      	movs	r3, #160	; 0xa0
 80009d2:	05db      	lsls	r3, r3, #23
 80009d4:	2201      	movs	r2, #1
 80009d6:	2120      	movs	r1, #32
 80009d8:	0018      	movs	r0, r3
 80009da:	f000 fc66 	bl	80012aa <HAL_GPIO_WritePin>

				// otherwise 0
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80009de:	23a0      	movs	r3, #160	; 0xa0
 80009e0:	05db      	lsls	r3, r3, #23
 80009e2:	2200      	movs	r2, #0
 80009e4:	2108      	movs	r1, #8
 80009e6:	0018      	movs	r0, r3
 80009e8:	f000 fc5f 	bl	80012aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80009ec:	23a0      	movs	r3, #160	; 0xa0
 80009ee:	05db      	lsls	r3, r3, #23
 80009f0:	2200      	movs	r2, #0
 80009f2:	2180      	movs	r1, #128	; 0x80
 80009f4:	0018      	movs	r0, r3
 80009f6:	f000 fc58 	bl	80012aa <HAL_GPIO_WritePin>

				break;
 80009fa:	e01c      	b.n	8000a36 <event_loop+0x172>
			case POWER:
				// turn off all PINS
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80009fc:	23a0      	movs	r3, #160	; 0xa0
 80009fe:	05db      	lsls	r3, r3, #23
 8000a00:	2200      	movs	r2, #0
 8000a02:	2108      	movs	r1, #8
 8000a04:	0018      	movs	r0, r3
 8000a06:	f000 fc50 	bl	80012aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a0a:	23a0      	movs	r3, #160	; 0xa0
 8000a0c:	05db      	lsls	r3, r3, #23
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2140      	movs	r1, #64	; 0x40
 8000a12:	0018      	movs	r0, r3
 8000a14:	f000 fc49 	bl	80012aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a18:	23a0      	movs	r3, #160	; 0xa0
 8000a1a:	05db      	lsls	r3, r3, #23
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2120      	movs	r1, #32
 8000a20:	0018      	movs	r0, r3
 8000a22:	f000 fc42 	bl	80012aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a26:	23a0      	movs	r3, #160	; 0xa0
 8000a28:	05db      	lsls	r3, r3, #23
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2180      	movs	r1, #128	; 0x80
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f000 fc3b 	bl	80012aa <HAL_GPIO_WritePin>

				break;
 8000a34:	46c0      	nop			; (mov r8, r8)
		}
		/* For testing */
		// shift the next bit
		counter++;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	607b      	str	r3, [r7, #4]
		// reset button state
		b_buddy.button_state = 0x00;
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <event_loop+0x18c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	705a      	strb	r2, [r3, #1]

		RUN_MOTOR();
 8000a42:	f000 f869 	bl	8000b18 <RUN_MOTOR>
		HAL_Delay(3000);
 8000a46:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <event_loop+0x194>)
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f000 f9cb 	bl	8000de4 <HAL_Delay>
		idx = (counter % 5);
 8000a4e:	e740      	b.n	80008d2 <event_loop+0xe>
 8000a50:	20000068 	.word	0x20000068
 8000a54:	080024f4 	.word	0x080024f4
 8000a58:	00000bb8 	.word	0x00000bb8

08000a5c <DEBUG_GPIO_TEST>:
	}
}

void DEBUG_GPIO_TEST(void){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)) {
 8000a60:	2380      	movs	r3, #128	; 0x80
 8000a62:	009a      	lsls	r2, r3, #2
 8000a64:	23a0      	movs	r3, #160	; 0xa0
 8000a66:	05db      	lsls	r3, r3, #23
 8000a68:	0011      	movs	r1, r2
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f000 fc00 	bl	8001270 <HAL_GPIO_ReadPin>
 8000a70:	1e03      	subs	r3, r0, #0
 8000a72:	d007      	beq.n	8000a84 <DEBUG_GPIO_TEST+0x28>
		b_buddy.button_state |= (1 << 0);
 8000a74:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <DEBUG_GPIO_TEST+0x98>)
 8000a76:	785b      	ldrb	r3, [r3, #1]
 8000a78:	2201      	movs	r2, #1
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <DEBUG_GPIO_TEST+0x98>)
 8000a80:	705a      	strb	r2, [r3, #1]
	} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)){
		b_buddy.button_state |= (1 << 2);
	} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)) {
		b_buddy.button_state |= (1 << 3);
	}
}
 8000a82:	e034      	b.n	8000aee <DEBUG_GPIO_TEST+0x92>
	} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	00da      	lsls	r2, r3, #3
 8000a88:	23a0      	movs	r3, #160	; 0xa0
 8000a8a:	05db      	lsls	r3, r3, #23
 8000a8c:	0011      	movs	r1, r2
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f000 fbee 	bl	8001270 <HAL_GPIO_ReadPin>
 8000a94:	1e03      	subs	r3, r0, #0
 8000a96:	d007      	beq.n	8000aa8 <DEBUG_GPIO_TEST+0x4c>
		b_buddy.button_state |= (1 << 1);
 8000a98:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <DEBUG_GPIO_TEST+0x98>)
 8000a9a:	785b      	ldrb	r3, [r3, #1]
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <DEBUG_GPIO_TEST+0x98>)
 8000aa4:	705a      	strb	r2, [r3, #1]
}
 8000aa6:	e022      	b.n	8000aee <DEBUG_GPIO_TEST+0x92>
	} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)){
 8000aa8:	2380      	movs	r3, #128	; 0x80
 8000aaa:	011a      	lsls	r2, r3, #4
 8000aac:	23a0      	movs	r3, #160	; 0xa0
 8000aae:	05db      	lsls	r3, r3, #23
 8000ab0:	0011      	movs	r1, r2
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 fbdc 	bl	8001270 <HAL_GPIO_ReadPin>
 8000ab8:	1e03      	subs	r3, r0, #0
 8000aba:	d007      	beq.n	8000acc <DEBUG_GPIO_TEST+0x70>
		b_buddy.button_state |= (1 << 2);
 8000abc:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <DEBUG_GPIO_TEST+0x98>)
 8000abe:	785b      	ldrb	r3, [r3, #1]
 8000ac0:	2204      	movs	r2, #4
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <DEBUG_GPIO_TEST+0x98>)
 8000ac8:	705a      	strb	r2, [r3, #1]
}
 8000aca:	e010      	b.n	8000aee <DEBUG_GPIO_TEST+0x92>
	} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)) {
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	015a      	lsls	r2, r3, #5
 8000ad0:	23a0      	movs	r3, #160	; 0xa0
 8000ad2:	05db      	lsls	r3, r3, #23
 8000ad4:	0011      	movs	r1, r2
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f000 fbca 	bl	8001270 <HAL_GPIO_ReadPin>
 8000adc:	1e03      	subs	r3, r0, #0
 8000ade:	d006      	beq.n	8000aee <DEBUG_GPIO_TEST+0x92>
		b_buddy.button_state |= (1 << 3);
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <DEBUG_GPIO_TEST+0x98>)
 8000ae2:	785b      	ldrb	r3, [r3, #1]
 8000ae4:	2208      	movs	r2, #8
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4b02      	ldr	r3, [pc, #8]	; (8000af4 <DEBUG_GPIO_TEST+0x98>)
 8000aec:	705a      	strb	r2, [r3, #1]
}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000068 	.word	0x20000068

08000af8 <BT_BUDDY_Init>:

/* Initialization funciton for our BotBuddy */
void BT_BUDDY_Init(void) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	b_buddy.power = 0x00;
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <BT_BUDDY_Init+0x1c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
	b_buddy.button_state = 0x00;
 8000b02:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <BT_BUDDY_Init+0x1c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	705a      	strb	r2, [r3, #1]
	b_buddy.rot_speed = 0;
 8000b08:	4b02      	ldr	r3, [pc, #8]	; (8000b14 <BT_BUDDY_Init+0x1c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	605a      	str	r2, [r3, #4]
}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000068 	.word	0x20000068

08000b18 <RUN_MOTOR>:

void RUN_MOTOR(void) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	/* RIGHT MOTOR */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <RUN_MOTOR+0x38>)
 8000b1e:	2104      	movs	r1, #4
 8000b20:	0018      	movs	r0, r3
 8000b22:	f001 f989 	bl	8001e38 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (PWM_PERIOD / 100) * b_buddy.rot_speed);
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <RUN_MOTOR+0x3c>)
 8000b28:	685a      	ldr	r2, [r3, #4]
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <RUN_MOTOR+0x38>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	00d2      	lsls	r2, r2, #3
 8000b30:	639a      	str	r2, [r3, #56]	; 0x38

	/* LEFT MOTOR */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000b32:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <RUN_MOTOR+0x38>)
 8000b34:	2100      	movs	r1, #0
 8000b36:	0018      	movs	r0, r3
 8000b38:	f001 f97e 	bl	8001e38 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, (PWM_PERIOD / 100) * b_buddy.rot_speed);
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <RUN_MOTOR+0x3c>)
 8000b3e:	685a      	ldr	r2, [r3, #4]
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <RUN_MOTOR+0x38>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	00d2      	lsls	r2, r2, #3
 8000b46:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	20000028 	.word	0x20000028
 8000b54:	20000068 	.word	0x20000068

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
}
 8000b5e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <Error_Handler+0x8>
	...

08000b64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <HAL_MspInit+0x24>)
 8000b6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_MspInit+0x24>)
 8000b6e:	2101      	movs	r1, #1
 8000b70:	430a      	orrs	r2, r1
 8000b72:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <HAL_MspInit+0x24>)
 8000b76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <HAL_MspInit+0x24>)
 8000b7a:	2180      	movs	r1, #128	; 0x80
 8000b7c:	0549      	lsls	r1, r1, #21
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40021000 	.word	0x40021000

08000b8c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	2380      	movs	r3, #128	; 0x80
 8000b9a:	05db      	lsls	r3, r3, #23
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d105      	bne.n	8000bac <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <HAL_TIM_PWM_MspInit+0x28>)
 8000ba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ba4:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <HAL_TIM_PWM_MspInit+0x28>)
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bac:	46c0      	nop			; (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b002      	add	sp, #8
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b08b      	sub	sp, #44	; 0x2c
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	2414      	movs	r4, #20
 8000bc2:	193b      	adds	r3, r7, r4
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	2314      	movs	r3, #20
 8000bc8:	001a      	movs	r2, r3
 8000bca:	2100      	movs	r1, #0
 8000bcc:	f001 fc5a 	bl	8002484 <memset>
  if(htim->Instance==TIM2)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	2380      	movs	r3, #128	; 0x80
 8000bd6:	05db      	lsls	r3, r3, #23
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d144      	bne.n	8000c66 <HAL_TIM_MspPostInit+0xae>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bdc:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <HAL_TIM_MspPostInit+0xb8>)
 8000bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000be0:	4b23      	ldr	r3, [pc, #140]	; (8000c70 <HAL_TIM_MspPostInit+0xb8>)
 8000be2:	2101      	movs	r1, #1
 8000be4:	430a      	orrs	r2, r1
 8000be6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000be8:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <HAL_TIM_MspPostInit+0xb8>)
 8000bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bec:	2201      	movs	r2, #1
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf4:	4b1e      	ldr	r3, [pc, #120]	; (8000c70 <HAL_TIM_MspPostInit+0xb8>)
 8000bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bf8:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <HAL_TIM_MspPostInit+0xb8>)
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <HAL_TIM_MspPostInit+0xb8>)
 8000c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c04:	2202      	movs	r2, #2
 8000c06:	4013      	ands	r3, r2
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c0c:	193b      	adds	r3, r7, r4
 8000c0e:	2280      	movs	r2, #128	; 0x80
 8000c10:	0212      	lsls	r2, r2, #8
 8000c12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	193b      	adds	r3, r7, r4
 8000c16:	2202      	movs	r2, #2
 8000c18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	193b      	adds	r3, r7, r4
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	193b      	adds	r3, r7, r4
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8000c26:	193b      	adds	r3, r7, r4
 8000c28:	2205      	movs	r2, #5
 8000c2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	193a      	adds	r2, r7, r4
 8000c2e:	23a0      	movs	r3, #160	; 0xa0
 8000c30:	05db      	lsls	r3, r3, #23
 8000c32:	0011      	movs	r1, r2
 8000c34:	0018      	movs	r0, r3
 8000c36:	f000 f9ad 	bl	8000f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c3a:	0021      	movs	r1, r4
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	2208      	movs	r2, #8
 8000c40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	2202      	movs	r2, #2
 8000c46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	2200      	movs	r2, #0
 8000c52:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	2202      	movs	r2, #2
 8000c58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	4a05      	ldr	r2, [pc, #20]	; (8000c74 <HAL_TIM_MspPostInit+0xbc>)
 8000c5e:	0019      	movs	r1, r3
 8000c60:	0010      	movs	r0, r2
 8000c62:	f000 f997 	bl	8000f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	b00b      	add	sp, #44	; 0x2c
 8000c6c:	bd90      	pop	{r4, r7, pc}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	40021000 	.word	0x40021000
 8000c74:	50000400 	.word	0x50000400

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c7c:	e7fe      	b.n	8000c7c <NMI_Handler+0x4>

08000c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <HardFault_Handler+0x4>

08000c84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c9c:	f000 f886 	bl	8000dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000cb0:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000cb2:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cb4:	f7ff fff7 	bl	8000ca6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <LoopForever+0x6>)
  ldr r1, =_edata
 8000cba:	490d      	ldr	r1, [pc, #52]	; (8000cf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	; (8000cf4 <LoopForever+0xe>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd0:	4c0a      	ldr	r4, [pc, #40]	; (8000cfc <LoopForever+0x16>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cde:	f001 fbd9 	bl	8002494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce2:	f7ff fccb 	bl	800067c <main>

08000ce6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ce6:	e7fe      	b.n	8000ce6 <LoopForever>
   ldr   r0, =_estack
 8000ce8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cf4:	08002564 	.word	0x08002564
  ldr r2, =_sbss
 8000cf8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cfc:	20000074 	.word	0x20000074

08000d00 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC1_COMP_IRQHandler>
	...

08000d04 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <HAL_Init+0x3c>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_Init+0x3c>)
 8000d16:	2140      	movs	r1, #64	; 0x40
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f000 f811 	bl	8000d44 <HAL_InitTick>
 8000d22:	1e03      	subs	r3, r0, #0
 8000d24:	d003      	beq.n	8000d2e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000d26:	1dfb      	adds	r3, r7, #7
 8000d28:	2201      	movs	r2, #1
 8000d2a:	701a      	strb	r2, [r3, #0]
 8000d2c:	e001      	b.n	8000d32 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d2e:	f7ff ff19 	bl	8000b64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d32:	1dfb      	adds	r3, r7, #7
 8000d34:	781b      	ldrb	r3, [r3, #0]
}
 8000d36:	0018      	movs	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b002      	add	sp, #8
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	40022000 	.word	0x40022000

08000d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <HAL_InitTick+0x5c>)
 8000d4e:	681c      	ldr	r4, [r3, #0]
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <HAL_InitTick+0x60>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	0019      	movs	r1, r3
 8000d56:	23fa      	movs	r3, #250	; 0xfa
 8000d58:	0098      	lsls	r0, r3, #2
 8000d5a:	f7ff f9d5 	bl	8000108 <__udivsi3>
 8000d5e:	0003      	movs	r3, r0
 8000d60:	0019      	movs	r1, r3
 8000d62:	0020      	movs	r0, r4
 8000d64:	f7ff f9d0 	bl	8000108 <__udivsi3>
 8000d68:	0003      	movs	r3, r0
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f000 f905 	bl	8000f7a <HAL_SYSTICK_Config>
 8000d70:	1e03      	subs	r3, r0, #0
 8000d72:	d001      	beq.n	8000d78 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e00f      	b.n	8000d98 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b03      	cmp	r3, #3
 8000d7c:	d80b      	bhi.n	8000d96 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	2301      	movs	r3, #1
 8000d82:	425b      	negs	r3, r3
 8000d84:	2200      	movs	r2, #0
 8000d86:	0018      	movs	r0, r3
 8000d88:	f000 f8e2 	bl	8000f50 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_InitTick+0x64>)
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d92:	2300      	movs	r3, #0
 8000d94:	e000      	b.n	8000d98 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	0018      	movs	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b003      	add	sp, #12
 8000d9e:	bd90      	pop	{r4, r7, pc}
 8000da0:	20000000 	.word	0x20000000
 8000da4:	20000008 	.word	0x20000008
 8000da8:	20000004 	.word	0x20000004

08000dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <HAL_IncTick+0x1c>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	001a      	movs	r2, r3
 8000db6:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <HAL_IncTick+0x20>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	18d2      	adds	r2, r2, r3
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <HAL_IncTick+0x20>)
 8000dbe:	601a      	str	r2, [r3, #0]
}
 8000dc0:	46c0      	nop			; (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	20000070 	.word	0x20000070

08000dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd4:	4b02      	ldr	r3, [pc, #8]	; (8000de0 <HAL_GetTick+0x10>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	0018      	movs	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	20000070 	.word	0x20000070

08000de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dec:	f7ff fff0 	bl	8000dd0 <HAL_GetTick>
 8000df0:	0003      	movs	r3, r0
 8000df2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	d005      	beq.n	8000e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_Delay+0x44>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	001a      	movs	r2, r3
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	189b      	adds	r3, r3, r2
 8000e08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	f7ff ffe0 	bl	8000dd0 <HAL_GetTick>
 8000e10:	0002      	movs	r2, r0
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d8f7      	bhi.n	8000e0c <HAL_Delay+0x28>
  {
  }
}
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b004      	add	sp, #16
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	20000008 	.word	0x20000008

08000e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e2c:	b590      	push	{r4, r7, lr}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	0002      	movs	r2, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	1dfb      	adds	r3, r7, #7
 8000e38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e3a:	1dfb      	adds	r3, r7, #7
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b7f      	cmp	r3, #127	; 0x7f
 8000e40:	d828      	bhi.n	8000e94 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e42:	4a2f      	ldr	r2, [pc, #188]	; (8000f00 <__NVIC_SetPriority+0xd4>)
 8000e44:	1dfb      	adds	r3, r7, #7
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	b25b      	sxtb	r3, r3
 8000e4a:	089b      	lsrs	r3, r3, #2
 8000e4c:	33c0      	adds	r3, #192	; 0xc0
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	589b      	ldr	r3, [r3, r2]
 8000e52:	1dfa      	adds	r2, r7, #7
 8000e54:	7812      	ldrb	r2, [r2, #0]
 8000e56:	0011      	movs	r1, r2
 8000e58:	2203      	movs	r2, #3
 8000e5a:	400a      	ands	r2, r1
 8000e5c:	00d2      	lsls	r2, r2, #3
 8000e5e:	21ff      	movs	r1, #255	; 0xff
 8000e60:	4091      	lsls	r1, r2
 8000e62:	000a      	movs	r2, r1
 8000e64:	43d2      	mvns	r2, r2
 8000e66:	401a      	ands	r2, r3
 8000e68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	019b      	lsls	r3, r3, #6
 8000e6e:	22ff      	movs	r2, #255	; 0xff
 8000e70:	401a      	ands	r2, r3
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	0018      	movs	r0, r3
 8000e78:	2303      	movs	r3, #3
 8000e7a:	4003      	ands	r3, r0
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e80:	481f      	ldr	r0, [pc, #124]	; (8000f00 <__NVIC_SetPriority+0xd4>)
 8000e82:	1dfb      	adds	r3, r7, #7
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	b25b      	sxtb	r3, r3
 8000e88:	089b      	lsrs	r3, r3, #2
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	33c0      	adds	r3, #192	; 0xc0
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e92:	e031      	b.n	8000ef8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e94:	4a1b      	ldr	r2, [pc, #108]	; (8000f04 <__NVIC_SetPriority+0xd8>)
 8000e96:	1dfb      	adds	r3, r7, #7
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	0019      	movs	r1, r3
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	400b      	ands	r3, r1
 8000ea0:	3b08      	subs	r3, #8
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	3306      	adds	r3, #6
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	18d3      	adds	r3, r2, r3
 8000eaa:	3304      	adds	r3, #4
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	1dfa      	adds	r2, r7, #7
 8000eb0:	7812      	ldrb	r2, [r2, #0]
 8000eb2:	0011      	movs	r1, r2
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	400a      	ands	r2, r1
 8000eb8:	00d2      	lsls	r2, r2, #3
 8000eba:	21ff      	movs	r1, #255	; 0xff
 8000ebc:	4091      	lsls	r1, r2
 8000ebe:	000a      	movs	r2, r1
 8000ec0:	43d2      	mvns	r2, r2
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	019b      	lsls	r3, r3, #6
 8000eca:	22ff      	movs	r2, #255	; 0xff
 8000ecc:	401a      	ands	r2, r3
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	4003      	ands	r3, r0
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000edc:	4809      	ldr	r0, [pc, #36]	; (8000f04 <__NVIC_SetPriority+0xd8>)
 8000ede:	1dfb      	adds	r3, r7, #7
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	001c      	movs	r4, r3
 8000ee4:	230f      	movs	r3, #15
 8000ee6:	4023      	ands	r3, r4
 8000ee8:	3b08      	subs	r3, #8
 8000eea:	089b      	lsrs	r3, r3, #2
 8000eec:	430a      	orrs	r2, r1
 8000eee:	3306      	adds	r3, #6
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	18c3      	adds	r3, r0, r3
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	601a      	str	r2, [r3, #0]
}
 8000ef8:	46c0      	nop			; (mov r8, r8)
 8000efa:	46bd      	mov	sp, r7
 8000efc:	b003      	add	sp, #12
 8000efe:	bd90      	pop	{r4, r7, pc}
 8000f00:	e000e100 	.word	0xe000e100
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	1e5a      	subs	r2, r3, #1
 8000f14:	2380      	movs	r3, #128	; 0x80
 8000f16:	045b      	lsls	r3, r3, #17
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d301      	bcc.n	8000f20 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e010      	b.n	8000f42 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <SysTick_Config+0x44>)
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	3a01      	subs	r2, #1
 8000f26:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f28:	2301      	movs	r3, #1
 8000f2a:	425b      	negs	r3, r3
 8000f2c:	2103      	movs	r1, #3
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f7ff ff7c 	bl	8000e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <SysTick_Config+0x44>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3a:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <SysTick_Config+0x44>)
 8000f3c:	2207      	movs	r2, #7
 8000f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	0018      	movs	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b002      	add	sp, #8
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	e000e010 	.word	0xe000e010

08000f50 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	210f      	movs	r1, #15
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	1c02      	adds	r2, r0, #0
 8000f60:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	187b      	adds	r3, r7, r1
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b25b      	sxtb	r3, r3
 8000f6a:	0011      	movs	r1, r2
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f7ff ff5d 	bl	8000e2c <__NVIC_SetPriority>
}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b004      	add	sp, #16
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	0018      	movs	r0, r3
 8000f86:	f7ff ffbf 	bl	8000f08 <SysTick_Config>
 8000f8a:	0003      	movs	r3, r0
}
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b002      	add	sp, #8
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000faa:	e149      	b.n	8001240 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	4091      	lsls	r1, r2
 8000fb6:	000a      	movs	r2, r1
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d100      	bne.n	8000fc4 <HAL_GPIO_Init+0x30>
 8000fc2:	e13a      	b.n	800123a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2203      	movs	r2, #3
 8000fca:	4013      	ands	r3, r2
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d005      	beq.n	8000fdc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d130      	bne.n	800103e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	409a      	lsls	r2, r3
 8000fea:	0013      	movs	r3, r2
 8000fec:	43da      	mvns	r2, r3
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	68da      	ldr	r2, [r3, #12]
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	409a      	lsls	r2, r3
 8000ffe:	0013      	movs	r3, r2
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001012:	2201      	movs	r2, #1
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
 8001018:	0013      	movs	r3, r2
 800101a:	43da      	mvns	r2, r3
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	091b      	lsrs	r3, r3, #4
 8001028:	2201      	movs	r2, #1
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
 8001030:	0013      	movs	r3, r2
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2203      	movs	r2, #3
 8001044:	4013      	ands	r3, r2
 8001046:	2b03      	cmp	r3, #3
 8001048:	d017      	beq.n	800107a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	2203      	movs	r2, #3
 8001056:	409a      	lsls	r2, r3
 8001058:	0013      	movs	r3, r2
 800105a:	43da      	mvns	r2, r3
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	409a      	lsls	r2, r3
 800106c:	0013      	movs	r3, r2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2203      	movs	r2, #3
 8001080:	4013      	ands	r3, r2
 8001082:	2b02      	cmp	r3, #2
 8001084:	d123      	bne.n	80010ce <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	08da      	lsrs	r2, r3, #3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3208      	adds	r2, #8
 800108e:	0092      	lsls	r2, r2, #2
 8001090:	58d3      	ldr	r3, [r2, r3]
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	2207      	movs	r2, #7
 8001098:	4013      	ands	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	220f      	movs	r2, #15
 800109e:	409a      	lsls	r2, r3
 80010a0:	0013      	movs	r3, r2
 80010a2:	43da      	mvns	r2, r3
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	691a      	ldr	r2, [r3, #16]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	2107      	movs	r1, #7
 80010b2:	400b      	ands	r3, r1
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	409a      	lsls	r2, r3
 80010b8:	0013      	movs	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	08da      	lsrs	r2, r3, #3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3208      	adds	r2, #8
 80010c8:	0092      	lsls	r2, r2, #2
 80010ca:	6939      	ldr	r1, [r7, #16]
 80010cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	2203      	movs	r2, #3
 80010da:	409a      	lsls	r2, r3
 80010dc:	0013      	movs	r3, r2
 80010de:	43da      	mvns	r2, r3
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2203      	movs	r2, #3
 80010ec:	401a      	ands	r2, r3
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	409a      	lsls	r2, r3
 80010f4:	0013      	movs	r3, r2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	23c0      	movs	r3, #192	; 0xc0
 8001108:	029b      	lsls	r3, r3, #10
 800110a:	4013      	ands	r3, r2
 800110c:	d100      	bne.n	8001110 <HAL_GPIO_Init+0x17c>
 800110e:	e094      	b.n	800123a <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001110:	4b51      	ldr	r3, [pc, #324]	; (8001258 <HAL_GPIO_Init+0x2c4>)
 8001112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001114:	4b50      	ldr	r3, [pc, #320]	; (8001258 <HAL_GPIO_Init+0x2c4>)
 8001116:	2101      	movs	r1, #1
 8001118:	430a      	orrs	r2, r1
 800111a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800111c:	4a4f      	ldr	r2, [pc, #316]	; (800125c <HAL_GPIO_Init+0x2c8>)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	3302      	adds	r3, #2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	589b      	ldr	r3, [r3, r2]
 8001128:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	2203      	movs	r2, #3
 800112e:	4013      	ands	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	220f      	movs	r2, #15
 8001134:	409a      	lsls	r2, r3
 8001136:	0013      	movs	r3, r2
 8001138:	43da      	mvns	r2, r3
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	23a0      	movs	r3, #160	; 0xa0
 8001144:	05db      	lsls	r3, r3, #23
 8001146:	429a      	cmp	r2, r3
 8001148:	d013      	beq.n	8001172 <HAL_GPIO_Init+0x1de>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a44      	ldr	r2, [pc, #272]	; (8001260 <HAL_GPIO_Init+0x2cc>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d00d      	beq.n	800116e <HAL_GPIO_Init+0x1da>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a43      	ldr	r2, [pc, #268]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d007      	beq.n	800116a <HAL_GPIO_Init+0x1d6>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a42      	ldr	r2, [pc, #264]	; (8001268 <HAL_GPIO_Init+0x2d4>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d101      	bne.n	8001166 <HAL_GPIO_Init+0x1d2>
 8001162:	2305      	movs	r3, #5
 8001164:	e006      	b.n	8001174 <HAL_GPIO_Init+0x1e0>
 8001166:	2306      	movs	r3, #6
 8001168:	e004      	b.n	8001174 <HAL_GPIO_Init+0x1e0>
 800116a:	2302      	movs	r3, #2
 800116c:	e002      	b.n	8001174 <HAL_GPIO_Init+0x1e0>
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <HAL_GPIO_Init+0x1e0>
 8001172:	2300      	movs	r3, #0
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	2103      	movs	r1, #3
 8001178:	400a      	ands	r2, r1
 800117a:	0092      	lsls	r2, r2, #2
 800117c:	4093      	lsls	r3, r2
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001184:	4935      	ldr	r1, [pc, #212]	; (800125c <HAL_GPIO_Init+0x2c8>)
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	089b      	lsrs	r3, r3, #2
 800118a:	3302      	adds	r3, #2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001192:	4b36      	ldr	r3, [pc, #216]	; (800126c <HAL_GPIO_Init+0x2d8>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	43da      	mvns	r2, r3
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	035b      	lsls	r3, r3, #13
 80011aa:	4013      	ands	r3, r2
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011b6:	4b2d      	ldr	r3, [pc, #180]	; (800126c <HAL_GPIO_Init+0x2d8>)
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011bc:	4b2b      	ldr	r3, [pc, #172]	; (800126c <HAL_GPIO_Init+0x2d8>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	43da      	mvns	r2, r3
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	039b      	lsls	r3, r3, #14
 80011d4:	4013      	ands	r3, r2
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011e0:	4b22      	ldr	r3, [pc, #136]	; (800126c <HAL_GPIO_Init+0x2d8>)
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80011e6:	4b21      	ldr	r3, [pc, #132]	; (800126c <HAL_GPIO_Init+0x2d8>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	43da      	mvns	r2, r3
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4013      	ands	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	2380      	movs	r3, #128	; 0x80
 80011fc:	029b      	lsls	r3, r3, #10
 80011fe:	4013      	ands	r3, r2
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4313      	orrs	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <HAL_GPIO_Init+0x2d8>)
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <HAL_GPIO_Init+0x2d8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	43da      	mvns	r2, r3
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	025b      	lsls	r3, r3, #9
 8001228:	4013      	ands	r3, r2
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001234:	4b0d      	ldr	r3, [pc, #52]	; (800126c <HAL_GPIO_Init+0x2d8>)
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	3301      	adds	r3, #1
 800123e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	40da      	lsrs	r2, r3
 8001248:	1e13      	subs	r3, r2, #0
 800124a:	d000      	beq.n	800124e <HAL_GPIO_Init+0x2ba>
 800124c:	e6ae      	b.n	8000fac <HAL_GPIO_Init+0x18>
  }
}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	46c0      	nop			; (mov r8, r8)
 8001252:	46bd      	mov	sp, r7
 8001254:	b006      	add	sp, #24
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40021000 	.word	0x40021000
 800125c:	40010000 	.word	0x40010000
 8001260:	50000400 	.word	0x50000400
 8001264:	50000800 	.word	0x50000800
 8001268:	50001c00 	.word	0x50001c00
 800126c:	40010400 	.word	0x40010400

08001270 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	000a      	movs	r2, r1
 800127a:	1cbb      	adds	r3, r7, #2
 800127c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	1cba      	adds	r2, r7, #2
 8001284:	8812      	ldrh	r2, [r2, #0]
 8001286:	4013      	ands	r3, r2
 8001288:	d004      	beq.n	8001294 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800128a:	230f      	movs	r3, #15
 800128c:	18fb      	adds	r3, r7, r3
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
 8001292:	e003      	b.n	800129c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001294:	230f      	movs	r3, #15
 8001296:	18fb      	adds	r3, r7, r3
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800129c:	230f      	movs	r3, #15
 800129e:	18fb      	adds	r3, r7, r3
 80012a0:	781b      	ldrb	r3, [r3, #0]
}
 80012a2:	0018      	movs	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b004      	add	sp, #16
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	0008      	movs	r0, r1
 80012b4:	0011      	movs	r1, r2
 80012b6:	1cbb      	adds	r3, r7, #2
 80012b8:	1c02      	adds	r2, r0, #0
 80012ba:	801a      	strh	r2, [r3, #0]
 80012bc:	1c7b      	adds	r3, r7, #1
 80012be:	1c0a      	adds	r2, r1, #0
 80012c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012c2:	1c7b      	adds	r3, r7, #1
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d004      	beq.n	80012d4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ca:	1cbb      	adds	r3, r7, #2
 80012cc:	881a      	ldrh	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80012d2:	e003      	b.n	80012dc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80012d4:	1cbb      	adds	r3, r7, #2
 80012d6:	881a      	ldrh	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012dc:	46c0      	nop			; (mov r8, r8)
 80012de:	46bd      	mov	sp, r7
 80012e0:	b002      	add	sp, #8
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e4:	b5b0      	push	{r4, r5, r7, lr}
 80012e6:	b08a      	sub	sp, #40	; 0x28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d102      	bne.n	80012f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	f000 fb6c 	bl	80019d0 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012f8:	4bc8      	ldr	r3, [pc, #800]	; (800161c <HAL_RCC_OscConfig+0x338>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	220c      	movs	r2, #12
 80012fe:	4013      	ands	r3, r2
 8001300:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001302:	4bc6      	ldr	r3, [pc, #792]	; (800161c <HAL_RCC_OscConfig+0x338>)
 8001304:	68da      	ldr	r2, [r3, #12]
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	025b      	lsls	r3, r3, #9
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2201      	movs	r2, #1
 8001314:	4013      	ands	r3, r2
 8001316:	d100      	bne.n	800131a <HAL_RCC_OscConfig+0x36>
 8001318:	e07d      	b.n	8001416 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	2b08      	cmp	r3, #8
 800131e:	d007      	beq.n	8001330 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	2b0c      	cmp	r3, #12
 8001324:	d112      	bne.n	800134c <HAL_RCC_OscConfig+0x68>
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	025b      	lsls	r3, r3, #9
 800132c:	429a      	cmp	r2, r3
 800132e:	d10d      	bne.n	800134c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001330:	4bba      	ldr	r3, [pc, #744]	; (800161c <HAL_RCC_OscConfig+0x338>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	029b      	lsls	r3, r3, #10
 8001338:	4013      	ands	r3, r2
 800133a:	d100      	bne.n	800133e <HAL_RCC_OscConfig+0x5a>
 800133c:	e06a      	b.n	8001414 <HAL_RCC_OscConfig+0x130>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d166      	bne.n	8001414 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	f000 fb42 	bl	80019d0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	025b      	lsls	r3, r3, #9
 8001354:	429a      	cmp	r2, r3
 8001356:	d107      	bne.n	8001368 <HAL_RCC_OscConfig+0x84>
 8001358:	4bb0      	ldr	r3, [pc, #704]	; (800161c <HAL_RCC_OscConfig+0x338>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4baf      	ldr	r3, [pc, #700]	; (800161c <HAL_RCC_OscConfig+0x338>)
 800135e:	2180      	movs	r1, #128	; 0x80
 8001360:	0249      	lsls	r1, r1, #9
 8001362:	430a      	orrs	r2, r1
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	e027      	b.n	80013b8 <HAL_RCC_OscConfig+0xd4>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	23a0      	movs	r3, #160	; 0xa0
 800136e:	02db      	lsls	r3, r3, #11
 8001370:	429a      	cmp	r2, r3
 8001372:	d10e      	bne.n	8001392 <HAL_RCC_OscConfig+0xae>
 8001374:	4ba9      	ldr	r3, [pc, #676]	; (800161c <HAL_RCC_OscConfig+0x338>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4ba8      	ldr	r3, [pc, #672]	; (800161c <HAL_RCC_OscConfig+0x338>)
 800137a:	2180      	movs	r1, #128	; 0x80
 800137c:	02c9      	lsls	r1, r1, #11
 800137e:	430a      	orrs	r2, r1
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	4ba6      	ldr	r3, [pc, #664]	; (800161c <HAL_RCC_OscConfig+0x338>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	4ba5      	ldr	r3, [pc, #660]	; (800161c <HAL_RCC_OscConfig+0x338>)
 8001388:	2180      	movs	r1, #128	; 0x80
 800138a:	0249      	lsls	r1, r1, #9
 800138c:	430a      	orrs	r2, r1
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	e012      	b.n	80013b8 <HAL_RCC_OscConfig+0xd4>
 8001392:	4ba2      	ldr	r3, [pc, #648]	; (800161c <HAL_RCC_OscConfig+0x338>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	4ba1      	ldr	r3, [pc, #644]	; (800161c <HAL_RCC_OscConfig+0x338>)
 8001398:	49a1      	ldr	r1, [pc, #644]	; (8001620 <HAL_RCC_OscConfig+0x33c>)
 800139a:	400a      	ands	r2, r1
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	4b9f      	ldr	r3, [pc, #636]	; (800161c <HAL_RCC_OscConfig+0x338>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	025b      	lsls	r3, r3, #9
 80013a6:	4013      	ands	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4b9b      	ldr	r3, [pc, #620]	; (800161c <HAL_RCC_OscConfig+0x338>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4b9a      	ldr	r3, [pc, #616]	; (800161c <HAL_RCC_OscConfig+0x338>)
 80013b2:	499c      	ldr	r1, [pc, #624]	; (8001624 <HAL_RCC_OscConfig+0x340>)
 80013b4:	400a      	ands	r2, r1
 80013b6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d014      	beq.n	80013ea <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff fd06 	bl	8000dd0 <HAL_GetTick>
 80013c4:	0003      	movs	r3, r0
 80013c6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ca:	f7ff fd01 	bl	8000dd0 <HAL_GetTick>
 80013ce:	0002      	movs	r2, r0
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b64      	cmp	r3, #100	; 0x64
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e2f9      	b.n	80019d0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013dc:	4b8f      	ldr	r3, [pc, #572]	; (800161c <HAL_RCC_OscConfig+0x338>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	029b      	lsls	r3, r3, #10
 80013e4:	4013      	ands	r3, r2
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0xe6>
 80013e8:	e015      	b.n	8001416 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ea:	f7ff fcf1 	bl	8000dd0 <HAL_GetTick>
 80013ee:	0003      	movs	r3, r0
 80013f0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f4:	f7ff fcec 	bl	8000dd0 <HAL_GetTick>
 80013f8:	0002      	movs	r2, r0
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b64      	cmp	r3, #100	; 0x64
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e2e4      	b.n	80019d0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001406:	4b85      	ldr	r3, [pc, #532]	; (800161c <HAL_RCC_OscConfig+0x338>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	029b      	lsls	r3, r3, #10
 800140e:	4013      	ands	r3, r2
 8001410:	d1f0      	bne.n	80013f4 <HAL_RCC_OscConfig+0x110>
 8001412:	e000      	b.n	8001416 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001414:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2202      	movs	r2, #2
 800141c:	4013      	ands	r3, r2
 800141e:	d100      	bne.n	8001422 <HAL_RCC_OscConfig+0x13e>
 8001420:	e099      	b.n	8001556 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	2220      	movs	r2, #32
 800142c:	4013      	ands	r3, r2
 800142e:	d009      	beq.n	8001444 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001430:	4b7a      	ldr	r3, [pc, #488]	; (800161c <HAL_RCC_OscConfig+0x338>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b79      	ldr	r3, [pc, #484]	; (800161c <HAL_RCC_OscConfig+0x338>)
 8001436:	2120      	movs	r1, #32
 8001438:	430a      	orrs	r2, r1
 800143a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800143c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143e:	2220      	movs	r2, #32
 8001440:	4393      	bics	r3, r2
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	2b04      	cmp	r3, #4
 8001448:	d005      	beq.n	8001456 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	2b0c      	cmp	r3, #12
 800144e:	d13e      	bne.n	80014ce <HAL_RCC_OscConfig+0x1ea>
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d13b      	bne.n	80014ce <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001456:	4b71      	ldr	r3, [pc, #452]	; (800161c <HAL_RCC_OscConfig+0x338>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2204      	movs	r2, #4
 800145c:	4013      	ands	r3, r2
 800145e:	d004      	beq.n	800146a <HAL_RCC_OscConfig+0x186>
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e2b2      	b.n	80019d0 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146a:	4b6c      	ldr	r3, [pc, #432]	; (800161c <HAL_RCC_OscConfig+0x338>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	4a6e      	ldr	r2, [pc, #440]	; (8001628 <HAL_RCC_OscConfig+0x344>)
 8001470:	4013      	ands	r3, r2
 8001472:	0019      	movs	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	021a      	lsls	r2, r3, #8
 800147a:	4b68      	ldr	r3, [pc, #416]	; (800161c <HAL_RCC_OscConfig+0x338>)
 800147c:	430a      	orrs	r2, r1
 800147e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001480:	4b66      	ldr	r3, [pc, #408]	; (800161c <HAL_RCC_OscConfig+0x338>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2209      	movs	r2, #9
 8001486:	4393      	bics	r3, r2
 8001488:	0019      	movs	r1, r3
 800148a:	4b64      	ldr	r3, [pc, #400]	; (800161c <HAL_RCC_OscConfig+0x338>)
 800148c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800148e:	430a      	orrs	r2, r1
 8001490:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001492:	f000 fbeb 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 8001496:	0001      	movs	r1, r0
 8001498:	4b60      	ldr	r3, [pc, #384]	; (800161c <HAL_RCC_OscConfig+0x338>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	091b      	lsrs	r3, r3, #4
 800149e:	220f      	movs	r2, #15
 80014a0:	4013      	ands	r3, r2
 80014a2:	4a62      	ldr	r2, [pc, #392]	; (800162c <HAL_RCC_OscConfig+0x348>)
 80014a4:	5cd3      	ldrb	r3, [r2, r3]
 80014a6:	000a      	movs	r2, r1
 80014a8:	40da      	lsrs	r2, r3
 80014aa:	4b61      	ldr	r3, [pc, #388]	; (8001630 <HAL_RCC_OscConfig+0x34c>)
 80014ac:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80014ae:	4b61      	ldr	r3, [pc, #388]	; (8001634 <HAL_RCC_OscConfig+0x350>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2513      	movs	r5, #19
 80014b4:	197c      	adds	r4, r7, r5
 80014b6:	0018      	movs	r0, r3
 80014b8:	f7ff fc44 	bl	8000d44 <HAL_InitTick>
 80014bc:	0003      	movs	r3, r0
 80014be:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80014c0:	197b      	adds	r3, r7, r5
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d046      	beq.n	8001556 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80014c8:	197b      	adds	r3, r7, r5
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	e280      	b.n	80019d0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d027      	beq.n	8001524 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80014d4:	4b51      	ldr	r3, [pc, #324]	; (800161c <HAL_RCC_OscConfig+0x338>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2209      	movs	r2, #9
 80014da:	4393      	bics	r3, r2
 80014dc:	0019      	movs	r1, r3
 80014de:	4b4f      	ldr	r3, [pc, #316]	; (800161c <HAL_RCC_OscConfig+0x338>)
 80014e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e2:	430a      	orrs	r2, r1
 80014e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e6:	f7ff fc73 	bl	8000dd0 <HAL_GetTick>
 80014ea:	0003      	movs	r3, r0
 80014ec:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f0:	f7ff fc6e 	bl	8000dd0 <HAL_GetTick>
 80014f4:	0002      	movs	r2, r0
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e266      	b.n	80019d0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001502:	4b46      	ldr	r3, [pc, #280]	; (800161c <HAL_RCC_OscConfig+0x338>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2204      	movs	r2, #4
 8001508:	4013      	ands	r3, r2
 800150a:	d0f1      	beq.n	80014f0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150c:	4b43      	ldr	r3, [pc, #268]	; (800161c <HAL_RCC_OscConfig+0x338>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	4a45      	ldr	r2, [pc, #276]	; (8001628 <HAL_RCC_OscConfig+0x344>)
 8001512:	4013      	ands	r3, r2
 8001514:	0019      	movs	r1, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	021a      	lsls	r2, r3, #8
 800151c:	4b3f      	ldr	r3, [pc, #252]	; (800161c <HAL_RCC_OscConfig+0x338>)
 800151e:	430a      	orrs	r2, r1
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	e018      	b.n	8001556 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001524:	4b3d      	ldr	r3, [pc, #244]	; (800161c <HAL_RCC_OscConfig+0x338>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b3c      	ldr	r3, [pc, #240]	; (800161c <HAL_RCC_OscConfig+0x338>)
 800152a:	2101      	movs	r1, #1
 800152c:	438a      	bics	r2, r1
 800152e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff fc4e 	bl	8000dd0 <HAL_GetTick>
 8001534:	0003      	movs	r3, r0
 8001536:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800153a:	f7ff fc49 	bl	8000dd0 <HAL_GetTick>
 800153e:	0002      	movs	r2, r0
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e241      	b.n	80019d0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800154c:	4b33      	ldr	r3, [pc, #204]	; (800161c <HAL_RCC_OscConfig+0x338>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2204      	movs	r2, #4
 8001552:	4013      	ands	r3, r2
 8001554:	d1f1      	bne.n	800153a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2210      	movs	r2, #16
 800155c:	4013      	ands	r3, r2
 800155e:	d100      	bne.n	8001562 <HAL_RCC_OscConfig+0x27e>
 8001560:	e0a1      	b.n	80016a6 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d140      	bne.n	80015ea <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001568:	4b2c      	ldr	r3, [pc, #176]	; (800161c <HAL_RCC_OscConfig+0x338>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4013      	ands	r3, r2
 8001572:	d005      	beq.n	8001580 <HAL_RCC_OscConfig+0x29c>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e227      	b.n	80019d0 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001580:	4b26      	ldr	r3, [pc, #152]	; (800161c <HAL_RCC_OscConfig+0x338>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	4a2c      	ldr	r2, [pc, #176]	; (8001638 <HAL_RCC_OscConfig+0x354>)
 8001586:	4013      	ands	r3, r2
 8001588:	0019      	movs	r1, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a1a      	ldr	r2, [r3, #32]
 800158e:	4b23      	ldr	r3, [pc, #140]	; (800161c <HAL_RCC_OscConfig+0x338>)
 8001590:	430a      	orrs	r2, r1
 8001592:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001594:	4b21      	ldr	r3, [pc, #132]	; (800161c <HAL_RCC_OscConfig+0x338>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	0a19      	lsrs	r1, r3, #8
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69db      	ldr	r3, [r3, #28]
 80015a0:	061a      	lsls	r2, r3, #24
 80015a2:	4b1e      	ldr	r3, [pc, #120]	; (800161c <HAL_RCC_OscConfig+0x338>)
 80015a4:	430a      	orrs	r2, r1
 80015a6:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	0b5b      	lsrs	r3, r3, #13
 80015ae:	3301      	adds	r3, #1
 80015b0:	2280      	movs	r2, #128	; 0x80
 80015b2:	0212      	lsls	r2, r2, #8
 80015b4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80015b6:	4b19      	ldr	r3, [pc, #100]	; (800161c <HAL_RCC_OscConfig+0x338>)
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	091b      	lsrs	r3, r3, #4
 80015bc:	210f      	movs	r1, #15
 80015be:	400b      	ands	r3, r1
 80015c0:	491a      	ldr	r1, [pc, #104]	; (800162c <HAL_RCC_OscConfig+0x348>)
 80015c2:	5ccb      	ldrb	r3, [r1, r3]
 80015c4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80015c6:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <HAL_RCC_OscConfig+0x34c>)
 80015c8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80015ca:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <HAL_RCC_OscConfig+0x350>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2513      	movs	r5, #19
 80015d0:	197c      	adds	r4, r7, r5
 80015d2:	0018      	movs	r0, r3
 80015d4:	f7ff fbb6 	bl	8000d44 <HAL_InitTick>
 80015d8:	0003      	movs	r3, r0
 80015da:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80015dc:	197b      	adds	r3, r7, r5
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d060      	beq.n	80016a6 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80015e4:	197b      	adds	r3, r7, r5
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	e1f2      	b.n	80019d0 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d03f      	beq.n	8001672 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <HAL_RCC_OscConfig+0x338>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <HAL_RCC_OscConfig+0x338>)
 80015f8:	2180      	movs	r1, #128	; 0x80
 80015fa:	0049      	lsls	r1, r1, #1
 80015fc:	430a      	orrs	r2, r1
 80015fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7ff fbe6 	bl	8000dd0 <HAL_GetTick>
 8001604:	0003      	movs	r3, r0
 8001606:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001608:	e018      	b.n	800163c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800160a:	f7ff fbe1 	bl	8000dd0 <HAL_GetTick>
 800160e:	0002      	movs	r2, r0
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d911      	bls.n	800163c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e1d9      	b.n	80019d0 <HAL_RCC_OscConfig+0x6ec>
 800161c:	40021000 	.word	0x40021000
 8001620:	fffeffff 	.word	0xfffeffff
 8001624:	fffbffff 	.word	0xfffbffff
 8001628:	ffffe0ff 	.word	0xffffe0ff
 800162c:	08002538 	.word	0x08002538
 8001630:	20000000 	.word	0x20000000
 8001634:	20000004 	.word	0x20000004
 8001638:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800163c:	4bc9      	ldr	r3, [pc, #804]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4013      	ands	r3, r2
 8001646:	d0e0      	beq.n	800160a <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001648:	4bc6      	ldr	r3, [pc, #792]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	4ac6      	ldr	r2, [pc, #792]	; (8001968 <HAL_RCC_OscConfig+0x684>)
 800164e:	4013      	ands	r3, r2
 8001650:	0019      	movs	r1, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a1a      	ldr	r2, [r3, #32]
 8001656:	4bc3      	ldr	r3, [pc, #780]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 8001658:	430a      	orrs	r2, r1
 800165a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800165c:	4bc1      	ldr	r3, [pc, #772]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	0a19      	lsrs	r1, r3, #8
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69db      	ldr	r3, [r3, #28]
 8001668:	061a      	lsls	r2, r3, #24
 800166a:	4bbe      	ldr	r3, [pc, #760]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 800166c:	430a      	orrs	r2, r1
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	e019      	b.n	80016a6 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001672:	4bbc      	ldr	r3, [pc, #752]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	4bbb      	ldr	r3, [pc, #748]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 8001678:	49bc      	ldr	r1, [pc, #752]	; (800196c <HAL_RCC_OscConfig+0x688>)
 800167a:	400a      	ands	r2, r1
 800167c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167e:	f7ff fba7 	bl	8000dd0 <HAL_GetTick>
 8001682:	0003      	movs	r3, r0
 8001684:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001688:	f7ff fba2 	bl	8000dd0 <HAL_GetTick>
 800168c:	0002      	movs	r2, r0
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e19a      	b.n	80019d0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800169a:	4bb2      	ldr	r3, [pc, #712]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4013      	ands	r3, r2
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2208      	movs	r2, #8
 80016ac:	4013      	ands	r3, r2
 80016ae:	d036      	beq.n	800171e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d019      	beq.n	80016ec <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016b8:	4baa      	ldr	r3, [pc, #680]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 80016ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016bc:	4ba9      	ldr	r3, [pc, #676]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 80016be:	2101      	movs	r1, #1
 80016c0:	430a      	orrs	r2, r1
 80016c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c4:	f7ff fb84 	bl	8000dd0 <HAL_GetTick>
 80016c8:	0003      	movs	r3, r0
 80016ca:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ce:	f7ff fb7f 	bl	8000dd0 <HAL_GetTick>
 80016d2:	0002      	movs	r2, r0
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e177      	b.n	80019d0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016e0:	4ba0      	ldr	r3, [pc, #640]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 80016e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016e4:	2202      	movs	r2, #2
 80016e6:	4013      	ands	r3, r2
 80016e8:	d0f1      	beq.n	80016ce <HAL_RCC_OscConfig+0x3ea>
 80016ea:	e018      	b.n	800171e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ec:	4b9d      	ldr	r3, [pc, #628]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 80016ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016f0:	4b9c      	ldr	r3, [pc, #624]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 80016f2:	2101      	movs	r1, #1
 80016f4:	438a      	bics	r2, r1
 80016f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f8:	f7ff fb6a 	bl	8000dd0 <HAL_GetTick>
 80016fc:	0003      	movs	r3, r0
 80016fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001702:	f7ff fb65 	bl	8000dd0 <HAL_GetTick>
 8001706:	0002      	movs	r2, r0
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e15d      	b.n	80019d0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001714:	4b93      	ldr	r3, [pc, #588]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 8001716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001718:	2202      	movs	r2, #2
 800171a:	4013      	ands	r3, r2
 800171c:	d1f1      	bne.n	8001702 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2204      	movs	r2, #4
 8001724:	4013      	ands	r3, r2
 8001726:	d100      	bne.n	800172a <HAL_RCC_OscConfig+0x446>
 8001728:	e0ae      	b.n	8001888 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800172a:	2023      	movs	r0, #35	; 0x23
 800172c:	183b      	adds	r3, r7, r0
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001732:	4b8c      	ldr	r3, [pc, #560]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 8001734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001736:	2380      	movs	r3, #128	; 0x80
 8001738:	055b      	lsls	r3, r3, #21
 800173a:	4013      	ands	r3, r2
 800173c:	d109      	bne.n	8001752 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	4b89      	ldr	r3, [pc, #548]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 8001740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001742:	4b88      	ldr	r3, [pc, #544]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 8001744:	2180      	movs	r1, #128	; 0x80
 8001746:	0549      	lsls	r1, r1, #21
 8001748:	430a      	orrs	r2, r1
 800174a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800174c:	183b      	adds	r3, r7, r0
 800174e:	2201      	movs	r2, #1
 8001750:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001752:	4b87      	ldr	r3, [pc, #540]	; (8001970 <HAL_RCC_OscConfig+0x68c>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	2380      	movs	r3, #128	; 0x80
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4013      	ands	r3, r2
 800175c:	d11a      	bne.n	8001794 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800175e:	4b84      	ldr	r3, [pc, #528]	; (8001970 <HAL_RCC_OscConfig+0x68c>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4b83      	ldr	r3, [pc, #524]	; (8001970 <HAL_RCC_OscConfig+0x68c>)
 8001764:	2180      	movs	r1, #128	; 0x80
 8001766:	0049      	lsls	r1, r1, #1
 8001768:	430a      	orrs	r2, r1
 800176a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800176c:	f7ff fb30 	bl	8000dd0 <HAL_GetTick>
 8001770:	0003      	movs	r3, r0
 8001772:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001776:	f7ff fb2b 	bl	8000dd0 <HAL_GetTick>
 800177a:	0002      	movs	r2, r0
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b64      	cmp	r3, #100	; 0x64
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e123      	b.n	80019d0 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001788:	4b79      	ldr	r3, [pc, #484]	; (8001970 <HAL_RCC_OscConfig+0x68c>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	2380      	movs	r3, #128	; 0x80
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4013      	ands	r3, r2
 8001792:	d0f0      	beq.n	8001776 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	429a      	cmp	r2, r3
 800179e:	d107      	bne.n	80017b0 <HAL_RCC_OscConfig+0x4cc>
 80017a0:	4b70      	ldr	r3, [pc, #448]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 80017a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017a4:	4b6f      	ldr	r3, [pc, #444]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 80017a6:	2180      	movs	r1, #128	; 0x80
 80017a8:	0049      	lsls	r1, r1, #1
 80017aa:	430a      	orrs	r2, r1
 80017ac:	651a      	str	r2, [r3, #80]	; 0x50
 80017ae:	e031      	b.n	8001814 <HAL_RCC_OscConfig+0x530>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d10c      	bne.n	80017d2 <HAL_RCC_OscConfig+0x4ee>
 80017b8:	4b6a      	ldr	r3, [pc, #424]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 80017ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017bc:	4b69      	ldr	r3, [pc, #420]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 80017be:	496b      	ldr	r1, [pc, #428]	; (800196c <HAL_RCC_OscConfig+0x688>)
 80017c0:	400a      	ands	r2, r1
 80017c2:	651a      	str	r2, [r3, #80]	; 0x50
 80017c4:	4b67      	ldr	r3, [pc, #412]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 80017c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017c8:	4b66      	ldr	r3, [pc, #408]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 80017ca:	496a      	ldr	r1, [pc, #424]	; (8001974 <HAL_RCC_OscConfig+0x690>)
 80017cc:	400a      	ands	r2, r1
 80017ce:	651a      	str	r2, [r3, #80]	; 0x50
 80017d0:	e020      	b.n	8001814 <HAL_RCC_OscConfig+0x530>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	23a0      	movs	r3, #160	; 0xa0
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	429a      	cmp	r2, r3
 80017dc:	d10e      	bne.n	80017fc <HAL_RCC_OscConfig+0x518>
 80017de:	4b61      	ldr	r3, [pc, #388]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 80017e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017e2:	4b60      	ldr	r3, [pc, #384]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 80017e4:	2180      	movs	r1, #128	; 0x80
 80017e6:	00c9      	lsls	r1, r1, #3
 80017e8:	430a      	orrs	r2, r1
 80017ea:	651a      	str	r2, [r3, #80]	; 0x50
 80017ec:	4b5d      	ldr	r3, [pc, #372]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 80017ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017f0:	4b5c      	ldr	r3, [pc, #368]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 80017f2:	2180      	movs	r1, #128	; 0x80
 80017f4:	0049      	lsls	r1, r1, #1
 80017f6:	430a      	orrs	r2, r1
 80017f8:	651a      	str	r2, [r3, #80]	; 0x50
 80017fa:	e00b      	b.n	8001814 <HAL_RCC_OscConfig+0x530>
 80017fc:	4b59      	ldr	r3, [pc, #356]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 80017fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001800:	4b58      	ldr	r3, [pc, #352]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 8001802:	495a      	ldr	r1, [pc, #360]	; (800196c <HAL_RCC_OscConfig+0x688>)
 8001804:	400a      	ands	r2, r1
 8001806:	651a      	str	r2, [r3, #80]	; 0x50
 8001808:	4b56      	ldr	r3, [pc, #344]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 800180a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800180c:	4b55      	ldr	r3, [pc, #340]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 800180e:	4959      	ldr	r1, [pc, #356]	; (8001974 <HAL_RCC_OscConfig+0x690>)
 8001810:	400a      	ands	r2, r1
 8001812:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d015      	beq.n	8001848 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181c:	f7ff fad8 	bl	8000dd0 <HAL_GetTick>
 8001820:	0003      	movs	r3, r0
 8001822:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001824:	e009      	b.n	800183a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001826:	f7ff fad3 	bl	8000dd0 <HAL_GetTick>
 800182a:	0002      	movs	r2, r0
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	4a51      	ldr	r2, [pc, #324]	; (8001978 <HAL_RCC_OscConfig+0x694>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e0ca      	b.n	80019d0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800183a:	4b4a      	ldr	r3, [pc, #296]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 800183c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4013      	ands	r3, r2
 8001844:	d0ef      	beq.n	8001826 <HAL_RCC_OscConfig+0x542>
 8001846:	e014      	b.n	8001872 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001848:	f7ff fac2 	bl	8000dd0 <HAL_GetTick>
 800184c:	0003      	movs	r3, r0
 800184e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001850:	e009      	b.n	8001866 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001852:	f7ff fabd 	bl	8000dd0 <HAL_GetTick>
 8001856:	0002      	movs	r2, r0
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	4a46      	ldr	r2, [pc, #280]	; (8001978 <HAL_RCC_OscConfig+0x694>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e0b4      	b.n	80019d0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001866:	4b3f      	ldr	r3, [pc, #252]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 8001868:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4013      	ands	r3, r2
 8001870:	d1ef      	bne.n	8001852 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001872:	2323      	movs	r3, #35	; 0x23
 8001874:	18fb      	adds	r3, r7, r3
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d105      	bne.n	8001888 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800187c:	4b39      	ldr	r3, [pc, #228]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 800187e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001880:	4b38      	ldr	r3, [pc, #224]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 8001882:	493e      	ldr	r1, [pc, #248]	; (800197c <HAL_RCC_OscConfig+0x698>)
 8001884:	400a      	ands	r2, r1
 8001886:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	2b00      	cmp	r3, #0
 800188e:	d100      	bne.n	8001892 <HAL_RCC_OscConfig+0x5ae>
 8001890:	e09d      	b.n	80019ce <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	2b0c      	cmp	r3, #12
 8001896:	d100      	bne.n	800189a <HAL_RCC_OscConfig+0x5b6>
 8001898:	e076      	b.n	8001988 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d145      	bne.n	800192e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a2:	4b30      	ldr	r3, [pc, #192]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4b2f      	ldr	r3, [pc, #188]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 80018a8:	4935      	ldr	r1, [pc, #212]	; (8001980 <HAL_RCC_OscConfig+0x69c>)
 80018aa:	400a      	ands	r2, r1
 80018ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ae:	f7ff fa8f 	bl	8000dd0 <HAL_GetTick>
 80018b2:	0003      	movs	r3, r0
 80018b4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b8:	f7ff fa8a 	bl	8000dd0 <HAL_GetTick>
 80018bc:	0002      	movs	r2, r0
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e082      	b.n	80019d0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018ca:	4b26      	ldr	r3, [pc, #152]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	049b      	lsls	r3, r3, #18
 80018d2:	4013      	ands	r3, r2
 80018d4:	d1f0      	bne.n	80018b8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018d6:	4b23      	ldr	r3, [pc, #140]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	4a2a      	ldr	r2, [pc, #168]	; (8001984 <HAL_RCC_OscConfig+0x6a0>)
 80018dc:	4013      	ands	r3, r2
 80018de:	0019      	movs	r1, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e8:	431a      	orrs	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	431a      	orrs	r2, r3
 80018f0:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 80018f2:	430a      	orrs	r2, r1
 80018f4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018f6:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 80018fc:	2180      	movs	r1, #128	; 0x80
 80018fe:	0449      	lsls	r1, r1, #17
 8001900:	430a      	orrs	r2, r1
 8001902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff fa64 	bl	8000dd0 <HAL_GetTick>
 8001908:	0003      	movs	r3, r0
 800190a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800190e:	f7ff fa5f 	bl	8000dd0 <HAL_GetTick>
 8001912:	0002      	movs	r2, r0
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e057      	b.n	80019d0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001920:	4b10      	ldr	r3, [pc, #64]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	2380      	movs	r3, #128	; 0x80
 8001926:	049b      	lsls	r3, r3, #18
 8001928:	4013      	ands	r3, r2
 800192a:	d0f0      	beq.n	800190e <HAL_RCC_OscConfig+0x62a>
 800192c:	e04f      	b.n	80019ce <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 8001934:	4912      	ldr	r1, [pc, #72]	; (8001980 <HAL_RCC_OscConfig+0x69c>)
 8001936:	400a      	ands	r2, r1
 8001938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193a:	f7ff fa49 	bl	8000dd0 <HAL_GetTick>
 800193e:	0003      	movs	r3, r0
 8001940:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff fa44 	bl	8000dd0 <HAL_GetTick>
 8001948:	0002      	movs	r2, r0
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e03c      	b.n	80019d0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001956:	4b03      	ldr	r3, [pc, #12]	; (8001964 <HAL_RCC_OscConfig+0x680>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	049b      	lsls	r3, r3, #18
 800195e:	4013      	ands	r3, r2
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x660>
 8001962:	e034      	b.n	80019ce <HAL_RCC_OscConfig+0x6ea>
 8001964:	40021000 	.word	0x40021000
 8001968:	ffff1fff 	.word	0xffff1fff
 800196c:	fffffeff 	.word	0xfffffeff
 8001970:	40007000 	.word	0x40007000
 8001974:	fffffbff 	.word	0xfffffbff
 8001978:	00001388 	.word	0x00001388
 800197c:	efffffff 	.word	0xefffffff
 8001980:	feffffff 	.word	0xfeffffff
 8001984:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	2b01      	cmp	r3, #1
 800198e:	d101      	bne.n	8001994 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e01d      	b.n	80019d0 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001994:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <HAL_RCC_OscConfig+0x6f4>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	025b      	lsls	r3, r3, #9
 80019a0:	401a      	ands	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d10f      	bne.n	80019ca <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	23f0      	movs	r3, #240	; 0xf0
 80019ae:	039b      	lsls	r3, r3, #14
 80019b0:	401a      	ands	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d107      	bne.n	80019ca <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	23c0      	movs	r3, #192	; 0xc0
 80019be:	041b      	lsls	r3, r3, #16
 80019c0:	401a      	ands	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d001      	beq.n	80019ce <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e000      	b.n	80019d0 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	0018      	movs	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	b00a      	add	sp, #40	; 0x28
 80019d6:	bdb0      	pop	{r4, r5, r7, pc}
 80019d8:	40021000 	.word	0x40021000

080019dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019dc:	b5b0      	push	{r4, r5, r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e128      	b.n	8001c42 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019f0:	4b96      	ldr	r3, [pc, #600]	; (8001c4c <HAL_RCC_ClockConfig+0x270>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2201      	movs	r2, #1
 80019f6:	4013      	ands	r3, r2
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d91e      	bls.n	8001a3c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fe:	4b93      	ldr	r3, [pc, #588]	; (8001c4c <HAL_RCC_ClockConfig+0x270>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2201      	movs	r2, #1
 8001a04:	4393      	bics	r3, r2
 8001a06:	0019      	movs	r1, r3
 8001a08:	4b90      	ldr	r3, [pc, #576]	; (8001c4c <HAL_RCC_ClockConfig+0x270>)
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a10:	f7ff f9de 	bl	8000dd0 <HAL_GetTick>
 8001a14:	0003      	movs	r3, r0
 8001a16:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a18:	e009      	b.n	8001a2e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1a:	f7ff f9d9 	bl	8000dd0 <HAL_GetTick>
 8001a1e:	0002      	movs	r2, r0
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	4a8a      	ldr	r2, [pc, #552]	; (8001c50 <HAL_RCC_ClockConfig+0x274>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e109      	b.n	8001c42 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2e:	4b87      	ldr	r3, [pc, #540]	; (8001c4c <HAL_RCC_ClockConfig+0x270>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2201      	movs	r2, #1
 8001a34:	4013      	ands	r3, r2
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d1ee      	bne.n	8001a1a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2202      	movs	r2, #2
 8001a42:	4013      	ands	r3, r2
 8001a44:	d009      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a46:	4b83      	ldr	r3, [pc, #524]	; (8001c54 <HAL_RCC_ClockConfig+0x278>)
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	22f0      	movs	r2, #240	; 0xf0
 8001a4c:	4393      	bics	r3, r2
 8001a4e:	0019      	movs	r1, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	4b7f      	ldr	r3, [pc, #508]	; (8001c54 <HAL_RCC_ClockConfig+0x278>)
 8001a56:	430a      	orrs	r2, r1
 8001a58:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	4013      	ands	r3, r2
 8001a62:	d100      	bne.n	8001a66 <HAL_RCC_ClockConfig+0x8a>
 8001a64:	e089      	b.n	8001b7a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a6e:	4b79      	ldr	r3, [pc, #484]	; (8001c54 <HAL_RCC_ClockConfig+0x278>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	029b      	lsls	r3, r3, #10
 8001a76:	4013      	ands	r3, r2
 8001a78:	d120      	bne.n	8001abc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e0e1      	b.n	8001c42 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a86:	4b73      	ldr	r3, [pc, #460]	; (8001c54 <HAL_RCC_ClockConfig+0x278>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	2380      	movs	r3, #128	; 0x80
 8001a8c:	049b      	lsls	r3, r3, #18
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d114      	bne.n	8001abc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e0d5      	b.n	8001c42 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d106      	bne.n	8001aac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a9e:	4b6d      	ldr	r3, [pc, #436]	; (8001c54 <HAL_RCC_ClockConfig+0x278>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2204      	movs	r2, #4
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d109      	bne.n	8001abc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0ca      	b.n	8001c42 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001aac:	4b69      	ldr	r3, [pc, #420]	; (8001c54 <HAL_RCC_ClockConfig+0x278>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d101      	bne.n	8001abc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0c2      	b.n	8001c42 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001abc:	4b65      	ldr	r3, [pc, #404]	; (8001c54 <HAL_RCC_ClockConfig+0x278>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	4393      	bics	r3, r2
 8001ac4:	0019      	movs	r1, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	4b62      	ldr	r3, [pc, #392]	; (8001c54 <HAL_RCC_ClockConfig+0x278>)
 8001acc:	430a      	orrs	r2, r1
 8001ace:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ad0:	f7ff f97e 	bl	8000dd0 <HAL_GetTick>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d111      	bne.n	8001b04 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ae0:	e009      	b.n	8001af6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae2:	f7ff f975 	bl	8000dd0 <HAL_GetTick>
 8001ae6:	0002      	movs	r2, r0
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	4a58      	ldr	r2, [pc, #352]	; (8001c50 <HAL_RCC_ClockConfig+0x274>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e0a5      	b.n	8001c42 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001af6:	4b57      	ldr	r3, [pc, #348]	; (8001c54 <HAL_RCC_ClockConfig+0x278>)
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	220c      	movs	r2, #12
 8001afc:	4013      	ands	r3, r2
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d1ef      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0x106>
 8001b02:	e03a      	b.n	8001b7a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d111      	bne.n	8001b30 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b0c:	e009      	b.n	8001b22 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b0e:	f7ff f95f 	bl	8000dd0 <HAL_GetTick>
 8001b12:	0002      	movs	r2, r0
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	4a4d      	ldr	r2, [pc, #308]	; (8001c50 <HAL_RCC_ClockConfig+0x274>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e08f      	b.n	8001c42 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b22:	4b4c      	ldr	r3, [pc, #304]	; (8001c54 <HAL_RCC_ClockConfig+0x278>)
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	220c      	movs	r2, #12
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b0c      	cmp	r3, #12
 8001b2c:	d1ef      	bne.n	8001b0e <HAL_RCC_ClockConfig+0x132>
 8001b2e:	e024      	b.n	8001b7a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d11b      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b38:	e009      	b.n	8001b4e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b3a:	f7ff f949 	bl	8000dd0 <HAL_GetTick>
 8001b3e:	0002      	movs	r2, r0
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	4a42      	ldr	r2, [pc, #264]	; (8001c50 <HAL_RCC_ClockConfig+0x274>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e079      	b.n	8001c42 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b4e:	4b41      	ldr	r3, [pc, #260]	; (8001c54 <HAL_RCC_ClockConfig+0x278>)
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	220c      	movs	r2, #12
 8001b54:	4013      	ands	r3, r2
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	d1ef      	bne.n	8001b3a <HAL_RCC_ClockConfig+0x15e>
 8001b5a:	e00e      	b.n	8001b7a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b5c:	f7ff f938 	bl	8000dd0 <HAL_GetTick>
 8001b60:	0002      	movs	r2, r0
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	4a3a      	ldr	r2, [pc, #232]	; (8001c50 <HAL_RCC_ClockConfig+0x274>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e068      	b.n	8001c42 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b70:	4b38      	ldr	r3, [pc, #224]	; (8001c54 <HAL_RCC_ClockConfig+0x278>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	220c      	movs	r2, #12
 8001b76:	4013      	ands	r3, r2
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b7a:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <HAL_RCC_ClockConfig+0x270>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	4013      	ands	r3, r2
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d21e      	bcs.n	8001bc6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b88:	4b30      	ldr	r3, [pc, #192]	; (8001c4c <HAL_RCC_ClockConfig+0x270>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	4393      	bics	r3, r2
 8001b90:	0019      	movs	r1, r3
 8001b92:	4b2e      	ldr	r3, [pc, #184]	; (8001c4c <HAL_RCC_ClockConfig+0x270>)
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b9a:	f7ff f919 	bl	8000dd0 <HAL_GetTick>
 8001b9e:	0003      	movs	r3, r0
 8001ba0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba2:	e009      	b.n	8001bb8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba4:	f7ff f914 	bl	8000dd0 <HAL_GetTick>
 8001ba8:	0002      	movs	r2, r0
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	4a28      	ldr	r2, [pc, #160]	; (8001c50 <HAL_RCC_ClockConfig+0x274>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e044      	b.n	8001c42 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb8:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <HAL_RCC_ClockConfig+0x270>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d1ee      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2204      	movs	r2, #4
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d009      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd0:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <HAL_RCC_ClockConfig+0x278>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	4a20      	ldr	r2, [pc, #128]	; (8001c58 <HAL_RCC_ClockConfig+0x27c>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	0019      	movs	r1, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <HAL_RCC_ClockConfig+0x278>)
 8001be0:	430a      	orrs	r2, r1
 8001be2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2208      	movs	r2, #8
 8001bea:	4013      	ands	r3, r2
 8001bec:	d00a      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bee:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <HAL_RCC_ClockConfig+0x278>)
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	4a1a      	ldr	r2, [pc, #104]	; (8001c5c <HAL_RCC_ClockConfig+0x280>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	0019      	movs	r1, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	00da      	lsls	r2, r3, #3
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <HAL_RCC_ClockConfig+0x278>)
 8001c00:	430a      	orrs	r2, r1
 8001c02:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c04:	f000 f832 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 8001c08:	0001      	movs	r1, r0
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_RCC_ClockConfig+0x278>)
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	091b      	lsrs	r3, r3, #4
 8001c10:	220f      	movs	r2, #15
 8001c12:	4013      	ands	r3, r2
 8001c14:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <HAL_RCC_ClockConfig+0x284>)
 8001c16:	5cd3      	ldrb	r3, [r2, r3]
 8001c18:	000a      	movs	r2, r1
 8001c1a:	40da      	lsrs	r2, r3
 8001c1c:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <HAL_RCC_ClockConfig+0x288>)
 8001c1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <HAL_RCC_ClockConfig+0x28c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	250b      	movs	r5, #11
 8001c26:	197c      	adds	r4, r7, r5
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f7ff f88b 	bl	8000d44 <HAL_InitTick>
 8001c2e:	0003      	movs	r3, r0
 8001c30:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001c32:	197b      	adds	r3, r7, r5
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d002      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001c3a:	197b      	adds	r3, r7, r5
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	e000      	b.n	8001c42 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	0018      	movs	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b004      	add	sp, #16
 8001c48:	bdb0      	pop	{r4, r5, r7, pc}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	40022000 	.word	0x40022000
 8001c50:	00001388 	.word	0x00001388
 8001c54:	40021000 	.word	0x40021000
 8001c58:	fffff8ff 	.word	0xfffff8ff
 8001c5c:	ffffc7ff 	.word	0xffffc7ff
 8001c60:	08002538 	.word	0x08002538
 8001c64:	20000000 	.word	0x20000000
 8001c68:	20000004 	.word	0x20000004

08001c6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c6c:	b5b0      	push	{r4, r5, r7, lr}
 8001c6e:	b08e      	sub	sp, #56	; 0x38
 8001c70:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001c72:	4b4c      	ldr	r3, [pc, #304]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c7a:	230c      	movs	r3, #12
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	2b0c      	cmp	r3, #12
 8001c80:	d014      	beq.n	8001cac <HAL_RCC_GetSysClockFreq+0x40>
 8001c82:	d900      	bls.n	8001c86 <HAL_RCC_GetSysClockFreq+0x1a>
 8001c84:	e07b      	b.n	8001d7e <HAL_RCC_GetSysClockFreq+0x112>
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d002      	beq.n	8001c90 <HAL_RCC_GetSysClockFreq+0x24>
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d00b      	beq.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c8e:	e076      	b.n	8001d7e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c90:	4b44      	ldr	r3, [pc, #272]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2210      	movs	r2, #16
 8001c96:	4013      	ands	r3, r2
 8001c98:	d002      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001c9a:	4b43      	ldr	r3, [pc, #268]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c9c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001c9e:	e07c      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001ca0:	4b42      	ldr	r3, [pc, #264]	; (8001dac <HAL_RCC_GetSysClockFreq+0x140>)
 8001ca2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ca4:	e079      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ca6:	4b42      	ldr	r3, [pc, #264]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ca8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001caa:	e076      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cae:	0c9a      	lsrs	r2, r3, #18
 8001cb0:	230f      	movs	r3, #15
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	4b3f      	ldr	r3, [pc, #252]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x148>)
 8001cb6:	5c9b      	ldrb	r3, [r3, r2]
 8001cb8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cbc:	0d9a      	lsrs	r2, r3, #22
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cc6:	4b37      	ldr	r3, [pc, #220]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	2380      	movs	r3, #128	; 0x80
 8001ccc:	025b      	lsls	r3, r3, #9
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d01a      	beq.n	8001d08 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd4:	61bb      	str	r3, [r7, #24]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	4a35      	ldr	r2, [pc, #212]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x144>)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	69b8      	ldr	r0, [r7, #24]
 8001ce0:	69f9      	ldr	r1, [r7, #28]
 8001ce2:	f7fe fba7 	bl	8000434 <__aeabi_lmul>
 8001ce6:	0002      	movs	r2, r0
 8001ce8:	000b      	movs	r3, r1
 8001cea:	0010      	movs	r0, r2
 8001cec:	0019      	movs	r1, r3
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	f7fe fb7b 	bl	80003f4 <__aeabi_uldivmod>
 8001cfe:	0002      	movs	r2, r0
 8001d00:	000b      	movs	r3, r1
 8001d02:	0013      	movs	r3, r2
 8001d04:	637b      	str	r3, [r7, #52]	; 0x34
 8001d06:	e037      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d08:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2210      	movs	r2, #16
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d01a      	beq.n	8001d48 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	4a23      	ldr	r2, [pc, #140]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	68b8      	ldr	r0, [r7, #8]
 8001d20:	68f9      	ldr	r1, [r7, #12]
 8001d22:	f7fe fb87 	bl	8000434 <__aeabi_lmul>
 8001d26:	0002      	movs	r2, r0
 8001d28:	000b      	movs	r3, r1
 8001d2a:	0010      	movs	r0, r2
 8001d2c:	0019      	movs	r1, r3
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	603b      	str	r3, [r7, #0]
 8001d32:	2300      	movs	r3, #0
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f7fe fb5b 	bl	80003f4 <__aeabi_uldivmod>
 8001d3e:	0002      	movs	r2, r0
 8001d40:	000b      	movs	r3, r1
 8001d42:	0013      	movs	r3, r2
 8001d44:	637b      	str	r3, [r7, #52]	; 0x34
 8001d46:	e017      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	0019      	movs	r1, r3
 8001d50:	4a16      	ldr	r2, [pc, #88]	; (8001dac <HAL_RCC_GetSysClockFreq+0x140>)
 8001d52:	2300      	movs	r3, #0
 8001d54:	f7fe fb6e 	bl	8000434 <__aeabi_lmul>
 8001d58:	0002      	movs	r2, r0
 8001d5a:	000b      	movs	r3, r1
 8001d5c:	0010      	movs	r0, r2
 8001d5e:	0019      	movs	r1, r3
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	001c      	movs	r4, r3
 8001d64:	2300      	movs	r3, #0
 8001d66:	001d      	movs	r5, r3
 8001d68:	0022      	movs	r2, r4
 8001d6a:	002b      	movs	r3, r5
 8001d6c:	f7fe fb42 	bl	80003f4 <__aeabi_uldivmod>
 8001d70:	0002      	movs	r2, r0
 8001d72:	000b      	movs	r3, r1
 8001d74:	0013      	movs	r3, r2
 8001d76:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d7a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d7c:	e00d      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	0b5b      	lsrs	r3, r3, #13
 8001d84:	2207      	movs	r2, #7
 8001d86:	4013      	ands	r3, r2
 8001d88:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d8a:	6a3b      	ldr	r3, [r7, #32]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	2280      	movs	r2, #128	; 0x80
 8001d90:	0212      	lsls	r2, r2, #8
 8001d92:	409a      	lsls	r2, r3
 8001d94:	0013      	movs	r3, r2
 8001d96:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d98:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	b00e      	add	sp, #56	; 0x38
 8001da2:	bdb0      	pop	{r4, r5, r7, pc}
 8001da4:	40021000 	.word	0x40021000
 8001da8:	003d0900 	.word	0x003d0900
 8001dac:	00f42400 	.word	0x00f42400
 8001db0:	007a1200 	.word	0x007a1200
 8001db4:	08002548 	.word	0x08002548

08001db8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e032      	b.n	8001e30 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2239      	movs	r2, #57	; 0x39
 8001dce:	5c9b      	ldrb	r3, [r3, r2]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d107      	bne.n	8001de6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2238      	movs	r2, #56	; 0x38
 8001dda:	2100      	movs	r1, #0
 8001ddc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	0018      	movs	r0, r3
 8001de2:	f7fe fed3 	bl	8000b8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2239      	movs	r2, #57	; 0x39
 8001dea:	2102      	movs	r1, #2
 8001dec:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3304      	adds	r3, #4
 8001df6:	0019      	movs	r1, r3
 8001df8:	0010      	movs	r0, r2
 8001dfa:	f000 f96f 	bl	80020dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	223e      	movs	r2, #62	; 0x3e
 8001e02:	2101      	movs	r1, #1
 8001e04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	223a      	movs	r2, #58	; 0x3a
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	5499      	strb	r1, [r3, r2]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	223b      	movs	r2, #59	; 0x3b
 8001e12:	2101      	movs	r1, #1
 8001e14:	5499      	strb	r1, [r3, r2]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	223c      	movs	r2, #60	; 0x3c
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	5499      	strb	r1, [r3, r2]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	223d      	movs	r2, #61	; 0x3d
 8001e22:	2101      	movs	r1, #1
 8001e24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2239      	movs	r2, #57	; 0x39
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	0018      	movs	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	b002      	add	sp, #8
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d108      	bne.n	8001e5a <HAL_TIM_PWM_Start+0x22>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	223a      	movs	r2, #58	; 0x3a
 8001e4c:	5c9b      	ldrb	r3, [r3, r2]
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	3b01      	subs	r3, #1
 8001e52:	1e5a      	subs	r2, r3, #1
 8001e54:	4193      	sbcs	r3, r2
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	e01f      	b.n	8001e9a <HAL_TIM_PWM_Start+0x62>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d108      	bne.n	8001e72 <HAL_TIM_PWM_Start+0x3a>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	223b      	movs	r2, #59	; 0x3b
 8001e64:	5c9b      	ldrb	r3, [r3, r2]
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	1e5a      	subs	r2, r3, #1
 8001e6c:	4193      	sbcs	r3, r2
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	e013      	b.n	8001e9a <HAL_TIM_PWM_Start+0x62>
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d108      	bne.n	8001e8a <HAL_TIM_PWM_Start+0x52>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	223c      	movs	r2, #60	; 0x3c
 8001e7c:	5c9b      	ldrb	r3, [r3, r2]
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	3b01      	subs	r3, #1
 8001e82:	1e5a      	subs	r2, r3, #1
 8001e84:	4193      	sbcs	r3, r2
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	e007      	b.n	8001e9a <HAL_TIM_PWM_Start+0x62>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	223d      	movs	r2, #61	; 0x3d
 8001e8e:	5c9b      	ldrb	r3, [r3, r2]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	3b01      	subs	r3, #1
 8001e94:	1e5a      	subs	r2, r3, #1
 8001e96:	4193      	sbcs	r3, r2
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e04d      	b.n	8001f3e <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d104      	bne.n	8001eb2 <HAL_TIM_PWM_Start+0x7a>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	223a      	movs	r2, #58	; 0x3a
 8001eac:	2102      	movs	r1, #2
 8001eae:	5499      	strb	r1, [r3, r2]
 8001eb0:	e013      	b.n	8001eda <HAL_TIM_PWM_Start+0xa2>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d104      	bne.n	8001ec2 <HAL_TIM_PWM_Start+0x8a>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	223b      	movs	r2, #59	; 0x3b
 8001ebc:	2102      	movs	r1, #2
 8001ebe:	5499      	strb	r1, [r3, r2]
 8001ec0:	e00b      	b.n	8001eda <HAL_TIM_PWM_Start+0xa2>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	d104      	bne.n	8001ed2 <HAL_TIM_PWM_Start+0x9a>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	223c      	movs	r2, #60	; 0x3c
 8001ecc:	2102      	movs	r1, #2
 8001ece:	5499      	strb	r1, [r3, r2]
 8001ed0:	e003      	b.n	8001eda <HAL_TIM_PWM_Start+0xa2>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	223d      	movs	r2, #61	; 0x3d
 8001ed6:	2102      	movs	r1, #2
 8001ed8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6839      	ldr	r1, [r7, #0]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f000 fa52 	bl	800238c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	05db      	lsls	r3, r3, #23
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d009      	beq.n	8001f08 <HAL_TIM_PWM_Start+0xd0>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a13      	ldr	r2, [pc, #76]	; (8001f48 <HAL_TIM_PWM_Start+0x110>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d004      	beq.n	8001f08 <HAL_TIM_PWM_Start+0xd0>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <HAL_TIM_PWM_Start+0x114>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d111      	bne.n	8001f2c <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2207      	movs	r2, #7
 8001f10:	4013      	ands	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2b06      	cmp	r3, #6
 8001f18:	d010      	beq.n	8001f3c <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2101      	movs	r1, #1
 8001f26:	430a      	orrs	r2, r1
 8001f28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f2a:	e007      	b.n	8001f3c <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2101      	movs	r1, #1
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	0018      	movs	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b004      	add	sp, #16
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	40010800 	.word	0x40010800
 8001f4c:	40011400 	.word	0x40011400

08001f50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f5c:	2317      	movs	r3, #23
 8001f5e:	18fb      	adds	r3, r7, r3
 8001f60:	2200      	movs	r2, #0
 8001f62:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2238      	movs	r2, #56	; 0x38
 8001f68:	5c9b      	ldrb	r3, [r3, r2]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e0ad      	b.n	80020ce <HAL_TIM_PWM_ConfigChannel+0x17e>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2238      	movs	r2, #56	; 0x38
 8001f76:	2101      	movs	r1, #1
 8001f78:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b0c      	cmp	r3, #12
 8001f7e:	d100      	bne.n	8001f82 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001f80:	e076      	b.n	8002070 <HAL_TIM_PWM_ConfigChannel+0x120>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b0c      	cmp	r3, #12
 8001f86:	d900      	bls.n	8001f8a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8001f88:	e095      	b.n	80020b6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d04e      	beq.n	800202e <HAL_TIM_PWM_ConfigChannel+0xde>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d900      	bls.n	8001f98 <HAL_TIM_PWM_ConfigChannel+0x48>
 8001f96:	e08e      	b.n	80020b6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_TIM_PWM_ConfigChannel+0x56>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d021      	beq.n	8001fe8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8001fa4:	e087      	b.n	80020b6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	0011      	movs	r1, r2
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f000 f8e8 	bl	8002184 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	699a      	ldr	r2, [r3, #24]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2108      	movs	r1, #8
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	699a      	ldr	r2, [r3, #24]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2104      	movs	r1, #4
 8001fd0:	438a      	bics	r2, r1
 8001fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6999      	ldr	r1, [r3, #24]
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	619a      	str	r2, [r3, #24]
      break;
 8001fe6:	e06b      	b.n	80020c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	0011      	movs	r1, r2
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f000 f903 	bl	80021fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	699a      	ldr	r2, [r3, #24]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2180      	movs	r1, #128	; 0x80
 8002002:	0109      	lsls	r1, r1, #4
 8002004:	430a      	orrs	r2, r1
 8002006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	699a      	ldr	r2, [r3, #24]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4931      	ldr	r1, [pc, #196]	; (80020d8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002014:	400a      	ands	r2, r1
 8002016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6999      	ldr	r1, [r3, #24]
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	021a      	lsls	r2, r3, #8
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	619a      	str	r2, [r3, #24]
      break;
 800202c:	e048      	b.n	80020c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	0011      	movs	r1, r2
 8002036:	0018      	movs	r0, r3
 8002038:	f000 f922 	bl	8002280 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	69da      	ldr	r2, [r3, #28]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2108      	movs	r1, #8
 8002048:	430a      	orrs	r2, r1
 800204a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	69da      	ldr	r2, [r3, #28]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2104      	movs	r1, #4
 8002058:	438a      	bics	r2, r1
 800205a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	69d9      	ldr	r1, [r3, #28]
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	61da      	str	r2, [r3, #28]
      break;
 800206e:	e027      	b.n	80020c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	0011      	movs	r1, r2
 8002078:	0018      	movs	r0, r3
 800207a:	f000 f941 	bl	8002300 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	69da      	ldr	r2, [r3, #28]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2180      	movs	r1, #128	; 0x80
 800208a:	0109      	lsls	r1, r1, #4
 800208c:	430a      	orrs	r2, r1
 800208e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	69da      	ldr	r2, [r3, #28]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	490f      	ldr	r1, [pc, #60]	; (80020d8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800209c:	400a      	ands	r2, r1
 800209e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	69d9      	ldr	r1, [r3, #28]
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	021a      	lsls	r2, r3, #8
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	61da      	str	r2, [r3, #28]
      break;
 80020b4:	e004      	b.n	80020c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80020b6:	2317      	movs	r3, #23
 80020b8:	18fb      	adds	r3, r7, r3
 80020ba:	2201      	movs	r2, #1
 80020bc:	701a      	strb	r2, [r3, #0]
      break;
 80020be:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2238      	movs	r2, #56	; 0x38
 80020c4:	2100      	movs	r1, #0
 80020c6:	5499      	strb	r1, [r3, r2]

  return status;
 80020c8:	2317      	movs	r3, #23
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	781b      	ldrb	r3, [r3, #0]
}
 80020ce:	0018      	movs	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	b006      	add	sp, #24
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	fffffbff 	.word	0xfffffbff

080020dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	2380      	movs	r3, #128	; 0x80
 80020f0:	05db      	lsls	r3, r3, #23
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d007      	beq.n	8002106 <TIM_Base_SetConfig+0x2a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a1f      	ldr	r2, [pc, #124]	; (8002178 <TIM_Base_SetConfig+0x9c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d003      	beq.n	8002106 <TIM_Base_SetConfig+0x2a>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a1e      	ldr	r2, [pc, #120]	; (800217c <TIM_Base_SetConfig+0xa0>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d108      	bne.n	8002118 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2270      	movs	r2, #112	; 0x70
 800210a:	4393      	bics	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	4313      	orrs	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	2380      	movs	r3, #128	; 0x80
 800211c:	05db      	lsls	r3, r3, #23
 800211e:	429a      	cmp	r2, r3
 8002120:	d007      	beq.n	8002132 <TIM_Base_SetConfig+0x56>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a14      	ldr	r2, [pc, #80]	; (8002178 <TIM_Base_SetConfig+0x9c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d003      	beq.n	8002132 <TIM_Base_SetConfig+0x56>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a13      	ldr	r2, [pc, #76]	; (800217c <TIM_Base_SetConfig+0xa0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d108      	bne.n	8002144 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4a12      	ldr	r2, [pc, #72]	; (8002180 <TIM_Base_SetConfig+0xa4>)
 8002136:	4013      	ands	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	4313      	orrs	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2280      	movs	r2, #128	; 0x80
 8002148:	4393      	bics	r3, r2
 800214a:	001a      	movs	r2, r3
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	615a      	str	r2, [r3, #20]
}
 8002170:	46c0      	nop			; (mov r8, r8)
 8002172:	46bd      	mov	sp, r7
 8002174:	b004      	add	sp, #16
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40010800 	.word	0x40010800
 800217c:	40011400 	.word	0x40011400
 8002180:	fffffcff 	.word	0xfffffcff

08002184 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	2201      	movs	r2, #1
 8002194:	4393      	bics	r3, r2
 8002196:	001a      	movs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2270      	movs	r2, #112	; 0x70
 80021b2:	4393      	bics	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2203      	movs	r2, #3
 80021ba:	4393      	bics	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	2202      	movs	r2, #2
 80021cc:	4393      	bics	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	621a      	str	r2, [r3, #32]
}
 80021f4:	46c0      	nop			; (mov r8, r8)
 80021f6:	46bd      	mov	sp, r7
 80021f8:	b006      	add	sp, #24
 80021fa:	bd80      	pop	{r7, pc}

080021fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	2210      	movs	r2, #16
 800220c:	4393      	bics	r3, r2
 800220e:	001a      	movs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4a13      	ldr	r2, [pc, #76]	; (8002278 <TIM_OC2_SetConfig+0x7c>)
 800222a:	4013      	ands	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4a12      	ldr	r2, [pc, #72]	; (800227c <TIM_OC2_SetConfig+0x80>)
 8002232:	4013      	ands	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	021b      	lsls	r3, r3, #8
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	4313      	orrs	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2220      	movs	r2, #32
 8002246:	4393      	bics	r3, r2
 8002248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	011b      	lsls	r3, r3, #4
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	4313      	orrs	r3, r2
 8002254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	621a      	str	r2, [r3, #32]
}
 8002270:	46c0      	nop			; (mov r8, r8)
 8002272:	46bd      	mov	sp, r7
 8002274:	b006      	add	sp, #24
 8002276:	bd80      	pop	{r7, pc}
 8002278:	ffff8fff 	.word	0xffff8fff
 800227c:	fffffcff 	.word	0xfffffcff

08002280 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	4a1a      	ldr	r2, [pc, #104]	; (80022f8 <TIM_OC3_SetConfig+0x78>)
 8002290:	401a      	ands	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2270      	movs	r2, #112	; 0x70
 80022ac:	4393      	bics	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2203      	movs	r2, #3
 80022b4:	4393      	bics	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	4313      	orrs	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	4a0d      	ldr	r2, [pc, #52]	; (80022fc <TIM_OC3_SetConfig+0x7c>)
 80022c6:	4013      	ands	r3, r2
 80022c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	621a      	str	r2, [r3, #32]
}
 80022f0:	46c0      	nop			; (mov r8, r8)
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b006      	add	sp, #24
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	fffffeff 	.word	0xfffffeff
 80022fc:	fffffdff 	.word	0xfffffdff

08002300 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	4a1b      	ldr	r2, [pc, #108]	; (800237c <TIM_OC4_SetConfig+0x7c>)
 8002310:	401a      	ands	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4a15      	ldr	r2, [pc, #84]	; (8002380 <TIM_OC4_SetConfig+0x80>)
 800232c:	4013      	ands	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4a14      	ldr	r2, [pc, #80]	; (8002384 <TIM_OC4_SetConfig+0x84>)
 8002334:	4013      	ands	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	021b      	lsls	r3, r3, #8
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	4313      	orrs	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	4a10      	ldr	r2, [pc, #64]	; (8002388 <TIM_OC4_SetConfig+0x88>)
 8002348:	4013      	ands	r3, r2
 800234a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	031b      	lsls	r3, r3, #12
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	4313      	orrs	r3, r2
 8002356:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	621a      	str	r2, [r3, #32]
}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	46bd      	mov	sp, r7
 8002376:	b006      	add	sp, #24
 8002378:	bd80      	pop	{r7, pc}
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	ffffefff 	.word	0xffffefff
 8002380:	ffff8fff 	.word	0xffff8fff
 8002384:	fffffcff 	.word	0xfffffcff
 8002388:	ffffdfff 	.word	0xffffdfff

0800238c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	221f      	movs	r2, #31
 800239c:	4013      	ands	r3, r2
 800239e:	2201      	movs	r2, #1
 80023a0:	409a      	lsls	r2, r3
 80023a2:	0013      	movs	r3, r2
 80023a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	43d2      	mvns	r2, r2
 80023ae:	401a      	ands	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a1a      	ldr	r2, [r3, #32]
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	211f      	movs	r1, #31
 80023bc:	400b      	ands	r3, r1
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4099      	lsls	r1, r3
 80023c2:	000b      	movs	r3, r1
 80023c4:	431a      	orrs	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	621a      	str	r2, [r3, #32]
}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	46bd      	mov	sp, r7
 80023ce:	b006      	add	sp, #24
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2238      	movs	r2, #56	; 0x38
 80023e2:	5c9b      	ldrb	r3, [r3, r2]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e042      	b.n	8002472 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2238      	movs	r2, #56	; 0x38
 80023f0:	2101      	movs	r1, #1
 80023f2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2239      	movs	r2, #57	; 0x39
 80023f8:	2102      	movs	r1, #2
 80023fa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2270      	movs	r2, #112	; 0x70
 8002410:	4393      	bics	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	4313      	orrs	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	05db      	lsls	r3, r3, #23
 800242e:	429a      	cmp	r2, r3
 8002430:	d009      	beq.n	8002446 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a11      	ldr	r2, [pc, #68]	; (800247c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d004      	beq.n	8002446 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a0f      	ldr	r2, [pc, #60]	; (8002480 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d10c      	bne.n	8002460 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2280      	movs	r2, #128	; 0x80
 800244a:	4393      	bics	r3, r2
 800244c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	4313      	orrs	r3, r2
 8002456:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2239      	movs	r2, #57	; 0x39
 8002464:	2101      	movs	r1, #1
 8002466:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2238      	movs	r2, #56	; 0x38
 800246c:	2100      	movs	r1, #0
 800246e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	0018      	movs	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	b004      	add	sp, #16
 8002478:	bd80      	pop	{r7, pc}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	40010800 	.word	0x40010800
 8002480:	40011400 	.word	0x40011400

08002484 <memset>:
 8002484:	0003      	movs	r3, r0
 8002486:	1882      	adds	r2, r0, r2
 8002488:	4293      	cmp	r3, r2
 800248a:	d100      	bne.n	800248e <memset+0xa>
 800248c:	4770      	bx	lr
 800248e:	7019      	strb	r1, [r3, #0]
 8002490:	3301      	adds	r3, #1
 8002492:	e7f9      	b.n	8002488 <memset+0x4>

08002494 <__libc_init_array>:
 8002494:	b570      	push	{r4, r5, r6, lr}
 8002496:	2600      	movs	r6, #0
 8002498:	4c0c      	ldr	r4, [pc, #48]	; (80024cc <__libc_init_array+0x38>)
 800249a:	4d0d      	ldr	r5, [pc, #52]	; (80024d0 <__libc_init_array+0x3c>)
 800249c:	1b64      	subs	r4, r4, r5
 800249e:	10a4      	asrs	r4, r4, #2
 80024a0:	42a6      	cmp	r6, r4
 80024a2:	d109      	bne.n	80024b8 <__libc_init_array+0x24>
 80024a4:	2600      	movs	r6, #0
 80024a6:	f000 f819 	bl	80024dc <_init>
 80024aa:	4c0a      	ldr	r4, [pc, #40]	; (80024d4 <__libc_init_array+0x40>)
 80024ac:	4d0a      	ldr	r5, [pc, #40]	; (80024d8 <__libc_init_array+0x44>)
 80024ae:	1b64      	subs	r4, r4, r5
 80024b0:	10a4      	asrs	r4, r4, #2
 80024b2:	42a6      	cmp	r6, r4
 80024b4:	d105      	bne.n	80024c2 <__libc_init_array+0x2e>
 80024b6:	bd70      	pop	{r4, r5, r6, pc}
 80024b8:	00b3      	lsls	r3, r6, #2
 80024ba:	58eb      	ldr	r3, [r5, r3]
 80024bc:	4798      	blx	r3
 80024be:	3601      	adds	r6, #1
 80024c0:	e7ee      	b.n	80024a0 <__libc_init_array+0xc>
 80024c2:	00b3      	lsls	r3, r6, #2
 80024c4:	58eb      	ldr	r3, [r5, r3]
 80024c6:	4798      	blx	r3
 80024c8:	3601      	adds	r6, #1
 80024ca:	e7f2      	b.n	80024b2 <__libc_init_array+0x1e>
 80024cc:	0800255c 	.word	0x0800255c
 80024d0:	0800255c 	.word	0x0800255c
 80024d4:	08002560 	.word	0x08002560
 80024d8:	0800255c 	.word	0x0800255c

080024dc <_init>:
 80024dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024e2:	bc08      	pop	{r3}
 80024e4:	469e      	mov	lr, r3
 80024e6:	4770      	bx	lr

080024e8 <_fini>:
 80024e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ee:	bc08      	pop	{r3}
 80024f0:	469e      	mov	lr, r3
 80024f2:	4770      	bx	lr
