
BotBuddy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002350  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002410  08002410  00012410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002470  08002470  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002470  08002470  00012470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002478  08002478  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002478  08002478  00012478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800247c  0800247c  0001247c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  0800248c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  0800248c  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000066ad  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013d0  00000000  00000000  00026724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007c0  00000000  00000000  00027af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005e2  00000000  00000000  000282b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010311  00000000  00000000  0002889a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008766  00000000  00000000  00038bab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00065231  00000000  00000000  00041311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ba4  00000000  00000000  000a6544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000a80e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080023f8 	.word	0x080023f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080023f8 	.word	0x080023f8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f834 	bl	8000490 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_lmul>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	46ce      	mov	lr, r9
 8000438:	4699      	mov	r9, r3
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	469c      	mov	ip, r3
 800043e:	0413      	lsls	r3, r2, #16
 8000440:	4647      	mov	r7, r8
 8000442:	0c1b      	lsrs	r3, r3, #16
 8000444:	001d      	movs	r5, r3
 8000446:	000e      	movs	r6, r1
 8000448:	4661      	mov	r1, ip
 800044a:	0404      	lsls	r4, r0, #16
 800044c:	0c24      	lsrs	r4, r4, #16
 800044e:	b580      	push	{r7, lr}
 8000450:	0007      	movs	r7, r0
 8000452:	0c10      	lsrs	r0, r2, #16
 8000454:	434b      	muls	r3, r1
 8000456:	4365      	muls	r5, r4
 8000458:	4341      	muls	r1, r0
 800045a:	4360      	muls	r0, r4
 800045c:	0c2c      	lsrs	r4, r5, #16
 800045e:	18c0      	adds	r0, r0, r3
 8000460:	1820      	adds	r0, r4, r0
 8000462:	468c      	mov	ip, r1
 8000464:	4283      	cmp	r3, r0
 8000466:	d903      	bls.n	8000470 <__aeabi_lmul+0x3c>
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	025b      	lsls	r3, r3, #9
 800046c:	4698      	mov	r8, r3
 800046e:	44c4      	add	ip, r8
 8000470:	4649      	mov	r1, r9
 8000472:	4379      	muls	r1, r7
 8000474:	4356      	muls	r6, r2
 8000476:	0c03      	lsrs	r3, r0, #16
 8000478:	042d      	lsls	r5, r5, #16
 800047a:	0c2d      	lsrs	r5, r5, #16
 800047c:	1989      	adds	r1, r1, r6
 800047e:	4463      	add	r3, ip
 8000480:	0400      	lsls	r0, r0, #16
 8000482:	1940      	adds	r0, r0, r5
 8000484:	18c9      	adds	r1, r1, r3
 8000486:	bcc0      	pop	{r6, r7}
 8000488:	46b9      	mov	r9, r7
 800048a:	46b0      	mov	r8, r6
 800048c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__udivmoddi4>:
 8000490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000492:	4657      	mov	r7, sl
 8000494:	464e      	mov	r6, r9
 8000496:	4645      	mov	r5, r8
 8000498:	46de      	mov	lr, fp
 800049a:	b5e0      	push	{r5, r6, r7, lr}
 800049c:	0004      	movs	r4, r0
 800049e:	000d      	movs	r5, r1
 80004a0:	4692      	mov	sl, r2
 80004a2:	4699      	mov	r9, r3
 80004a4:	b083      	sub	sp, #12
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d830      	bhi.n	800050c <__udivmoddi4+0x7c>
 80004aa:	d02d      	beq.n	8000508 <__udivmoddi4+0x78>
 80004ac:	4649      	mov	r1, r9
 80004ae:	4650      	mov	r0, sl
 80004b0:	f000 f8ba 	bl	8000628 <__clzdi2>
 80004b4:	0029      	movs	r1, r5
 80004b6:	0006      	movs	r6, r0
 80004b8:	0020      	movs	r0, r4
 80004ba:	f000 f8b5 	bl	8000628 <__clzdi2>
 80004be:	1a33      	subs	r3, r6, r0
 80004c0:	4698      	mov	r8, r3
 80004c2:	3b20      	subs	r3, #32
 80004c4:	d434      	bmi.n	8000530 <__udivmoddi4+0xa0>
 80004c6:	469b      	mov	fp, r3
 80004c8:	4653      	mov	r3, sl
 80004ca:	465a      	mov	r2, fp
 80004cc:	4093      	lsls	r3, r2
 80004ce:	4642      	mov	r2, r8
 80004d0:	001f      	movs	r7, r3
 80004d2:	4653      	mov	r3, sl
 80004d4:	4093      	lsls	r3, r2
 80004d6:	001e      	movs	r6, r3
 80004d8:	42af      	cmp	r7, r5
 80004da:	d83b      	bhi.n	8000554 <__udivmoddi4+0xc4>
 80004dc:	42af      	cmp	r7, r5
 80004de:	d100      	bne.n	80004e2 <__udivmoddi4+0x52>
 80004e0:	e079      	b.n	80005d6 <__udivmoddi4+0x146>
 80004e2:	465b      	mov	r3, fp
 80004e4:	1ba4      	subs	r4, r4, r6
 80004e6:	41bd      	sbcs	r5, r7
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	da00      	bge.n	80004ee <__udivmoddi4+0x5e>
 80004ec:	e076      	b.n	80005dc <__udivmoddi4+0x14c>
 80004ee:	2200      	movs	r2, #0
 80004f0:	2300      	movs	r3, #0
 80004f2:	9200      	str	r2, [sp, #0]
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2301      	movs	r3, #1
 80004f8:	465a      	mov	r2, fp
 80004fa:	4093      	lsls	r3, r2
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2301      	movs	r3, #1
 8000500:	4642      	mov	r2, r8
 8000502:	4093      	lsls	r3, r2
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	e029      	b.n	800055c <__udivmoddi4+0xcc>
 8000508:	4282      	cmp	r2, r0
 800050a:	d9cf      	bls.n	80004ac <__udivmoddi4+0x1c>
 800050c:	2200      	movs	r2, #0
 800050e:	2300      	movs	r3, #0
 8000510:	9200      	str	r2, [sp, #0]
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <__udivmoddi4+0x8e>
 800051a:	601c      	str	r4, [r3, #0]
 800051c:	605d      	str	r5, [r3, #4]
 800051e:	9800      	ldr	r0, [sp, #0]
 8000520:	9901      	ldr	r1, [sp, #4]
 8000522:	b003      	add	sp, #12
 8000524:	bcf0      	pop	{r4, r5, r6, r7}
 8000526:	46bb      	mov	fp, r7
 8000528:	46b2      	mov	sl, r6
 800052a:	46a9      	mov	r9, r5
 800052c:	46a0      	mov	r8, r4
 800052e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000530:	4642      	mov	r2, r8
 8000532:	469b      	mov	fp, r3
 8000534:	2320      	movs	r3, #32
 8000536:	1a9b      	subs	r3, r3, r2
 8000538:	4652      	mov	r2, sl
 800053a:	40da      	lsrs	r2, r3
 800053c:	4641      	mov	r1, r8
 800053e:	0013      	movs	r3, r2
 8000540:	464a      	mov	r2, r9
 8000542:	408a      	lsls	r2, r1
 8000544:	0017      	movs	r7, r2
 8000546:	4642      	mov	r2, r8
 8000548:	431f      	orrs	r7, r3
 800054a:	4653      	mov	r3, sl
 800054c:	4093      	lsls	r3, r2
 800054e:	001e      	movs	r6, r3
 8000550:	42af      	cmp	r7, r5
 8000552:	d9c3      	bls.n	80004dc <__udivmoddi4+0x4c>
 8000554:	2200      	movs	r2, #0
 8000556:	2300      	movs	r3, #0
 8000558:	9200      	str	r2, [sp, #0]
 800055a:	9301      	str	r3, [sp, #4]
 800055c:	4643      	mov	r3, r8
 800055e:	2b00      	cmp	r3, #0
 8000560:	d0d8      	beq.n	8000514 <__udivmoddi4+0x84>
 8000562:	07fb      	lsls	r3, r7, #31
 8000564:	0872      	lsrs	r2, r6, #1
 8000566:	431a      	orrs	r2, r3
 8000568:	4646      	mov	r6, r8
 800056a:	087b      	lsrs	r3, r7, #1
 800056c:	e00e      	b.n	800058c <__udivmoddi4+0xfc>
 800056e:	42ab      	cmp	r3, r5
 8000570:	d101      	bne.n	8000576 <__udivmoddi4+0xe6>
 8000572:	42a2      	cmp	r2, r4
 8000574:	d80c      	bhi.n	8000590 <__udivmoddi4+0x100>
 8000576:	1aa4      	subs	r4, r4, r2
 8000578:	419d      	sbcs	r5, r3
 800057a:	2001      	movs	r0, #1
 800057c:	1924      	adds	r4, r4, r4
 800057e:	416d      	adcs	r5, r5
 8000580:	2100      	movs	r1, #0
 8000582:	3e01      	subs	r6, #1
 8000584:	1824      	adds	r4, r4, r0
 8000586:	414d      	adcs	r5, r1
 8000588:	2e00      	cmp	r6, #0
 800058a:	d006      	beq.n	800059a <__udivmoddi4+0x10a>
 800058c:	42ab      	cmp	r3, r5
 800058e:	d9ee      	bls.n	800056e <__udivmoddi4+0xde>
 8000590:	3e01      	subs	r6, #1
 8000592:	1924      	adds	r4, r4, r4
 8000594:	416d      	adcs	r5, r5
 8000596:	2e00      	cmp	r6, #0
 8000598:	d1f8      	bne.n	800058c <__udivmoddi4+0xfc>
 800059a:	9800      	ldr	r0, [sp, #0]
 800059c:	9901      	ldr	r1, [sp, #4]
 800059e:	465b      	mov	r3, fp
 80005a0:	1900      	adds	r0, r0, r4
 80005a2:	4169      	adcs	r1, r5
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	db24      	blt.n	80005f2 <__udivmoddi4+0x162>
 80005a8:	002b      	movs	r3, r5
 80005aa:	465a      	mov	r2, fp
 80005ac:	4644      	mov	r4, r8
 80005ae:	40d3      	lsrs	r3, r2
 80005b0:	002a      	movs	r2, r5
 80005b2:	40e2      	lsrs	r2, r4
 80005b4:	001c      	movs	r4, r3
 80005b6:	465b      	mov	r3, fp
 80005b8:	0015      	movs	r5, r2
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db2a      	blt.n	8000614 <__udivmoddi4+0x184>
 80005be:	0026      	movs	r6, r4
 80005c0:	409e      	lsls	r6, r3
 80005c2:	0033      	movs	r3, r6
 80005c4:	0026      	movs	r6, r4
 80005c6:	4647      	mov	r7, r8
 80005c8:	40be      	lsls	r6, r7
 80005ca:	0032      	movs	r2, r6
 80005cc:	1a80      	subs	r0, r0, r2
 80005ce:	4199      	sbcs	r1, r3
 80005d0:	9000      	str	r0, [sp, #0]
 80005d2:	9101      	str	r1, [sp, #4]
 80005d4:	e79e      	b.n	8000514 <__udivmoddi4+0x84>
 80005d6:	42a3      	cmp	r3, r4
 80005d8:	d8bc      	bhi.n	8000554 <__udivmoddi4+0xc4>
 80005da:	e782      	b.n	80004e2 <__udivmoddi4+0x52>
 80005dc:	4642      	mov	r2, r8
 80005de:	2320      	movs	r3, #32
 80005e0:	2100      	movs	r1, #0
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	2200      	movs	r2, #0
 80005e6:	9100      	str	r1, [sp, #0]
 80005e8:	9201      	str	r2, [sp, #4]
 80005ea:	2201      	movs	r2, #1
 80005ec:	40da      	lsrs	r2, r3
 80005ee:	9201      	str	r2, [sp, #4]
 80005f0:	e785      	b.n	80004fe <__udivmoddi4+0x6e>
 80005f2:	4642      	mov	r2, r8
 80005f4:	2320      	movs	r3, #32
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	002a      	movs	r2, r5
 80005fa:	4646      	mov	r6, r8
 80005fc:	409a      	lsls	r2, r3
 80005fe:	0023      	movs	r3, r4
 8000600:	40f3      	lsrs	r3, r6
 8000602:	4644      	mov	r4, r8
 8000604:	4313      	orrs	r3, r2
 8000606:	002a      	movs	r2, r5
 8000608:	40e2      	lsrs	r2, r4
 800060a:	001c      	movs	r4, r3
 800060c:	465b      	mov	r3, fp
 800060e:	0015      	movs	r5, r2
 8000610:	2b00      	cmp	r3, #0
 8000612:	dad4      	bge.n	80005be <__udivmoddi4+0x12e>
 8000614:	4642      	mov	r2, r8
 8000616:	002f      	movs	r7, r5
 8000618:	2320      	movs	r3, #32
 800061a:	0026      	movs	r6, r4
 800061c:	4097      	lsls	r7, r2
 800061e:	1a9b      	subs	r3, r3, r2
 8000620:	40de      	lsrs	r6, r3
 8000622:	003b      	movs	r3, r7
 8000624:	4333      	orrs	r3, r6
 8000626:	e7cd      	b.n	80005c4 <__udivmoddi4+0x134>

08000628 <__clzdi2>:
 8000628:	b510      	push	{r4, lr}
 800062a:	2900      	cmp	r1, #0
 800062c:	d103      	bne.n	8000636 <__clzdi2+0xe>
 800062e:	f000 f807 	bl	8000640 <__clzsi2>
 8000632:	3020      	adds	r0, #32
 8000634:	e002      	b.n	800063c <__clzdi2+0x14>
 8000636:	0008      	movs	r0, r1
 8000638:	f000 f802 	bl	8000640 <__clzsi2>
 800063c:	bd10      	pop	{r4, pc}
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <__clzsi2>:
 8000640:	211c      	movs	r1, #28
 8000642:	2301      	movs	r3, #1
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	4298      	cmp	r0, r3
 8000648:	d301      	bcc.n	800064e <__clzsi2+0xe>
 800064a:	0c00      	lsrs	r0, r0, #16
 800064c:	3910      	subs	r1, #16
 800064e:	0a1b      	lsrs	r3, r3, #8
 8000650:	4298      	cmp	r0, r3
 8000652:	d301      	bcc.n	8000658 <__clzsi2+0x18>
 8000654:	0a00      	lsrs	r0, r0, #8
 8000656:	3908      	subs	r1, #8
 8000658:	091b      	lsrs	r3, r3, #4
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0x22>
 800065e:	0900      	lsrs	r0, r0, #4
 8000660:	3904      	subs	r1, #4
 8000662:	a202      	add	r2, pc, #8	; (adr r2, 800066c <__clzsi2+0x2c>)
 8000664:	5c10      	ldrb	r0, [r2, r0]
 8000666:	1840      	adds	r0, r0, r1
 8000668:	4770      	bx	lr
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	02020304 	.word	0x02020304
 8000670:	01010101 	.word	0x01010101
	...

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000680:	f000 faea 	bl	8000c58 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* Initialize our bot buddy */
   BT_BUDDY_Init();
 8000684:	f000 f9e2 	bl	8000a4c <BT_BUDDY_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f808 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 f8c4 	bl	8000818 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000690:	f000 f858 	bl	8000744 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  event_loop();
 8000694:	f000 f904 	bl	80008a0 <event_loop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000698:	e7fe      	b.n	8000698 <main+0x1c>
	...

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b590      	push	{r4, r7, lr}
 800069e:	b093      	sub	sp, #76	; 0x4c
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	2414      	movs	r4, #20
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	0018      	movs	r0, r3
 80006a8:	2334      	movs	r3, #52	; 0x34
 80006aa:	001a      	movs	r2, r3
 80006ac:	2100      	movs	r1, #0
 80006ae:	f001 fe77 	bl	80023a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b2:	003b      	movs	r3, r7
 80006b4:	0018      	movs	r0, r3
 80006b6:	2314      	movs	r3, #20
 80006b8:	001a      	movs	r2, r3
 80006ba:	2100      	movs	r1, #0
 80006bc:	f001 fe70 	bl	80023a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c0:	4b1e      	ldr	r3, [pc, #120]	; (800073c <SystemClock_Config+0xa0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a1e      	ldr	r2, [pc, #120]	; (8000740 <SystemClock_Config+0xa4>)
 80006c6:	401a      	ands	r2, r3
 80006c8:	4b1c      	ldr	r3, [pc, #112]	; (800073c <SystemClock_Config+0xa0>)
 80006ca:	2180      	movs	r1, #128	; 0x80
 80006cc:	0109      	lsls	r1, r1, #4
 80006ce:	430a      	orrs	r2, r1
 80006d0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006d2:	0021      	movs	r1, r4
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2210      	movs	r2, #16
 80006d8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2201      	movs	r2, #1
 80006de:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	22a0      	movs	r2, #160	; 0xa0
 80006ea:	0212      	lsls	r2, r2, #8
 80006ec:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2200      	movs	r2, #0
 80006f2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	0018      	movs	r0, r3
 80006f8:	f000 fd82 	bl	8001200 <HAL_RCC_OscConfig>
 80006fc:	1e03      	subs	r3, r0, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000700:	f000 f9d4 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000704:	003b      	movs	r3, r7
 8000706:	220f      	movs	r2, #15
 8000708:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800070a:	003b      	movs	r3, r7
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	003b      	movs	r3, r7
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000716:	003b      	movs	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071c:	003b      	movs	r3, r7
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000722:	003b      	movs	r3, r7
 8000724:	2100      	movs	r1, #0
 8000726:	0018      	movs	r0, r3
 8000728:	f001 f8e6 	bl	80018f8 <HAL_RCC_ClockConfig>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000730:	f000 f9bc 	bl	8000aac <Error_Handler>
  }
}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	b013      	add	sp, #76	; 0x4c
 800073a:	bd90      	pop	{r4, r7, pc}
 800073c:	40007000 	.word	0x40007000
 8000740:	ffffe7ff 	.word	0xffffe7ff

08000744 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074a:	2310      	movs	r3, #16
 800074c:	18fb      	adds	r3, r7, r3
 800074e:	0018      	movs	r0, r3
 8000750:	2308      	movs	r3, #8
 8000752:	001a      	movs	r2, r3
 8000754:	2100      	movs	r1, #0
 8000756:	f001 fe23 	bl	80023a0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800075a:	003b      	movs	r3, r7
 800075c:	0018      	movs	r0, r3
 800075e:	2310      	movs	r3, #16
 8000760:	001a      	movs	r2, r3
 8000762:	2100      	movs	r1, #0
 8000764:	f001 fe1c 	bl	80023a0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000768:	4b29      	ldr	r3, [pc, #164]	; (8000810 <MX_TIM2_Init+0xcc>)
 800076a:	2280      	movs	r2, #128	; 0x80
 800076c:	05d2      	lsls	r2, r2, #23
 800076e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000770:	4b27      	ldr	r3, [pc, #156]	; (8000810 <MX_TIM2_Init+0xcc>)
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <MX_TIM2_Init+0xcc>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 839;
 800077c:	4b24      	ldr	r3, [pc, #144]	; (8000810 <MX_TIM2_Init+0xcc>)
 800077e:	4a25      	ldr	r2, [pc, #148]	; (8000814 <MX_TIM2_Init+0xd0>)
 8000780:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000782:	4b23      	ldr	r3, [pc, #140]	; (8000810 <MX_TIM2_Init+0xcc>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000788:	4b21      	ldr	r3, [pc, #132]	; (8000810 <MX_TIM2_Init+0xcc>)
 800078a:	2200      	movs	r2, #0
 800078c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800078e:	4b20      	ldr	r3, [pc, #128]	; (8000810 <MX_TIM2_Init+0xcc>)
 8000790:	0018      	movs	r0, r3
 8000792:	f001 fa9f 	bl	8001cd4 <HAL_TIM_PWM_Init>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d001      	beq.n	800079e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800079a:	f000 f987 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079e:	2110      	movs	r1, #16
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2200      	movs	r2, #0
 80007aa:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ac:	187a      	adds	r2, r7, r1
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_TIM2_Init+0xcc>)
 80007b0:	0011      	movs	r1, r2
 80007b2:	0018      	movs	r0, r3
 80007b4:	f001 fd9c 	bl	80022f0 <HAL_TIMEx_MasterConfigSynchronization>
 80007b8:	1e03      	subs	r3, r0, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80007bc:	f000 f976 	bl	8000aac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007c0:	003b      	movs	r3, r7
 80007c2:	2260      	movs	r2, #96	; 0x60
 80007c4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80007c6:	003b      	movs	r3, r7
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007cc:	003b      	movs	r3, r7
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d2:	003b      	movs	r3, r7
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007d8:	0039      	movs	r1, r7
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <MX_TIM2_Init+0xcc>)
 80007dc:	2200      	movs	r2, #0
 80007de:	0018      	movs	r0, r3
 80007e0:	f001 fb44 	bl	8001e6c <HAL_TIM_PWM_ConfigChannel>
 80007e4:	1e03      	subs	r3, r0, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80007e8:	f000 f960 	bl	8000aac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007ec:	0039      	movs	r1, r7
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <MX_TIM2_Init+0xcc>)
 80007f0:	2204      	movs	r2, #4
 80007f2:	0018      	movs	r0, r3
 80007f4:	f001 fb3a 	bl	8001e6c <HAL_TIM_PWM_ConfigChannel>
 80007f8:	1e03      	subs	r3, r0, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80007fc:	f000 f956 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000800:	4b03      	ldr	r3, [pc, #12]	; (8000810 <MX_TIM2_Init+0xcc>)
 8000802:	0018      	movs	r0, r3
 8000804:	f000 f982 	bl	8000b0c <HAL_TIM_MspPostInit>

}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	b006      	add	sp, #24
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000028 	.word	0x20000028
 8000814:	00000347 	.word	0x00000347

08000818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b590      	push	{r4, r7, lr}
 800081a:	b089      	sub	sp, #36	; 0x24
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	240c      	movs	r4, #12
 8000820:	193b      	adds	r3, r7, r4
 8000822:	0018      	movs	r0, r3
 8000824:	2314      	movs	r3, #20
 8000826:	001a      	movs	r2, r3
 8000828:	2100      	movs	r1, #0
 800082a:	f001 fdb9 	bl	80023a0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b1b      	ldr	r3, [pc, #108]	; (800089c <MX_GPIO_Init+0x84>)
 8000830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_GPIO_Init+0x84>)
 8000834:	2101      	movs	r1, #1
 8000836:	430a      	orrs	r2, r1
 8000838:	62da      	str	r2, [r3, #44]	; 0x2c
 800083a:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_GPIO_Init+0x84>)
 800083c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083e:	2201      	movs	r2, #1
 8000840:	4013      	ands	r3, r2
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_GPIO_Init+0x84>)
 8000848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_GPIO_Init+0x84>)
 800084c:	2102      	movs	r1, #2
 800084e:	430a      	orrs	r2, r1
 8000850:	62da      	str	r2, [r3, #44]	; 0x2c
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_GPIO_Init+0x84>)
 8000854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000856:	2202      	movs	r2, #2
 8000858:	4013      	ands	r3, r2
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800085e:	23a0      	movs	r3, #160	; 0xa0
 8000860:	05db      	lsls	r3, r3, #23
 8000862:	2200      	movs	r2, #0
 8000864:	21e8      	movs	r1, #232	; 0xe8
 8000866:	0018      	movs	r0, r3
 8000868:	f000 fcac 	bl	80011c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800086c:	0021      	movs	r1, r4
 800086e:	187b      	adds	r3, r7, r1
 8000870:	22e8      	movs	r2, #232	; 0xe8
 8000872:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2201      	movs	r2, #1
 8000878:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000886:	187a      	adds	r2, r7, r1
 8000888:	23a0      	movs	r3, #160	; 0xa0
 800088a:	05db      	lsls	r3, r3, #23
 800088c:	0011      	movs	r1, r2
 800088e:	0018      	movs	r0, r3
 8000890:	f000 fb2a 	bl	8000ee8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	b009      	add	sp, #36	; 0x24
 800089a:	bd90      	pop	{r4, r7, pc}
 800089c:	40021000 	.word	0x40021000

080008a0 <event_loop>:

/* USER CODE BEGIN 4 */


/* Event loop that handles our botbuddy when it is running */
void event_loop(void) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0

	int counter = 0; // FOR TESTING
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
	int idx = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]

	while (1) {

		/* FOR TESTING */
		// change button states, go from right, left, backward, forward, power
		idx = (counter % 5);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2105      	movs	r1, #5
 80008b2:	0018      	movs	r0, r3
 80008b4:	f7ff fd98 	bl	80003e8 <__aeabi_idivmod>
 80008b8:	000b      	movs	r3, r1
 80008ba:	603b      	str	r3, [r7, #0]

		b_buddy.rot_speed = (50 + (idx * 10)) % 100;
 80008bc:	683a      	ldr	r2, [r7, #0]
 80008be:	0013      	movs	r3, r2
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	189b      	adds	r3, r3, r2
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	3332      	adds	r3, #50	; 0x32
 80008c8:	2164      	movs	r1, #100	; 0x64
 80008ca:	0018      	movs	r0, r3
 80008cc:	f7ff fd8c 	bl	80003e8 <__aeabi_idivmod>
 80008d0:	000b      	movs	r3, r1
 80008d2:	001a      	movs	r2, r3
 80008d4:	4b5b      	ldr	r3, [pc, #364]	; (8000a44 <event_loop+0x1a4>)
 80008d6:	605a      	str	r2, [r3, #4]
		b_buddy.button_state |= (1 << idx);
 80008d8:	4b5a      	ldr	r3, [pc, #360]	; (8000a44 <event_loop+0x1a4>)
 80008da:	785b      	ldrb	r3, [r3, #1]
 80008dc:	b25a      	sxtb	r2, r3
 80008de:	2101      	movs	r1, #1
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	4099      	lsls	r1, r3
 80008e4:	000b      	movs	r3, r1
 80008e6:	b25b      	sxtb	r3, r3
 80008e8:	4313      	orrs	r3, r2
 80008ea:	b25b      	sxtb	r3, r3
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4b55      	ldr	r3, [pc, #340]	; (8000a44 <event_loop+0x1a4>)
 80008f0:	705a      	strb	r2, [r3, #1]

		switch(b_buddy.button_state) {
 80008f2:	4b54      	ldr	r3, [pc, #336]	; (8000a44 <event_loop+0x1a4>)
 80008f4:	785b      	ldrb	r3, [r3, #1]
 80008f6:	2b10      	cmp	r3, #16
 80008f8:	d900      	bls.n	80008fc <event_loop+0x5c>
 80008fa:	e095      	b.n	8000a28 <event_loop+0x188>
 80008fc:	009a      	lsls	r2, r3, #2
 80008fe:	4b52      	ldr	r3, [pc, #328]	; (8000a48 <event_loop+0x1a8>)
 8000900:	18d3      	adds	r3, r2, r3
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	469f      	mov	pc, r3
			// run both motors forward by switching GPIO PINs ON for S0 for both motors
			case FORWARD:
				// switch 0 on both motors will be ON
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000906:	23a0      	movs	r3, #160	; 0xa0
 8000908:	05db      	lsls	r3, r3, #23
 800090a:	2201      	movs	r2, #1
 800090c:	2108      	movs	r1, #8
 800090e:	0018      	movs	r0, r3
 8000910:	f000 fc58 	bl	80011c4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000914:	23a0      	movs	r3, #160	; 0xa0
 8000916:	05db      	lsls	r3, r3, #23
 8000918:	2201      	movs	r2, #1
 800091a:	2140      	movs	r1, #64	; 0x40
 800091c:	0018      	movs	r0, r3
 800091e:	f000 fc51 	bl	80011c4 <HAL_GPIO_WritePin>

				// switch 1 on both motors will be OFF
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000922:	23a0      	movs	r3, #160	; 0xa0
 8000924:	05db      	lsls	r3, r3, #23
 8000926:	2200      	movs	r2, #0
 8000928:	2120      	movs	r1, #32
 800092a:	0018      	movs	r0, r3
 800092c:	f000 fc4a 	bl	80011c4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000930:	23a0      	movs	r3, #160	; 0xa0
 8000932:	05db      	lsls	r3, r3, #23
 8000934:	2200      	movs	r2, #0
 8000936:	2180      	movs	r1, #128	; 0x80
 8000938:	0018      	movs	r0, r3
 800093a:	f000 fc43 	bl	80011c4 <HAL_GPIO_WritePin>

				break;
 800093e:	e073      	b.n	8000a28 <event_loop+0x188>
			// run both motors if it is backward
			case BACKWARD:
				// switch 0 on both motors will be OFF
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000940:	23a0      	movs	r3, #160	; 0xa0
 8000942:	05db      	lsls	r3, r3, #23
 8000944:	2200      	movs	r2, #0
 8000946:	2108      	movs	r1, #8
 8000948:	0018      	movs	r0, r3
 800094a:	f000 fc3b 	bl	80011c4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800094e:	23a0      	movs	r3, #160	; 0xa0
 8000950:	05db      	lsls	r3, r3, #23
 8000952:	2200      	movs	r2, #0
 8000954:	2140      	movs	r1, #64	; 0x40
 8000956:	0018      	movs	r0, r3
 8000958:	f000 fc34 	bl	80011c4 <HAL_GPIO_WritePin>

				// switch 1 on both motors will be ON
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800095c:	23a0      	movs	r3, #160	; 0xa0
 800095e:	05db      	lsls	r3, r3, #23
 8000960:	2201      	movs	r2, #1
 8000962:	2120      	movs	r1, #32
 8000964:	0018      	movs	r0, r3
 8000966:	f000 fc2d 	bl	80011c4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800096a:	23a0      	movs	r3, #160	; 0xa0
 800096c:	05db      	lsls	r3, r3, #23
 800096e:	2201      	movs	r2, #1
 8000970:	2180      	movs	r1, #128	; 0x80
 8000972:	0018      	movs	r0, r3
 8000974:	f000 fc26 	bl	80011c4 <HAL_GPIO_WritePin>

				break;
 8000978:	e056      	b.n	8000a28 <event_loop+0x188>
			// run the right motor to turn left
			case LEFT:
				// s1 for left motor will be 1 and s0 for right motor will be 1
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800097a:	23a0      	movs	r3, #160	; 0xa0
 800097c:	05db      	lsls	r3, r3, #23
 800097e:	2201      	movs	r2, #1
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	0018      	movs	r0, r3
 8000984:	f000 fc1e 	bl	80011c4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000988:	23a0      	movs	r3, #160	; 0xa0
 800098a:	05db      	lsls	r3, r3, #23
 800098c:	2201      	movs	r2, #1
 800098e:	2108      	movs	r1, #8
 8000990:	0018      	movs	r0, r3
 8000992:	f000 fc17 	bl	80011c4 <HAL_GPIO_WritePin>

				// otherwise 0
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000996:	23a0      	movs	r3, #160	; 0xa0
 8000998:	05db      	lsls	r3, r3, #23
 800099a:	2200      	movs	r2, #0
 800099c:	2140      	movs	r1, #64	; 0x40
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 fc10 	bl	80011c4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80009a4:	23a0      	movs	r3, #160	; 0xa0
 80009a6:	05db      	lsls	r3, r3, #23
 80009a8:	2200      	movs	r2, #0
 80009aa:	2120      	movs	r1, #32
 80009ac:	0018      	movs	r0, r3
 80009ae:	f000 fc09 	bl	80011c4 <HAL_GPIO_WritePin>

				break;
 80009b2:	e039      	b.n	8000a28 <event_loop+0x188>
			// run the left motor to turn right
			case RIGHT:

				// s0 for left motor will be 1 and s1 of right motor should be 1
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80009b4:	23a0      	movs	r3, #160	; 0xa0
 80009b6:	05db      	lsls	r3, r3, #23
 80009b8:	2201      	movs	r2, #1
 80009ba:	2140      	movs	r1, #64	; 0x40
 80009bc:	0018      	movs	r0, r3
 80009be:	f000 fc01 	bl	80011c4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80009c2:	23a0      	movs	r3, #160	; 0xa0
 80009c4:	05db      	lsls	r3, r3, #23
 80009c6:	2201      	movs	r2, #1
 80009c8:	2120      	movs	r1, #32
 80009ca:	0018      	movs	r0, r3
 80009cc:	f000 fbfa 	bl	80011c4 <HAL_GPIO_WritePin>

				// otherwise 0
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80009d0:	23a0      	movs	r3, #160	; 0xa0
 80009d2:	05db      	lsls	r3, r3, #23
 80009d4:	2200      	movs	r2, #0
 80009d6:	2108      	movs	r1, #8
 80009d8:	0018      	movs	r0, r3
 80009da:	f000 fbf3 	bl	80011c4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80009de:	23a0      	movs	r3, #160	; 0xa0
 80009e0:	05db      	lsls	r3, r3, #23
 80009e2:	2200      	movs	r2, #0
 80009e4:	2180      	movs	r1, #128	; 0x80
 80009e6:	0018      	movs	r0, r3
 80009e8:	f000 fbec 	bl	80011c4 <HAL_GPIO_WritePin>

				break;
 80009ec:	e01c      	b.n	8000a28 <event_loop+0x188>
			case POWER:
				// turn off all PINS
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80009ee:	23a0      	movs	r3, #160	; 0xa0
 80009f0:	05db      	lsls	r3, r3, #23
 80009f2:	2200      	movs	r2, #0
 80009f4:	2108      	movs	r1, #8
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 fbe4 	bl	80011c4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80009fc:	23a0      	movs	r3, #160	; 0xa0
 80009fe:	05db      	lsls	r3, r3, #23
 8000a00:	2200      	movs	r2, #0
 8000a02:	2140      	movs	r1, #64	; 0x40
 8000a04:	0018      	movs	r0, r3
 8000a06:	f000 fbdd 	bl	80011c4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a0a:	23a0      	movs	r3, #160	; 0xa0
 8000a0c:	05db      	lsls	r3, r3, #23
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2120      	movs	r1, #32
 8000a12:	0018      	movs	r0, r3
 8000a14:	f000 fbd6 	bl	80011c4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a18:	23a0      	movs	r3, #160	; 0xa0
 8000a1a:	05db      	lsls	r3, r3, #23
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2180      	movs	r1, #128	; 0x80
 8000a20:	0018      	movs	r0, r3
 8000a22:	f000 fbcf 	bl	80011c4 <HAL_GPIO_WritePin>

				break;
 8000a26:	46c0      	nop			; (mov r8, r8)
		}
		/* For testing */
		// shift the next bit
		counter++;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	607b      	str	r3, [r7, #4]
		// reset button state
		b_buddy.button_state = 0x00;
 8000a2e:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <event_loop+0x1a4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	705a      	strb	r2, [r3, #1]

		RUN_MOTOR();
 8000a34:	f000 f81a 	bl	8000a6c <RUN_MOTOR>
		HAL_Delay(2000);
 8000a38:	23fa      	movs	r3, #250	; 0xfa
 8000a3a:	00db      	lsls	r3, r3, #3
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f000 f97b 	bl	8000d38 <HAL_Delay>
		idx = (counter % 5);
 8000a42:	e734      	b.n	80008ae <event_loop+0xe>
 8000a44:	20000068 	.word	0x20000068
 8000a48:	08002410 	.word	0x08002410

08000a4c <BT_BUDDY_Init>:
	}
}


/* Initialization funciton for our BotBuddy */
void BT_BUDDY_Init(void) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	b_buddy.power = 0x00;
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <BT_BUDDY_Init+0x1c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	701a      	strb	r2, [r3, #0]
	b_buddy.button_state = 0x00;
 8000a56:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <BT_BUDDY_Init+0x1c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	705a      	strb	r2, [r3, #1]
	b_buddy.rot_speed = 0;
 8000a5c:	4b02      	ldr	r3, [pc, #8]	; (8000a68 <BT_BUDDY_Init+0x1c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	605a      	str	r2, [r3, #4]
}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000068 	.word	0x20000068

08000a6c <RUN_MOTOR>:

void RUN_MOTOR(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	/* RIGHT MOTOR */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <RUN_MOTOR+0x38>)
 8000a72:	2104      	movs	r1, #4
 8000a74:	0018      	movs	r0, r3
 8000a76:	f001 f96d 	bl	8001d54 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (PWM_PERIOD / 100) * b_buddy.rot_speed);
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <RUN_MOTOR+0x3c>)
 8000a7c:	685a      	ldr	r2, [r3, #4]
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <RUN_MOTOR+0x38>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	00d2      	lsls	r2, r2, #3
 8000a84:	639a      	str	r2, [r3, #56]	; 0x38

	/* LEFT MOTOR */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a86:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <RUN_MOTOR+0x38>)
 8000a88:	2100      	movs	r1, #0
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f001 f962 	bl	8001d54 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, (PWM_PERIOD / 100) * b_buddy.rot_speed);
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <RUN_MOTOR+0x3c>)
 8000a92:	685a      	ldr	r2, [r3, #4]
 8000a94:	4b03      	ldr	r3, [pc, #12]	; (8000aa4 <RUN_MOTOR+0x38>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	00d2      	lsls	r2, r2, #3
 8000a9a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	20000028 	.word	0x20000028
 8000aa8:	20000068 	.word	0x20000068

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <Error_Handler+0x8>
	...

08000ab8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abc:	4b07      	ldr	r3, [pc, #28]	; (8000adc <HAL_MspInit+0x24>)
 8000abe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_MspInit+0x24>)
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac8:	4b04      	ldr	r3, [pc, #16]	; (8000adc <HAL_MspInit+0x24>)
 8000aca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <HAL_MspInit+0x24>)
 8000ace:	2180      	movs	r1, #128	; 0x80
 8000ad0:	0549      	lsls	r1, r1, #21
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40021000 	.word	0x40021000

08000ae0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	05db      	lsls	r3, r3, #23
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d105      	bne.n	8000b00 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <HAL_TIM_PWM_MspInit+0x28>)
 8000af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000af8:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <HAL_TIM_PWM_MspInit+0x28>)
 8000afa:	2101      	movs	r1, #1
 8000afc:	430a      	orrs	r2, r1
 8000afe:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b002      	add	sp, #8
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40021000 	.word	0x40021000

08000b0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b0c:	b590      	push	{r4, r7, lr}
 8000b0e:	b08b      	sub	sp, #44	; 0x2c
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	2414      	movs	r4, #20
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	0018      	movs	r0, r3
 8000b1a:	2314      	movs	r3, #20
 8000b1c:	001a      	movs	r2, r3
 8000b1e:	2100      	movs	r1, #0
 8000b20:	f001 fc3e 	bl	80023a0 <memset>
  if(htim->Instance==TIM2)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	2380      	movs	r3, #128	; 0x80
 8000b2a:	05db      	lsls	r3, r3, #23
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d144      	bne.n	8000bba <HAL_TIM_MspPostInit+0xae>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <HAL_TIM_MspPostInit+0xb8>)
 8000b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b34:	4b23      	ldr	r3, [pc, #140]	; (8000bc4 <HAL_TIM_MspPostInit+0xb8>)
 8000b36:	2101      	movs	r1, #1
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b3c:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <HAL_TIM_MspPostInit+0xb8>)
 8000b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b40:	2201      	movs	r2, #1
 8000b42:	4013      	ands	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b48:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <HAL_TIM_MspPostInit+0xb8>)
 8000b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <HAL_TIM_MspPostInit+0xb8>)
 8000b4e:	2102      	movs	r1, #2
 8000b50:	430a      	orrs	r2, r1
 8000b52:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <HAL_TIM_MspPostInit+0xb8>)
 8000b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b58:	2202      	movs	r2, #2
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	2280      	movs	r2, #128	; 0x80
 8000b64:	0212      	lsls	r2, r2, #8
 8000b66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	193b      	adds	r3, r7, r4
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8000b7a:	193b      	adds	r3, r7, r4
 8000b7c:	2205      	movs	r2, #5
 8000b7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	193a      	adds	r2, r7, r4
 8000b82:	23a0      	movs	r3, #160	; 0xa0
 8000b84:	05db      	lsls	r3, r3, #23
 8000b86:	0011      	movs	r1, r2
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f000 f9ad 	bl	8000ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b8e:	0021      	movs	r1, r4
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	2208      	movs	r2, #8
 8000b94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	2202      	movs	r2, #2
 8000b9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	2202      	movs	r2, #2
 8000bac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <HAL_TIM_MspPostInit+0xbc>)
 8000bb2:	0019      	movs	r1, r3
 8000bb4:	0010      	movs	r0, r2
 8000bb6:	f000 f997 	bl	8000ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b00b      	add	sp, #44	; 0x2c
 8000bc0:	bd90      	pop	{r4, r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	50000400 	.word	0x50000400

08000bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <NMI_Handler+0x4>

08000bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <HardFault_Handler+0x4>

08000bd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf0:	f000 f886 	bl	8000d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000c04:	480d      	ldr	r0, [pc, #52]	; (8000c3c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000c06:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c08:	f7ff fff7 	bl	8000bfa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c0c:	480c      	ldr	r0, [pc, #48]	; (8000c40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c0e:	490d      	ldr	r1, [pc, #52]	; (8000c44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c10:	4a0d      	ldr	r2, [pc, #52]	; (8000c48 <LoopForever+0xe>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c14:	e002      	b.n	8000c1c <LoopCopyDataInit>

08000c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1a:	3304      	adds	r3, #4

08000c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c20:	d3f9      	bcc.n	8000c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c24:	4c0a      	ldr	r4, [pc, #40]	; (8000c50 <LoopForever+0x16>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c28:	e001      	b.n	8000c2e <LoopFillZerobss>

08000c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c2c:	3204      	adds	r2, #4

08000c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c30:	d3fb      	bcc.n	8000c2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c32:	f001 fbbd 	bl	80023b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c36:	f7ff fd21 	bl	800067c <main>

08000c3a <LoopForever>:

LoopForever:
    b LoopForever
 8000c3a:	e7fe      	b.n	8000c3a <LoopForever>
   ldr   r0, =_estack
 8000c3c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c48:	08002480 	.word	0x08002480
  ldr r2, =_sbss
 8000c4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c50:	20000074 	.word	0x20000074

08000c54 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c54:	e7fe      	b.n	8000c54 <ADC1_COMP_IRQHandler>
	...

08000c58 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	2200      	movs	r2, #0
 8000c62:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <HAL_Init+0x3c>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <HAL_Init+0x3c>)
 8000c6a:	2140      	movs	r1, #64	; 0x40
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c70:	2003      	movs	r0, #3
 8000c72:	f000 f811 	bl	8000c98 <HAL_InitTick>
 8000c76:	1e03      	subs	r3, r0, #0
 8000c78:	d003      	beq.n	8000c82 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	701a      	strb	r2, [r3, #0]
 8000c80:	e001      	b.n	8000c86 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c82:	f7ff ff19 	bl	8000ab8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c86:	1dfb      	adds	r3, r7, #7
 8000c88:	781b      	ldrb	r3, [r3, #0]
}
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b002      	add	sp, #8
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	40022000 	.word	0x40022000

08000c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <HAL_InitTick+0x5c>)
 8000ca2:	681c      	ldr	r4, [r3, #0]
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <HAL_InitTick+0x60>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	0019      	movs	r1, r3
 8000caa:	23fa      	movs	r3, #250	; 0xfa
 8000cac:	0098      	lsls	r0, r3, #2
 8000cae:	f7ff fa2b 	bl	8000108 <__udivsi3>
 8000cb2:	0003      	movs	r3, r0
 8000cb4:	0019      	movs	r1, r3
 8000cb6:	0020      	movs	r0, r4
 8000cb8:	f7ff fa26 	bl	8000108 <__udivsi3>
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f000 f905 	bl	8000ece <HAL_SYSTICK_Config>
 8000cc4:	1e03      	subs	r3, r0, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e00f      	b.n	8000cec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b03      	cmp	r3, #3
 8000cd0:	d80b      	bhi.n	8000cea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	425b      	negs	r3, r3
 8000cd8:	2200      	movs	r2, #0
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f000 f8e2 	bl	8000ea4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_InitTick+0x64>)
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e000      	b.n	8000cec <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	0018      	movs	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b003      	add	sp, #12
 8000cf2:	bd90      	pop	{r4, r7, pc}
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000004 	.word	0x20000004

08000d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <HAL_IncTick+0x1c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	001a      	movs	r2, r3
 8000d0a:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <HAL_IncTick+0x20>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	18d2      	adds	r2, r2, r3
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <HAL_IncTick+0x20>)
 8000d12:	601a      	str	r2, [r3, #0]
}
 8000d14:	46c0      	nop			; (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	20000070 	.word	0x20000070

08000d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;
 8000d28:	4b02      	ldr	r3, [pc, #8]	; (8000d34 <HAL_GetTick+0x10>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	20000070 	.word	0x20000070

08000d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d40:	f7ff fff0 	bl	8000d24 <HAL_GetTick>
 8000d44:	0003      	movs	r3, r0
 8000d46:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	d005      	beq.n	8000d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <HAL_Delay+0x44>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	001a      	movs	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	189b      	adds	r3, r3, r2
 8000d5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	f7ff ffe0 	bl	8000d24 <HAL_GetTick>
 8000d64:	0002      	movs	r2, r0
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d8f7      	bhi.n	8000d60 <HAL_Delay+0x28>
  {
  }
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b004      	add	sp, #16
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	20000008 	.word	0x20000008

08000d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	0002      	movs	r2, r0
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	1dfb      	adds	r3, r7, #7
 8000d8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	1dfb      	adds	r3, r7, #7
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b7f      	cmp	r3, #127	; 0x7f
 8000d94:	d828      	bhi.n	8000de8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d96:	4a2f      	ldr	r2, [pc, #188]	; (8000e54 <__NVIC_SetPriority+0xd4>)
 8000d98:	1dfb      	adds	r3, r7, #7
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	b25b      	sxtb	r3, r3
 8000d9e:	089b      	lsrs	r3, r3, #2
 8000da0:	33c0      	adds	r3, #192	; 0xc0
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	589b      	ldr	r3, [r3, r2]
 8000da6:	1dfa      	adds	r2, r7, #7
 8000da8:	7812      	ldrb	r2, [r2, #0]
 8000daa:	0011      	movs	r1, r2
 8000dac:	2203      	movs	r2, #3
 8000dae:	400a      	ands	r2, r1
 8000db0:	00d2      	lsls	r2, r2, #3
 8000db2:	21ff      	movs	r1, #255	; 0xff
 8000db4:	4091      	lsls	r1, r2
 8000db6:	000a      	movs	r2, r1
 8000db8:	43d2      	mvns	r2, r2
 8000dba:	401a      	ands	r2, r3
 8000dbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	019b      	lsls	r3, r3, #6
 8000dc2:	22ff      	movs	r2, #255	; 0xff
 8000dc4:	401a      	ands	r2, r3
 8000dc6:	1dfb      	adds	r3, r7, #7
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	0018      	movs	r0, r3
 8000dcc:	2303      	movs	r3, #3
 8000dce:	4003      	ands	r3, r0
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dd4:	481f      	ldr	r0, [pc, #124]	; (8000e54 <__NVIC_SetPriority+0xd4>)
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	b25b      	sxtb	r3, r3
 8000ddc:	089b      	lsrs	r3, r3, #2
 8000dde:	430a      	orrs	r2, r1
 8000de0:	33c0      	adds	r3, #192	; 0xc0
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000de6:	e031      	b.n	8000e4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de8:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <__NVIC_SetPriority+0xd8>)
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	0019      	movs	r1, r3
 8000df0:	230f      	movs	r3, #15
 8000df2:	400b      	ands	r3, r1
 8000df4:	3b08      	subs	r3, #8
 8000df6:	089b      	lsrs	r3, r3, #2
 8000df8:	3306      	adds	r3, #6
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	18d3      	adds	r3, r2, r3
 8000dfe:	3304      	adds	r3, #4
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	1dfa      	adds	r2, r7, #7
 8000e04:	7812      	ldrb	r2, [r2, #0]
 8000e06:	0011      	movs	r1, r2
 8000e08:	2203      	movs	r2, #3
 8000e0a:	400a      	ands	r2, r1
 8000e0c:	00d2      	lsls	r2, r2, #3
 8000e0e:	21ff      	movs	r1, #255	; 0xff
 8000e10:	4091      	lsls	r1, r2
 8000e12:	000a      	movs	r2, r1
 8000e14:	43d2      	mvns	r2, r2
 8000e16:	401a      	ands	r2, r3
 8000e18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	019b      	lsls	r3, r3, #6
 8000e1e:	22ff      	movs	r2, #255	; 0xff
 8000e20:	401a      	ands	r2, r3
 8000e22:	1dfb      	adds	r3, r7, #7
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	0018      	movs	r0, r3
 8000e28:	2303      	movs	r3, #3
 8000e2a:	4003      	ands	r3, r0
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e30:	4809      	ldr	r0, [pc, #36]	; (8000e58 <__NVIC_SetPriority+0xd8>)
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	001c      	movs	r4, r3
 8000e38:	230f      	movs	r3, #15
 8000e3a:	4023      	ands	r3, r4
 8000e3c:	3b08      	subs	r3, #8
 8000e3e:	089b      	lsrs	r3, r3, #2
 8000e40:	430a      	orrs	r2, r1
 8000e42:	3306      	adds	r3, #6
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	18c3      	adds	r3, r0, r3
 8000e48:	3304      	adds	r3, #4
 8000e4a:	601a      	str	r2, [r3, #0]
}
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b003      	add	sp, #12
 8000e52:	bd90      	pop	{r4, r7, pc}
 8000e54:	e000e100 	.word	0xe000e100
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	1e5a      	subs	r2, r3, #1
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	045b      	lsls	r3, r3, #17
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d301      	bcc.n	8000e74 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e70:	2301      	movs	r3, #1
 8000e72:	e010      	b.n	8000e96 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <SysTick_Config+0x44>)
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	3a01      	subs	r2, #1
 8000e7a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	425b      	negs	r3, r3
 8000e80:	2103      	movs	r1, #3
 8000e82:	0018      	movs	r0, r3
 8000e84:	f7ff ff7c 	bl	8000d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <SysTick_Config+0x44>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8e:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <SysTick_Config+0x44>)
 8000e90:	2207      	movs	r2, #7
 8000e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	0018      	movs	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b002      	add	sp, #8
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	e000e010 	.word	0xe000e010

08000ea4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
 8000eae:	210f      	movs	r1, #15
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	1c02      	adds	r2, r0, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	b25b      	sxtb	r3, r3
 8000ebe:	0011      	movs	r1, r2
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f7ff ff5d 	bl	8000d80 <__NVIC_SetPriority>
}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b004      	add	sp, #16
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f7ff ffbf 	bl	8000e5c <SysTick_Config>
 8000ede:	0003      	movs	r3, r0
}
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	b002      	add	sp, #8
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000efe:	e149      	b.n	8001194 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2101      	movs	r1, #1
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	4091      	lsls	r1, r2
 8000f0a:	000a      	movs	r2, r1
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d100      	bne.n	8000f18 <HAL_GPIO_Init+0x30>
 8000f16:	e13a      	b.n	800118e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	4013      	ands	r3, r2
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d005      	beq.n	8000f30 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2203      	movs	r2, #3
 8000f2a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d130      	bne.n	8000f92 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	409a      	lsls	r2, r3
 8000f3e:	0013      	movs	r3, r2
 8000f40:	43da      	mvns	r2, r3
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	68da      	ldr	r2, [r3, #12]
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	409a      	lsls	r2, r3
 8000f52:	0013      	movs	r3, r2
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f66:	2201      	movs	r2, #1
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	0013      	movs	r3, r2
 8000f6e:	43da      	mvns	r2, r3
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	4013      	ands	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	091b      	lsrs	r3, r3, #4
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	401a      	ands	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	409a      	lsls	r2, r3
 8000f84:	0013      	movs	r3, r2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2203      	movs	r2, #3
 8000f98:	4013      	ands	r3, r2
 8000f9a:	2b03      	cmp	r3, #3
 8000f9c:	d017      	beq.n	8000fce <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	2203      	movs	r2, #3
 8000faa:	409a      	lsls	r2, r3
 8000fac:	0013      	movs	r3, r2
 8000fae:	43da      	mvns	r2, r3
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	689a      	ldr	r2, [r3, #8]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	409a      	lsls	r2, r3
 8000fc0:	0013      	movs	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d123      	bne.n	8001022 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	08da      	lsrs	r2, r3, #3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3208      	adds	r2, #8
 8000fe2:	0092      	lsls	r2, r2, #2
 8000fe4:	58d3      	ldr	r3, [r2, r3]
 8000fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	2207      	movs	r2, #7
 8000fec:	4013      	ands	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	220f      	movs	r2, #15
 8000ff2:	409a      	lsls	r2, r3
 8000ff4:	0013      	movs	r3, r2
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	691a      	ldr	r2, [r3, #16]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	2107      	movs	r1, #7
 8001006:	400b      	ands	r3, r1
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	409a      	lsls	r2, r3
 800100c:	0013      	movs	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	08da      	lsrs	r2, r3, #3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3208      	adds	r2, #8
 800101c:	0092      	lsls	r2, r2, #2
 800101e:	6939      	ldr	r1, [r7, #16]
 8001020:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	2203      	movs	r2, #3
 800102e:	409a      	lsls	r2, r3
 8001030:	0013      	movs	r3, r2
 8001032:	43da      	mvns	r2, r3
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2203      	movs	r2, #3
 8001040:	401a      	ands	r2, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	409a      	lsls	r2, r3
 8001048:	0013      	movs	r3, r2
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685a      	ldr	r2, [r3, #4]
 800105a:	23c0      	movs	r3, #192	; 0xc0
 800105c:	029b      	lsls	r3, r3, #10
 800105e:	4013      	ands	r3, r2
 8001060:	d100      	bne.n	8001064 <HAL_GPIO_Init+0x17c>
 8001062:	e094      	b.n	800118e <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001064:	4b51      	ldr	r3, [pc, #324]	; (80011ac <HAL_GPIO_Init+0x2c4>)
 8001066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001068:	4b50      	ldr	r3, [pc, #320]	; (80011ac <HAL_GPIO_Init+0x2c4>)
 800106a:	2101      	movs	r1, #1
 800106c:	430a      	orrs	r2, r1
 800106e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001070:	4a4f      	ldr	r2, [pc, #316]	; (80011b0 <HAL_GPIO_Init+0x2c8>)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	089b      	lsrs	r3, r3, #2
 8001076:	3302      	adds	r3, #2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	589b      	ldr	r3, [r3, r2]
 800107c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	2203      	movs	r2, #3
 8001082:	4013      	ands	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	220f      	movs	r2, #15
 8001088:	409a      	lsls	r2, r3
 800108a:	0013      	movs	r3, r2
 800108c:	43da      	mvns	r2, r3
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	23a0      	movs	r3, #160	; 0xa0
 8001098:	05db      	lsls	r3, r3, #23
 800109a:	429a      	cmp	r2, r3
 800109c:	d013      	beq.n	80010c6 <HAL_GPIO_Init+0x1de>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a44      	ldr	r2, [pc, #272]	; (80011b4 <HAL_GPIO_Init+0x2cc>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d00d      	beq.n	80010c2 <HAL_GPIO_Init+0x1da>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a43      	ldr	r2, [pc, #268]	; (80011b8 <HAL_GPIO_Init+0x2d0>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d007      	beq.n	80010be <HAL_GPIO_Init+0x1d6>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a42      	ldr	r2, [pc, #264]	; (80011bc <HAL_GPIO_Init+0x2d4>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d101      	bne.n	80010ba <HAL_GPIO_Init+0x1d2>
 80010b6:	2305      	movs	r3, #5
 80010b8:	e006      	b.n	80010c8 <HAL_GPIO_Init+0x1e0>
 80010ba:	2306      	movs	r3, #6
 80010bc:	e004      	b.n	80010c8 <HAL_GPIO_Init+0x1e0>
 80010be:	2302      	movs	r3, #2
 80010c0:	e002      	b.n	80010c8 <HAL_GPIO_Init+0x1e0>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <HAL_GPIO_Init+0x1e0>
 80010c6:	2300      	movs	r3, #0
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	2103      	movs	r1, #3
 80010cc:	400a      	ands	r2, r1
 80010ce:	0092      	lsls	r2, r2, #2
 80010d0:	4093      	lsls	r3, r2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d8:	4935      	ldr	r1, [pc, #212]	; (80011b0 <HAL_GPIO_Init+0x2c8>)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	089b      	lsrs	r3, r3, #2
 80010de:	3302      	adds	r3, #2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010e6:	4b36      	ldr	r3, [pc, #216]	; (80011c0 <HAL_GPIO_Init+0x2d8>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	43da      	mvns	r2, r3
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	2380      	movs	r3, #128	; 0x80
 80010fc:	035b      	lsls	r3, r3, #13
 80010fe:	4013      	ands	r3, r2
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800110a:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <HAL_GPIO_Init+0x2d8>)
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001110:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <HAL_GPIO_Init+0x2d8>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	43da      	mvns	r2, r3
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	039b      	lsls	r3, r3, #14
 8001128:	4013      	ands	r3, r2
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001134:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <HAL_GPIO_Init+0x2d8>)
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800113a:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <HAL_GPIO_Init+0x2d8>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	43da      	mvns	r2, r3
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	2380      	movs	r3, #128	; 0x80
 8001150:	029b      	lsls	r3, r3, #10
 8001152:	4013      	ands	r3, r2
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4313      	orrs	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <HAL_GPIO_Init+0x2d8>)
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001164:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <HAL_GPIO_Init+0x2d8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	43da      	mvns	r2, r3
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	025b      	lsls	r3, r3, #9
 800117c:	4013      	ands	r3, r2
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001188:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <HAL_GPIO_Init+0x2d8>)
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	3301      	adds	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	40da      	lsrs	r2, r3
 800119c:	1e13      	subs	r3, r2, #0
 800119e:	d000      	beq.n	80011a2 <HAL_GPIO_Init+0x2ba>
 80011a0:	e6ae      	b.n	8000f00 <HAL_GPIO_Init+0x18>
  }
}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	46c0      	nop			; (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b006      	add	sp, #24
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40010000 	.word	0x40010000
 80011b4:	50000400 	.word	0x50000400
 80011b8:	50000800 	.word	0x50000800
 80011bc:	50001c00 	.word	0x50001c00
 80011c0:	40010400 	.word	0x40010400

080011c4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	0008      	movs	r0, r1
 80011ce:	0011      	movs	r1, r2
 80011d0:	1cbb      	adds	r3, r7, #2
 80011d2:	1c02      	adds	r2, r0, #0
 80011d4:	801a      	strh	r2, [r3, #0]
 80011d6:	1c7b      	adds	r3, r7, #1
 80011d8:	1c0a      	adds	r2, r1, #0
 80011da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011dc:	1c7b      	adds	r3, r7, #1
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d004      	beq.n	80011ee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011e4:	1cbb      	adds	r3, r7, #2
 80011e6:	881a      	ldrh	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80011ec:	e003      	b.n	80011f6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80011ee:	1cbb      	adds	r3, r7, #2
 80011f0:	881a      	ldrh	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b002      	add	sp, #8
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001200:	b5b0      	push	{r4, r5, r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d102      	bne.n	8001214 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	f000 fb6c 	bl	80018ec <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001214:	4bc8      	ldr	r3, [pc, #800]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	220c      	movs	r2, #12
 800121a:	4013      	ands	r3, r2
 800121c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800121e:	4bc6      	ldr	r3, [pc, #792]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	2380      	movs	r3, #128	; 0x80
 8001224:	025b      	lsls	r3, r3, #9
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2201      	movs	r2, #1
 8001230:	4013      	ands	r3, r2
 8001232:	d100      	bne.n	8001236 <HAL_RCC_OscConfig+0x36>
 8001234:	e07d      	b.n	8001332 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	2b08      	cmp	r3, #8
 800123a:	d007      	beq.n	800124c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	2b0c      	cmp	r3, #12
 8001240:	d112      	bne.n	8001268 <HAL_RCC_OscConfig+0x68>
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	025b      	lsls	r3, r3, #9
 8001248:	429a      	cmp	r2, r3
 800124a:	d10d      	bne.n	8001268 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124c:	4bba      	ldr	r3, [pc, #744]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	029b      	lsls	r3, r3, #10
 8001254:	4013      	ands	r3, r2
 8001256:	d100      	bne.n	800125a <HAL_RCC_OscConfig+0x5a>
 8001258:	e06a      	b.n	8001330 <HAL_RCC_OscConfig+0x130>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d166      	bne.n	8001330 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	f000 fb42 	bl	80018ec <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	025b      	lsls	r3, r3, #9
 8001270:	429a      	cmp	r2, r3
 8001272:	d107      	bne.n	8001284 <HAL_RCC_OscConfig+0x84>
 8001274:	4bb0      	ldr	r3, [pc, #704]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4baf      	ldr	r3, [pc, #700]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800127a:	2180      	movs	r1, #128	; 0x80
 800127c:	0249      	lsls	r1, r1, #9
 800127e:	430a      	orrs	r2, r1
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	e027      	b.n	80012d4 <HAL_RCC_OscConfig+0xd4>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	23a0      	movs	r3, #160	; 0xa0
 800128a:	02db      	lsls	r3, r3, #11
 800128c:	429a      	cmp	r2, r3
 800128e:	d10e      	bne.n	80012ae <HAL_RCC_OscConfig+0xae>
 8001290:	4ba9      	ldr	r3, [pc, #676]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4ba8      	ldr	r3, [pc, #672]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001296:	2180      	movs	r1, #128	; 0x80
 8001298:	02c9      	lsls	r1, r1, #11
 800129a:	430a      	orrs	r2, r1
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	4ba6      	ldr	r3, [pc, #664]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4ba5      	ldr	r3, [pc, #660]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80012a4:	2180      	movs	r1, #128	; 0x80
 80012a6:	0249      	lsls	r1, r1, #9
 80012a8:	430a      	orrs	r2, r1
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	e012      	b.n	80012d4 <HAL_RCC_OscConfig+0xd4>
 80012ae:	4ba2      	ldr	r3, [pc, #648]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	4ba1      	ldr	r3, [pc, #644]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80012b4:	49a1      	ldr	r1, [pc, #644]	; (800153c <HAL_RCC_OscConfig+0x33c>)
 80012b6:	400a      	ands	r2, r1
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	4b9f      	ldr	r3, [pc, #636]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	025b      	lsls	r3, r3, #9
 80012c2:	4013      	ands	r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4b9b      	ldr	r3, [pc, #620]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b9a      	ldr	r3, [pc, #616]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80012ce:	499c      	ldr	r1, [pc, #624]	; (8001540 <HAL_RCC_OscConfig+0x340>)
 80012d0:	400a      	ands	r2, r1
 80012d2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d014      	beq.n	8001306 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012dc:	f7ff fd22 	bl	8000d24 <HAL_GetTick>
 80012e0:	0003      	movs	r3, r0
 80012e2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e6:	f7ff fd1d 	bl	8000d24 <HAL_GetTick>
 80012ea:	0002      	movs	r2, r0
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b64      	cmp	r3, #100	; 0x64
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e2f9      	b.n	80018ec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012f8:	4b8f      	ldr	r3, [pc, #572]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	2380      	movs	r3, #128	; 0x80
 80012fe:	029b      	lsls	r3, r3, #10
 8001300:	4013      	ands	r3, r2
 8001302:	d0f0      	beq.n	80012e6 <HAL_RCC_OscConfig+0xe6>
 8001304:	e015      	b.n	8001332 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001306:	f7ff fd0d 	bl	8000d24 <HAL_GetTick>
 800130a:	0003      	movs	r3, r0
 800130c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001310:	f7ff fd08 	bl	8000d24 <HAL_GetTick>
 8001314:	0002      	movs	r2, r0
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b64      	cmp	r3, #100	; 0x64
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e2e4      	b.n	80018ec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001322:	4b85      	ldr	r3, [pc, #532]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	2380      	movs	r3, #128	; 0x80
 8001328:	029b      	lsls	r3, r3, #10
 800132a:	4013      	ands	r3, r2
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x110>
 800132e:	e000      	b.n	8001332 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001330:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2202      	movs	r2, #2
 8001338:	4013      	ands	r3, r2
 800133a:	d100      	bne.n	800133e <HAL_RCC_OscConfig+0x13e>
 800133c:	e099      	b.n	8001472 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001346:	2220      	movs	r2, #32
 8001348:	4013      	ands	r3, r2
 800134a:	d009      	beq.n	8001360 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800134c:	4b7a      	ldr	r3, [pc, #488]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b79      	ldr	r3, [pc, #484]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001352:	2120      	movs	r1, #32
 8001354:	430a      	orrs	r2, r1
 8001356:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	2220      	movs	r2, #32
 800135c:	4393      	bics	r3, r2
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	2b04      	cmp	r3, #4
 8001364:	d005      	beq.n	8001372 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	2b0c      	cmp	r3, #12
 800136a:	d13e      	bne.n	80013ea <HAL_RCC_OscConfig+0x1ea>
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d13b      	bne.n	80013ea <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001372:	4b71      	ldr	r3, [pc, #452]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2204      	movs	r2, #4
 8001378:	4013      	ands	r3, r2
 800137a:	d004      	beq.n	8001386 <HAL_RCC_OscConfig+0x186>
 800137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e2b2      	b.n	80018ec <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001386:	4b6c      	ldr	r3, [pc, #432]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	4a6e      	ldr	r2, [pc, #440]	; (8001544 <HAL_RCC_OscConfig+0x344>)
 800138c:	4013      	ands	r3, r2
 800138e:	0019      	movs	r1, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	021a      	lsls	r2, r3, #8
 8001396:	4b68      	ldr	r3, [pc, #416]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001398:	430a      	orrs	r2, r1
 800139a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800139c:	4b66      	ldr	r3, [pc, #408]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2209      	movs	r2, #9
 80013a2:	4393      	bics	r3, r2
 80013a4:	0019      	movs	r1, r3
 80013a6:	4b64      	ldr	r3, [pc, #400]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80013a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013aa:	430a      	orrs	r2, r1
 80013ac:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013ae:	f000 fbeb 	bl	8001b88 <HAL_RCC_GetSysClockFreq>
 80013b2:	0001      	movs	r1, r0
 80013b4:	4b60      	ldr	r3, [pc, #384]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	091b      	lsrs	r3, r3, #4
 80013ba:	220f      	movs	r2, #15
 80013bc:	4013      	ands	r3, r2
 80013be:	4a62      	ldr	r2, [pc, #392]	; (8001548 <HAL_RCC_OscConfig+0x348>)
 80013c0:	5cd3      	ldrb	r3, [r2, r3]
 80013c2:	000a      	movs	r2, r1
 80013c4:	40da      	lsrs	r2, r3
 80013c6:	4b61      	ldr	r3, [pc, #388]	; (800154c <HAL_RCC_OscConfig+0x34c>)
 80013c8:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80013ca:	4b61      	ldr	r3, [pc, #388]	; (8001550 <HAL_RCC_OscConfig+0x350>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2513      	movs	r5, #19
 80013d0:	197c      	adds	r4, r7, r5
 80013d2:	0018      	movs	r0, r3
 80013d4:	f7ff fc60 	bl	8000c98 <HAL_InitTick>
 80013d8:	0003      	movs	r3, r0
 80013da:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80013dc:	197b      	adds	r3, r7, r5
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d046      	beq.n	8001472 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80013e4:	197b      	adds	r3, r7, r5
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	e280      	b.n	80018ec <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d027      	beq.n	8001440 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013f0:	4b51      	ldr	r3, [pc, #324]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2209      	movs	r2, #9
 80013f6:	4393      	bics	r3, r2
 80013f8:	0019      	movs	r1, r3
 80013fa:	4b4f      	ldr	r3, [pc, #316]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80013fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013fe:	430a      	orrs	r2, r1
 8001400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001402:	f7ff fc8f 	bl	8000d24 <HAL_GetTick>
 8001406:	0003      	movs	r3, r0
 8001408:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800140c:	f7ff fc8a 	bl	8000d24 <HAL_GetTick>
 8001410:	0002      	movs	r2, r0
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e266      	b.n	80018ec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800141e:	4b46      	ldr	r3, [pc, #280]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2204      	movs	r2, #4
 8001424:	4013      	ands	r3, r2
 8001426:	d0f1      	beq.n	800140c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001428:	4b43      	ldr	r3, [pc, #268]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	4a45      	ldr	r2, [pc, #276]	; (8001544 <HAL_RCC_OscConfig+0x344>)
 800142e:	4013      	ands	r3, r2
 8001430:	0019      	movs	r1, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	021a      	lsls	r2, r3, #8
 8001438:	4b3f      	ldr	r3, [pc, #252]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800143a:	430a      	orrs	r2, r1
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	e018      	b.n	8001472 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001440:	4b3d      	ldr	r3, [pc, #244]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b3c      	ldr	r3, [pc, #240]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001446:	2101      	movs	r1, #1
 8001448:	438a      	bics	r2, r1
 800144a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144c:	f7ff fc6a 	bl	8000d24 <HAL_GetTick>
 8001450:	0003      	movs	r3, r0
 8001452:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001456:	f7ff fc65 	bl	8000d24 <HAL_GetTick>
 800145a:	0002      	movs	r2, r0
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e241      	b.n	80018ec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001468:	4b33      	ldr	r3, [pc, #204]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2204      	movs	r2, #4
 800146e:	4013      	ands	r3, r2
 8001470:	d1f1      	bne.n	8001456 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2210      	movs	r2, #16
 8001478:	4013      	ands	r3, r2
 800147a:	d100      	bne.n	800147e <HAL_RCC_OscConfig+0x27e>
 800147c:	e0a1      	b.n	80015c2 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d140      	bne.n	8001506 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001484:	4b2c      	ldr	r3, [pc, #176]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4013      	ands	r3, r2
 800148e:	d005      	beq.n	800149c <HAL_RCC_OscConfig+0x29c>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e227      	b.n	80018ec <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800149c:	4b26      	ldr	r3, [pc, #152]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	4a2c      	ldr	r2, [pc, #176]	; (8001554 <HAL_RCC_OscConfig+0x354>)
 80014a2:	4013      	ands	r3, r2
 80014a4:	0019      	movs	r1, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a1a      	ldr	r2, [r3, #32]
 80014aa:	4b23      	ldr	r3, [pc, #140]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80014ac:	430a      	orrs	r2, r1
 80014ae:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014b0:	4b21      	ldr	r3, [pc, #132]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	0a19      	lsrs	r1, r3, #8
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69db      	ldr	r3, [r3, #28]
 80014bc:	061a      	lsls	r2, r3, #24
 80014be:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80014c0:	430a      	orrs	r2, r1
 80014c2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	0b5b      	lsrs	r3, r3, #13
 80014ca:	3301      	adds	r3, #1
 80014cc:	2280      	movs	r2, #128	; 0x80
 80014ce:	0212      	lsls	r2, r2, #8
 80014d0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80014d2:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	091b      	lsrs	r3, r3, #4
 80014d8:	210f      	movs	r1, #15
 80014da:	400b      	ands	r3, r1
 80014dc:	491a      	ldr	r1, [pc, #104]	; (8001548 <HAL_RCC_OscConfig+0x348>)
 80014de:	5ccb      	ldrb	r3, [r1, r3]
 80014e0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014e2:	4b1a      	ldr	r3, [pc, #104]	; (800154c <HAL_RCC_OscConfig+0x34c>)
 80014e4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80014e6:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <HAL_RCC_OscConfig+0x350>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2513      	movs	r5, #19
 80014ec:	197c      	adds	r4, r7, r5
 80014ee:	0018      	movs	r0, r3
 80014f0:	f7ff fbd2 	bl	8000c98 <HAL_InitTick>
 80014f4:	0003      	movs	r3, r0
 80014f6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80014f8:	197b      	adds	r3, r7, r5
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d060      	beq.n	80015c2 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001500:	197b      	adds	r3, r7, r5
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	e1f2      	b.n	80018ec <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d03f      	beq.n	800158e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001514:	2180      	movs	r1, #128	; 0x80
 8001516:	0049      	lsls	r1, r1, #1
 8001518:	430a      	orrs	r2, r1
 800151a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151c:	f7ff fc02 	bl	8000d24 <HAL_GetTick>
 8001520:	0003      	movs	r3, r0
 8001522:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001524:	e018      	b.n	8001558 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001526:	f7ff fbfd 	bl	8000d24 <HAL_GetTick>
 800152a:	0002      	movs	r2, r0
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d911      	bls.n	8001558 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e1d9      	b.n	80018ec <HAL_RCC_OscConfig+0x6ec>
 8001538:	40021000 	.word	0x40021000
 800153c:	fffeffff 	.word	0xfffeffff
 8001540:	fffbffff 	.word	0xfffbffff
 8001544:	ffffe0ff 	.word	0xffffe0ff
 8001548:	08002454 	.word	0x08002454
 800154c:	20000000 	.word	0x20000000
 8001550:	20000004 	.word	0x20000004
 8001554:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001558:	4bc9      	ldr	r3, [pc, #804]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4013      	ands	r3, r2
 8001562:	d0e0      	beq.n	8001526 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001564:	4bc6      	ldr	r3, [pc, #792]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	4ac6      	ldr	r2, [pc, #792]	; (8001884 <HAL_RCC_OscConfig+0x684>)
 800156a:	4013      	ands	r3, r2
 800156c:	0019      	movs	r1, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a1a      	ldr	r2, [r3, #32]
 8001572:	4bc3      	ldr	r3, [pc, #780]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 8001574:	430a      	orrs	r2, r1
 8001576:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001578:	4bc1      	ldr	r3, [pc, #772]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	0a19      	lsrs	r1, r3, #8
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	061a      	lsls	r2, r3, #24
 8001586:	4bbe      	ldr	r3, [pc, #760]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 8001588:	430a      	orrs	r2, r1
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	e019      	b.n	80015c2 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800158e:	4bbc      	ldr	r3, [pc, #752]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4bbb      	ldr	r3, [pc, #748]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 8001594:	49bc      	ldr	r1, [pc, #752]	; (8001888 <HAL_RCC_OscConfig+0x688>)
 8001596:	400a      	ands	r2, r1
 8001598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159a:	f7ff fbc3 	bl	8000d24 <HAL_GetTick>
 800159e:	0003      	movs	r3, r0
 80015a0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015a4:	f7ff fbbe 	bl	8000d24 <HAL_GetTick>
 80015a8:	0002      	movs	r2, r0
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e19a      	b.n	80018ec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015b6:	4bb2      	ldr	r3, [pc, #712]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	2380      	movs	r3, #128	; 0x80
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4013      	ands	r3, r2
 80015c0:	d1f0      	bne.n	80015a4 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2208      	movs	r2, #8
 80015c8:	4013      	ands	r3, r2
 80015ca:	d036      	beq.n	800163a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d019      	beq.n	8001608 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015d4:	4baa      	ldr	r3, [pc, #680]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 80015d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015d8:	4ba9      	ldr	r3, [pc, #676]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 80015da:	2101      	movs	r1, #1
 80015dc:	430a      	orrs	r2, r1
 80015de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e0:	f7ff fba0 	bl	8000d24 <HAL_GetTick>
 80015e4:	0003      	movs	r3, r0
 80015e6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ea:	f7ff fb9b 	bl	8000d24 <HAL_GetTick>
 80015ee:	0002      	movs	r2, r0
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e177      	b.n	80018ec <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015fc:	4ba0      	ldr	r3, [pc, #640]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 80015fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001600:	2202      	movs	r2, #2
 8001602:	4013      	ands	r3, r2
 8001604:	d0f1      	beq.n	80015ea <HAL_RCC_OscConfig+0x3ea>
 8001606:	e018      	b.n	800163a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001608:	4b9d      	ldr	r3, [pc, #628]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 800160a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800160c:	4b9c      	ldr	r3, [pc, #624]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 800160e:	2101      	movs	r1, #1
 8001610:	438a      	bics	r2, r1
 8001612:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001614:	f7ff fb86 	bl	8000d24 <HAL_GetTick>
 8001618:	0003      	movs	r3, r0
 800161a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800161e:	f7ff fb81 	bl	8000d24 <HAL_GetTick>
 8001622:	0002      	movs	r2, r0
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e15d      	b.n	80018ec <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001630:	4b93      	ldr	r3, [pc, #588]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 8001632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001634:	2202      	movs	r2, #2
 8001636:	4013      	ands	r3, r2
 8001638:	d1f1      	bne.n	800161e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2204      	movs	r2, #4
 8001640:	4013      	ands	r3, r2
 8001642:	d100      	bne.n	8001646 <HAL_RCC_OscConfig+0x446>
 8001644:	e0ae      	b.n	80017a4 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001646:	2023      	movs	r0, #35	; 0x23
 8001648:	183b      	adds	r3, r7, r0
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800164e:	4b8c      	ldr	r3, [pc, #560]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 8001650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001652:	2380      	movs	r3, #128	; 0x80
 8001654:	055b      	lsls	r3, r3, #21
 8001656:	4013      	ands	r3, r2
 8001658:	d109      	bne.n	800166e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800165a:	4b89      	ldr	r3, [pc, #548]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 800165c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800165e:	4b88      	ldr	r3, [pc, #544]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 8001660:	2180      	movs	r1, #128	; 0x80
 8001662:	0549      	lsls	r1, r1, #21
 8001664:	430a      	orrs	r2, r1
 8001666:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001668:	183b      	adds	r3, r7, r0
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166e:	4b87      	ldr	r3, [pc, #540]	; (800188c <HAL_RCC_OscConfig+0x68c>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	2380      	movs	r3, #128	; 0x80
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4013      	ands	r3, r2
 8001678:	d11a      	bne.n	80016b0 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800167a:	4b84      	ldr	r3, [pc, #528]	; (800188c <HAL_RCC_OscConfig+0x68c>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4b83      	ldr	r3, [pc, #524]	; (800188c <HAL_RCC_OscConfig+0x68c>)
 8001680:	2180      	movs	r1, #128	; 0x80
 8001682:	0049      	lsls	r1, r1, #1
 8001684:	430a      	orrs	r2, r1
 8001686:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001688:	f7ff fb4c 	bl	8000d24 <HAL_GetTick>
 800168c:	0003      	movs	r3, r0
 800168e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001692:	f7ff fb47 	bl	8000d24 <HAL_GetTick>
 8001696:	0002      	movs	r2, r0
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b64      	cmp	r3, #100	; 0x64
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e123      	b.n	80018ec <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a4:	4b79      	ldr	r3, [pc, #484]	; (800188c <HAL_RCC_OscConfig+0x68c>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4013      	ands	r3, r2
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d107      	bne.n	80016cc <HAL_RCC_OscConfig+0x4cc>
 80016bc:	4b70      	ldr	r3, [pc, #448]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 80016be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016c0:	4b6f      	ldr	r3, [pc, #444]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 80016c2:	2180      	movs	r1, #128	; 0x80
 80016c4:	0049      	lsls	r1, r1, #1
 80016c6:	430a      	orrs	r2, r1
 80016c8:	651a      	str	r2, [r3, #80]	; 0x50
 80016ca:	e031      	b.n	8001730 <HAL_RCC_OscConfig+0x530>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d10c      	bne.n	80016ee <HAL_RCC_OscConfig+0x4ee>
 80016d4:	4b6a      	ldr	r3, [pc, #424]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 80016d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016d8:	4b69      	ldr	r3, [pc, #420]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 80016da:	496b      	ldr	r1, [pc, #428]	; (8001888 <HAL_RCC_OscConfig+0x688>)
 80016dc:	400a      	ands	r2, r1
 80016de:	651a      	str	r2, [r3, #80]	; 0x50
 80016e0:	4b67      	ldr	r3, [pc, #412]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 80016e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016e4:	4b66      	ldr	r3, [pc, #408]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 80016e6:	496a      	ldr	r1, [pc, #424]	; (8001890 <HAL_RCC_OscConfig+0x690>)
 80016e8:	400a      	ands	r2, r1
 80016ea:	651a      	str	r2, [r3, #80]	; 0x50
 80016ec:	e020      	b.n	8001730 <HAL_RCC_OscConfig+0x530>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	23a0      	movs	r3, #160	; 0xa0
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d10e      	bne.n	8001718 <HAL_RCC_OscConfig+0x518>
 80016fa:	4b61      	ldr	r3, [pc, #388]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 80016fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016fe:	4b60      	ldr	r3, [pc, #384]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 8001700:	2180      	movs	r1, #128	; 0x80
 8001702:	00c9      	lsls	r1, r1, #3
 8001704:	430a      	orrs	r2, r1
 8001706:	651a      	str	r2, [r3, #80]	; 0x50
 8001708:	4b5d      	ldr	r3, [pc, #372]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 800170a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800170c:	4b5c      	ldr	r3, [pc, #368]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 800170e:	2180      	movs	r1, #128	; 0x80
 8001710:	0049      	lsls	r1, r1, #1
 8001712:	430a      	orrs	r2, r1
 8001714:	651a      	str	r2, [r3, #80]	; 0x50
 8001716:	e00b      	b.n	8001730 <HAL_RCC_OscConfig+0x530>
 8001718:	4b59      	ldr	r3, [pc, #356]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 800171a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800171c:	4b58      	ldr	r3, [pc, #352]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 800171e:	495a      	ldr	r1, [pc, #360]	; (8001888 <HAL_RCC_OscConfig+0x688>)
 8001720:	400a      	ands	r2, r1
 8001722:	651a      	str	r2, [r3, #80]	; 0x50
 8001724:	4b56      	ldr	r3, [pc, #344]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 8001726:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001728:	4b55      	ldr	r3, [pc, #340]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 800172a:	4959      	ldr	r1, [pc, #356]	; (8001890 <HAL_RCC_OscConfig+0x690>)
 800172c:	400a      	ands	r2, r1
 800172e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d015      	beq.n	8001764 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001738:	f7ff faf4 	bl	8000d24 <HAL_GetTick>
 800173c:	0003      	movs	r3, r0
 800173e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001740:	e009      	b.n	8001756 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001742:	f7ff faef 	bl	8000d24 <HAL_GetTick>
 8001746:	0002      	movs	r2, r0
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	4a51      	ldr	r2, [pc, #324]	; (8001894 <HAL_RCC_OscConfig+0x694>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e0ca      	b.n	80018ec <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001756:	4b4a      	ldr	r3, [pc, #296]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 8001758:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4013      	ands	r3, r2
 8001760:	d0ef      	beq.n	8001742 <HAL_RCC_OscConfig+0x542>
 8001762:	e014      	b.n	800178e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001764:	f7ff fade 	bl	8000d24 <HAL_GetTick>
 8001768:	0003      	movs	r3, r0
 800176a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800176c:	e009      	b.n	8001782 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800176e:	f7ff fad9 	bl	8000d24 <HAL_GetTick>
 8001772:	0002      	movs	r2, r0
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	4a46      	ldr	r2, [pc, #280]	; (8001894 <HAL_RCC_OscConfig+0x694>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e0b4      	b.n	80018ec <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001782:	4b3f      	ldr	r3, [pc, #252]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 8001784:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4013      	ands	r3, r2
 800178c:	d1ef      	bne.n	800176e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800178e:	2323      	movs	r3, #35	; 0x23
 8001790:	18fb      	adds	r3, r7, r3
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d105      	bne.n	80017a4 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001798:	4b39      	ldr	r3, [pc, #228]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 800179a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800179c:	4b38      	ldr	r3, [pc, #224]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 800179e:	493e      	ldr	r1, [pc, #248]	; (8001898 <HAL_RCC_OscConfig+0x698>)
 80017a0:	400a      	ands	r2, r1
 80017a2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d100      	bne.n	80017ae <HAL_RCC_OscConfig+0x5ae>
 80017ac:	e09d      	b.n	80018ea <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	2b0c      	cmp	r3, #12
 80017b2:	d100      	bne.n	80017b6 <HAL_RCC_OscConfig+0x5b6>
 80017b4:	e076      	b.n	80018a4 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d145      	bne.n	800184a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017be:	4b30      	ldr	r3, [pc, #192]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4b2f      	ldr	r3, [pc, #188]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 80017c4:	4935      	ldr	r1, [pc, #212]	; (800189c <HAL_RCC_OscConfig+0x69c>)
 80017c6:	400a      	ands	r2, r1
 80017c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ca:	f7ff faab 	bl	8000d24 <HAL_GetTick>
 80017ce:	0003      	movs	r3, r0
 80017d0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d4:	f7ff faa6 	bl	8000d24 <HAL_GetTick>
 80017d8:	0002      	movs	r2, r0
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e082      	b.n	80018ec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017e6:	4b26      	ldr	r3, [pc, #152]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	049b      	lsls	r3, r3, #18
 80017ee:	4013      	ands	r3, r2
 80017f0:	d1f0      	bne.n	80017d4 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f2:	4b23      	ldr	r3, [pc, #140]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	4a2a      	ldr	r2, [pc, #168]	; (80018a0 <HAL_RCC_OscConfig+0x6a0>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	0019      	movs	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001804:	431a      	orrs	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	431a      	orrs	r2, r3
 800180c:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 800180e:	430a      	orrs	r2, r1
 8001810:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001812:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 8001818:	2180      	movs	r1, #128	; 0x80
 800181a:	0449      	lsls	r1, r1, #17
 800181c:	430a      	orrs	r2, r1
 800181e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff fa80 	bl	8000d24 <HAL_GetTick>
 8001824:	0003      	movs	r3, r0
 8001826:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800182a:	f7ff fa7b 	bl	8000d24 <HAL_GetTick>
 800182e:	0002      	movs	r2, r0
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e057      	b.n	80018ec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800183c:	4b10      	ldr	r3, [pc, #64]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	049b      	lsls	r3, r3, #18
 8001844:	4013      	ands	r3, r2
 8001846:	d0f0      	beq.n	800182a <HAL_RCC_OscConfig+0x62a>
 8001848:	e04f      	b.n	80018ea <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184a:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 8001850:	4912      	ldr	r1, [pc, #72]	; (800189c <HAL_RCC_OscConfig+0x69c>)
 8001852:	400a      	ands	r2, r1
 8001854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001856:	f7ff fa65 	bl	8000d24 <HAL_GetTick>
 800185a:	0003      	movs	r3, r0
 800185c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff fa60 	bl	8000d24 <HAL_GetTick>
 8001864:	0002      	movs	r2, r0
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e03c      	b.n	80018ec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001872:	4b03      	ldr	r3, [pc, #12]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	2380      	movs	r3, #128	; 0x80
 8001878:	049b      	lsls	r3, r3, #18
 800187a:	4013      	ands	r3, r2
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x660>
 800187e:	e034      	b.n	80018ea <HAL_RCC_OscConfig+0x6ea>
 8001880:	40021000 	.word	0x40021000
 8001884:	ffff1fff 	.word	0xffff1fff
 8001888:	fffffeff 	.word	0xfffffeff
 800188c:	40007000 	.word	0x40007000
 8001890:	fffffbff 	.word	0xfffffbff
 8001894:	00001388 	.word	0x00001388
 8001898:	efffffff 	.word	0xefffffff
 800189c:	feffffff 	.word	0xfeffffff
 80018a0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d101      	bne.n	80018b0 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e01d      	b.n	80018ec <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018b0:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <HAL_RCC_OscConfig+0x6f4>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	025b      	lsls	r3, r3, #9
 80018bc:	401a      	ands	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d10f      	bne.n	80018e6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	23f0      	movs	r3, #240	; 0xf0
 80018ca:	039b      	lsls	r3, r3, #14
 80018cc:	401a      	ands	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d107      	bne.n	80018e6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	23c0      	movs	r3, #192	; 0xc0
 80018da:	041b      	lsls	r3, r3, #16
 80018dc:	401a      	ands	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d001      	beq.n	80018ea <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	0018      	movs	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b00a      	add	sp, #40	; 0x28
 80018f2:	bdb0      	pop	{r4, r5, r7, pc}
 80018f4:	40021000 	.word	0x40021000

080018f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f8:	b5b0      	push	{r4, r5, r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e128      	b.n	8001b5e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800190c:	4b96      	ldr	r3, [pc, #600]	; (8001b68 <HAL_RCC_ClockConfig+0x270>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2201      	movs	r2, #1
 8001912:	4013      	ands	r3, r2
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d91e      	bls.n	8001958 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191a:	4b93      	ldr	r3, [pc, #588]	; (8001b68 <HAL_RCC_ClockConfig+0x270>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2201      	movs	r2, #1
 8001920:	4393      	bics	r3, r2
 8001922:	0019      	movs	r1, r3
 8001924:	4b90      	ldr	r3, [pc, #576]	; (8001b68 <HAL_RCC_ClockConfig+0x270>)
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800192c:	f7ff f9fa 	bl	8000d24 <HAL_GetTick>
 8001930:	0003      	movs	r3, r0
 8001932:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001934:	e009      	b.n	800194a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001936:	f7ff f9f5 	bl	8000d24 <HAL_GetTick>
 800193a:	0002      	movs	r2, r0
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	4a8a      	ldr	r2, [pc, #552]	; (8001b6c <HAL_RCC_ClockConfig+0x274>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d901      	bls.n	800194a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e109      	b.n	8001b5e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800194a:	4b87      	ldr	r3, [pc, #540]	; (8001b68 <HAL_RCC_ClockConfig+0x270>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2201      	movs	r2, #1
 8001950:	4013      	ands	r3, r2
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d1ee      	bne.n	8001936 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2202      	movs	r2, #2
 800195e:	4013      	ands	r3, r2
 8001960:	d009      	beq.n	8001976 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001962:	4b83      	ldr	r3, [pc, #524]	; (8001b70 <HAL_RCC_ClockConfig+0x278>)
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	22f0      	movs	r2, #240	; 0xf0
 8001968:	4393      	bics	r3, r2
 800196a:	0019      	movs	r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	4b7f      	ldr	r3, [pc, #508]	; (8001b70 <HAL_RCC_ClockConfig+0x278>)
 8001972:	430a      	orrs	r2, r1
 8001974:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2201      	movs	r2, #1
 800197c:	4013      	ands	r3, r2
 800197e:	d100      	bne.n	8001982 <HAL_RCC_ClockConfig+0x8a>
 8001980:	e089      	b.n	8001a96 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d107      	bne.n	800199a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800198a:	4b79      	ldr	r3, [pc, #484]	; (8001b70 <HAL_RCC_ClockConfig+0x278>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	029b      	lsls	r3, r3, #10
 8001992:	4013      	ands	r3, r2
 8001994:	d120      	bne.n	80019d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e0e1      	b.n	8001b5e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d107      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019a2:	4b73      	ldr	r3, [pc, #460]	; (8001b70 <HAL_RCC_ClockConfig+0x278>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	049b      	lsls	r3, r3, #18
 80019aa:	4013      	ands	r3, r2
 80019ac:	d114      	bne.n	80019d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e0d5      	b.n	8001b5e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d106      	bne.n	80019c8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019ba:	4b6d      	ldr	r3, [pc, #436]	; (8001b70 <HAL_RCC_ClockConfig+0x278>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2204      	movs	r2, #4
 80019c0:	4013      	ands	r3, r2
 80019c2:	d109      	bne.n	80019d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e0ca      	b.n	8001b5e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019c8:	4b69      	ldr	r3, [pc, #420]	; (8001b70 <HAL_RCC_ClockConfig+0x278>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4013      	ands	r3, r2
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e0c2      	b.n	8001b5e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019d8:	4b65      	ldr	r3, [pc, #404]	; (8001b70 <HAL_RCC_ClockConfig+0x278>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	2203      	movs	r2, #3
 80019de:	4393      	bics	r3, r2
 80019e0:	0019      	movs	r1, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	4b62      	ldr	r3, [pc, #392]	; (8001b70 <HAL_RCC_ClockConfig+0x278>)
 80019e8:	430a      	orrs	r2, r1
 80019ea:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019ec:	f7ff f99a 	bl	8000d24 <HAL_GetTick>
 80019f0:	0003      	movs	r3, r0
 80019f2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d111      	bne.n	8001a20 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019fc:	e009      	b.n	8001a12 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019fe:	f7ff f991 	bl	8000d24 <HAL_GetTick>
 8001a02:	0002      	movs	r2, r0
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	4a58      	ldr	r2, [pc, #352]	; (8001b6c <HAL_RCC_ClockConfig+0x274>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e0a5      	b.n	8001b5e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a12:	4b57      	ldr	r3, [pc, #348]	; (8001b70 <HAL_RCC_ClockConfig+0x278>)
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	220c      	movs	r2, #12
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2b08      	cmp	r3, #8
 8001a1c:	d1ef      	bne.n	80019fe <HAL_RCC_ClockConfig+0x106>
 8001a1e:	e03a      	b.n	8001a96 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d111      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a28:	e009      	b.n	8001a3e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a2a:	f7ff f97b 	bl	8000d24 <HAL_GetTick>
 8001a2e:	0002      	movs	r2, r0
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	4a4d      	ldr	r2, [pc, #308]	; (8001b6c <HAL_RCC_ClockConfig+0x274>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e08f      	b.n	8001b5e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a3e:	4b4c      	ldr	r3, [pc, #304]	; (8001b70 <HAL_RCC_ClockConfig+0x278>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	220c      	movs	r2, #12
 8001a44:	4013      	ands	r3, r2
 8001a46:	2b0c      	cmp	r3, #12
 8001a48:	d1ef      	bne.n	8001a2a <HAL_RCC_ClockConfig+0x132>
 8001a4a:	e024      	b.n	8001a96 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d11b      	bne.n	8001a8c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a54:	e009      	b.n	8001a6a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a56:	f7ff f965 	bl	8000d24 <HAL_GetTick>
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	4a42      	ldr	r2, [pc, #264]	; (8001b6c <HAL_RCC_ClockConfig+0x274>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e079      	b.n	8001b5e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a6a:	4b41      	ldr	r3, [pc, #260]	; (8001b70 <HAL_RCC_ClockConfig+0x278>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	220c      	movs	r2, #12
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d1ef      	bne.n	8001a56 <HAL_RCC_ClockConfig+0x15e>
 8001a76:	e00e      	b.n	8001a96 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a78:	f7ff f954 	bl	8000d24 <HAL_GetTick>
 8001a7c:	0002      	movs	r2, r0
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	4a3a      	ldr	r2, [pc, #232]	; (8001b6c <HAL_RCC_ClockConfig+0x274>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e068      	b.n	8001b5e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a8c:	4b38      	ldr	r3, [pc, #224]	; (8001b70 <HAL_RCC_ClockConfig+0x278>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	220c      	movs	r2, #12
 8001a92:	4013      	ands	r3, r2
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a96:	4b34      	ldr	r3, [pc, #208]	; (8001b68 <HAL_RCC_ClockConfig+0x270>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d21e      	bcs.n	8001ae2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa4:	4b30      	ldr	r3, [pc, #192]	; (8001b68 <HAL_RCC_ClockConfig+0x270>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	4393      	bics	r3, r2
 8001aac:	0019      	movs	r1, r3
 8001aae:	4b2e      	ldr	r3, [pc, #184]	; (8001b68 <HAL_RCC_ClockConfig+0x270>)
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ab6:	f7ff f935 	bl	8000d24 <HAL_GetTick>
 8001aba:	0003      	movs	r3, r0
 8001abc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001abe:	e009      	b.n	8001ad4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac0:	f7ff f930 	bl	8000d24 <HAL_GetTick>
 8001ac4:	0002      	movs	r2, r0
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	4a28      	ldr	r2, [pc, #160]	; (8001b6c <HAL_RCC_ClockConfig+0x274>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e044      	b.n	8001b5e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad4:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <HAL_RCC_ClockConfig+0x270>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	4013      	ands	r3, r2
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d1ee      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d009      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aec:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <HAL_RCC_ClockConfig+0x278>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	4a20      	ldr	r2, [pc, #128]	; (8001b74 <HAL_RCC_ClockConfig+0x27c>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	0019      	movs	r1, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <HAL_RCC_ClockConfig+0x278>)
 8001afc:	430a      	orrs	r2, r1
 8001afe:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2208      	movs	r2, #8
 8001b06:	4013      	ands	r3, r2
 8001b08:	d00a      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b0a:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <HAL_RCC_ClockConfig+0x278>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	4a1a      	ldr	r2, [pc, #104]	; (8001b78 <HAL_RCC_ClockConfig+0x280>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	0019      	movs	r1, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	00da      	lsls	r2, r3, #3
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <HAL_RCC_ClockConfig+0x278>)
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b20:	f000 f832 	bl	8001b88 <HAL_RCC_GetSysClockFreq>
 8001b24:	0001      	movs	r1, r0
 8001b26:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_RCC_ClockConfig+0x278>)
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	091b      	lsrs	r3, r3, #4
 8001b2c:	220f      	movs	r2, #15
 8001b2e:	4013      	ands	r3, r2
 8001b30:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <HAL_RCC_ClockConfig+0x284>)
 8001b32:	5cd3      	ldrb	r3, [r2, r3]
 8001b34:	000a      	movs	r2, r1
 8001b36:	40da      	lsrs	r2, r3
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <HAL_RCC_ClockConfig+0x288>)
 8001b3a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <HAL_RCC_ClockConfig+0x28c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	250b      	movs	r5, #11
 8001b42:	197c      	adds	r4, r7, r5
 8001b44:	0018      	movs	r0, r3
 8001b46:	f7ff f8a7 	bl	8000c98 <HAL_InitTick>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001b4e:	197b      	adds	r3, r7, r5
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d002      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001b56:	197b      	adds	r3, r7, r5
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	e000      	b.n	8001b5e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	0018      	movs	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b004      	add	sp, #16
 8001b64:	bdb0      	pop	{r4, r5, r7, pc}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	40022000 	.word	0x40022000
 8001b6c:	00001388 	.word	0x00001388
 8001b70:	40021000 	.word	0x40021000
 8001b74:	fffff8ff 	.word	0xfffff8ff
 8001b78:	ffffc7ff 	.word	0xffffc7ff
 8001b7c:	08002454 	.word	0x08002454
 8001b80:	20000000 	.word	0x20000000
 8001b84:	20000004 	.word	0x20000004

08001b88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b88:	b5b0      	push	{r4, r5, r7, lr}
 8001b8a:	b08e      	sub	sp, #56	; 0x38
 8001b8c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001b8e:	4b4c      	ldr	r3, [pc, #304]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b96:	230c      	movs	r3, #12
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b0c      	cmp	r3, #12
 8001b9c:	d014      	beq.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x40>
 8001b9e:	d900      	bls.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x1a>
 8001ba0:	e07b      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0x112>
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d002      	beq.n	8001bac <HAL_RCC_GetSysClockFreq+0x24>
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d00b      	beq.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001baa:	e076      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001bac:	4b44      	ldr	r3, [pc, #272]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2210      	movs	r2, #16
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d002      	beq.n	8001bbc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001bb6:	4b43      	ldr	r3, [pc, #268]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001bb8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001bba:	e07c      	b.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001bbc:	4b42      	ldr	r3, [pc, #264]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x140>)
 8001bbe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bc0:	e079      	b.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bc2:	4b42      	ldr	r3, [pc, #264]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x144>)
 8001bc4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bc6:	e076      	b.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bca:	0c9a      	lsrs	r2, r3, #18
 8001bcc:	230f      	movs	r3, #15
 8001bce:	401a      	ands	r2, r3
 8001bd0:	4b3f      	ldr	r3, [pc, #252]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x148>)
 8001bd2:	5c9b      	ldrb	r3, [r3, r2]
 8001bd4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd8:	0d9a      	lsrs	r2, r3, #22
 8001bda:	2303      	movs	r3, #3
 8001bdc:	4013      	ands	r3, r2
 8001bde:	3301      	adds	r3, #1
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001be2:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	2380      	movs	r3, #128	; 0x80
 8001be8:	025b      	lsls	r3, r3, #9
 8001bea:	4013      	ands	r3, r2
 8001bec:	d01a      	beq.n	8001c24 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	4a35      	ldr	r2, [pc, #212]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x144>)
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	69b8      	ldr	r0, [r7, #24]
 8001bfc:	69f9      	ldr	r1, [r7, #28]
 8001bfe:	f7fe fc19 	bl	8000434 <__aeabi_lmul>
 8001c02:	0002      	movs	r2, r0
 8001c04:	000b      	movs	r3, r1
 8001c06:	0010      	movs	r0, r2
 8001c08:	0019      	movs	r1, r3
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f7fe fbed 	bl	80003f4 <__aeabi_uldivmod>
 8001c1a:	0002      	movs	r2, r0
 8001c1c:	000b      	movs	r3, r1
 8001c1e:	0013      	movs	r3, r2
 8001c20:	637b      	str	r3, [r7, #52]	; 0x34
 8001c22:	e037      	b.n	8001c94 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c24:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2210      	movs	r2, #16
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d01a      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	4a23      	ldr	r2, [pc, #140]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c38:	2300      	movs	r3, #0
 8001c3a:	68b8      	ldr	r0, [r7, #8]
 8001c3c:	68f9      	ldr	r1, [r7, #12]
 8001c3e:	f7fe fbf9 	bl	8000434 <__aeabi_lmul>
 8001c42:	0002      	movs	r2, r0
 8001c44:	000b      	movs	r3, r1
 8001c46:	0010      	movs	r0, r2
 8001c48:	0019      	movs	r1, r3
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	603b      	str	r3, [r7, #0]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f7fe fbcd 	bl	80003f4 <__aeabi_uldivmod>
 8001c5a:	0002      	movs	r2, r0
 8001c5c:	000b      	movs	r3, r1
 8001c5e:	0013      	movs	r3, r2
 8001c60:	637b      	str	r3, [r7, #52]	; 0x34
 8001c62:	e017      	b.n	8001c94 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c66:	0018      	movs	r0, r3
 8001c68:	2300      	movs	r3, #0
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	4a16      	ldr	r2, [pc, #88]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x140>)
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f7fe fbe0 	bl	8000434 <__aeabi_lmul>
 8001c74:	0002      	movs	r2, r0
 8001c76:	000b      	movs	r3, r1
 8001c78:	0010      	movs	r0, r2
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	001c      	movs	r4, r3
 8001c80:	2300      	movs	r3, #0
 8001c82:	001d      	movs	r5, r3
 8001c84:	0022      	movs	r2, r4
 8001c86:	002b      	movs	r3, r5
 8001c88:	f7fe fbb4 	bl	80003f4 <__aeabi_uldivmod>
 8001c8c:	0002      	movs	r2, r0
 8001c8e:	000b      	movs	r3, r1
 8001c90:	0013      	movs	r3, r2
 8001c92:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c96:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c98:	e00d      	b.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001c9a:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	0b5b      	lsrs	r3, r3, #13
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	2280      	movs	r2, #128	; 0x80
 8001cac:	0212      	lsls	r2, r2, #8
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	0013      	movs	r3, r2
 8001cb2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cb4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001cb8:	0018      	movs	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	b00e      	add	sp, #56	; 0x38
 8001cbe:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	003d0900 	.word	0x003d0900
 8001cc8:	00f42400 	.word	0x00f42400
 8001ccc:	007a1200 	.word	0x007a1200
 8001cd0:	08002464 	.word	0x08002464

08001cd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e032      	b.n	8001d4c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2239      	movs	r2, #57	; 0x39
 8001cea:	5c9b      	ldrb	r3, [r3, r2]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d107      	bne.n	8001d02 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2238      	movs	r2, #56	; 0x38
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f7fe feef 	bl	8000ae0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2239      	movs	r2, #57	; 0x39
 8001d06:	2102      	movs	r1, #2
 8001d08:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3304      	adds	r3, #4
 8001d12:	0019      	movs	r1, r3
 8001d14:	0010      	movs	r0, r2
 8001d16:	f000 f96f 	bl	8001ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	223e      	movs	r2, #62	; 0x3e
 8001d1e:	2101      	movs	r1, #1
 8001d20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	223a      	movs	r2, #58	; 0x3a
 8001d26:	2101      	movs	r1, #1
 8001d28:	5499      	strb	r1, [r3, r2]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	223b      	movs	r2, #59	; 0x3b
 8001d2e:	2101      	movs	r1, #1
 8001d30:	5499      	strb	r1, [r3, r2]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	223c      	movs	r2, #60	; 0x3c
 8001d36:	2101      	movs	r1, #1
 8001d38:	5499      	strb	r1, [r3, r2]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	223d      	movs	r2, #61	; 0x3d
 8001d3e:	2101      	movs	r1, #1
 8001d40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2239      	movs	r2, #57	; 0x39
 8001d46:	2101      	movs	r1, #1
 8001d48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b002      	add	sp, #8
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d108      	bne.n	8001d76 <HAL_TIM_PWM_Start+0x22>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	223a      	movs	r2, #58	; 0x3a
 8001d68:	5c9b      	ldrb	r3, [r3, r2]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	1e5a      	subs	r2, r3, #1
 8001d70:	4193      	sbcs	r3, r2
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	e01f      	b.n	8001db6 <HAL_TIM_PWM_Start+0x62>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d108      	bne.n	8001d8e <HAL_TIM_PWM_Start+0x3a>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	223b      	movs	r2, #59	; 0x3b
 8001d80:	5c9b      	ldrb	r3, [r3, r2]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	3b01      	subs	r3, #1
 8001d86:	1e5a      	subs	r2, r3, #1
 8001d88:	4193      	sbcs	r3, r2
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	e013      	b.n	8001db6 <HAL_TIM_PWM_Start+0x62>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d108      	bne.n	8001da6 <HAL_TIM_PWM_Start+0x52>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	223c      	movs	r2, #60	; 0x3c
 8001d98:	5c9b      	ldrb	r3, [r3, r2]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	1e5a      	subs	r2, r3, #1
 8001da0:	4193      	sbcs	r3, r2
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	e007      	b.n	8001db6 <HAL_TIM_PWM_Start+0x62>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	223d      	movs	r2, #61	; 0x3d
 8001daa:	5c9b      	ldrb	r3, [r3, r2]
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	3b01      	subs	r3, #1
 8001db0:	1e5a      	subs	r2, r3, #1
 8001db2:	4193      	sbcs	r3, r2
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e04d      	b.n	8001e5a <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d104      	bne.n	8001dce <HAL_TIM_PWM_Start+0x7a>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	223a      	movs	r2, #58	; 0x3a
 8001dc8:	2102      	movs	r1, #2
 8001dca:	5499      	strb	r1, [r3, r2]
 8001dcc:	e013      	b.n	8001df6 <HAL_TIM_PWM_Start+0xa2>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d104      	bne.n	8001dde <HAL_TIM_PWM_Start+0x8a>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	223b      	movs	r2, #59	; 0x3b
 8001dd8:	2102      	movs	r1, #2
 8001dda:	5499      	strb	r1, [r3, r2]
 8001ddc:	e00b      	b.n	8001df6 <HAL_TIM_PWM_Start+0xa2>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d104      	bne.n	8001dee <HAL_TIM_PWM_Start+0x9a>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	223c      	movs	r2, #60	; 0x3c
 8001de8:	2102      	movs	r1, #2
 8001dea:	5499      	strb	r1, [r3, r2]
 8001dec:	e003      	b.n	8001df6 <HAL_TIM_PWM_Start+0xa2>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	223d      	movs	r2, #61	; 0x3d
 8001df2:	2102      	movs	r1, #2
 8001df4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6839      	ldr	r1, [r7, #0]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f000 fa52 	bl	80022a8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	05db      	lsls	r3, r3, #23
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d009      	beq.n	8001e24 <HAL_TIM_PWM_Start+0xd0>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a13      	ldr	r2, [pc, #76]	; (8001e64 <HAL_TIM_PWM_Start+0x110>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d004      	beq.n	8001e24 <HAL_TIM_PWM_Start+0xd0>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <HAL_TIM_PWM_Start+0x114>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d111      	bne.n	8001e48 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2207      	movs	r2, #7
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b06      	cmp	r3, #6
 8001e34:	d010      	beq.n	8001e58 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2101      	movs	r1, #1
 8001e42:	430a      	orrs	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e46:	e007      	b.n	8001e58 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2101      	movs	r1, #1
 8001e54:	430a      	orrs	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	b004      	add	sp, #16
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	40010800 	.word	0x40010800
 8001e68:	40011400 	.word	0x40011400

08001e6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e78:	2317      	movs	r3, #23
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2238      	movs	r2, #56	; 0x38
 8001e84:	5c9b      	ldrb	r3, [r3, r2]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_TIM_PWM_ConfigChannel+0x22>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e0ad      	b.n	8001fea <HAL_TIM_PWM_ConfigChannel+0x17e>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2238      	movs	r2, #56	; 0x38
 8001e92:	2101      	movs	r1, #1
 8001e94:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b0c      	cmp	r3, #12
 8001e9a:	d100      	bne.n	8001e9e <HAL_TIM_PWM_ConfigChannel+0x32>
 8001e9c:	e076      	b.n	8001f8c <HAL_TIM_PWM_ConfigChannel+0x120>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b0c      	cmp	r3, #12
 8001ea2:	d900      	bls.n	8001ea6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8001ea4:	e095      	b.n	8001fd2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d04e      	beq.n	8001f4a <HAL_TIM_PWM_ConfigChannel+0xde>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b08      	cmp	r3, #8
 8001eb0:	d900      	bls.n	8001eb4 <HAL_TIM_PWM_ConfigChannel+0x48>
 8001eb2:	e08e      	b.n	8001fd2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_TIM_PWM_ConfigChannel+0x56>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d021      	beq.n	8001f04 <HAL_TIM_PWM_ConfigChannel+0x98>
 8001ec0:	e087      	b.n	8001fd2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	0011      	movs	r1, r2
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f000 f8e8 	bl	80020a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	699a      	ldr	r2, [r3, #24]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2108      	movs	r1, #8
 8001edc:	430a      	orrs	r2, r1
 8001ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699a      	ldr	r2, [r3, #24]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2104      	movs	r1, #4
 8001eec:	438a      	bics	r2, r1
 8001eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6999      	ldr	r1, [r3, #24]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	619a      	str	r2, [r3, #24]
      break;
 8001f02:	e06b      	b.n	8001fdc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	0011      	movs	r1, r2
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f000 f903 	bl	8002118 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	699a      	ldr	r2, [r3, #24]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2180      	movs	r1, #128	; 0x80
 8001f1e:	0109      	lsls	r1, r1, #4
 8001f20:	430a      	orrs	r2, r1
 8001f22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	699a      	ldr	r2, [r3, #24]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4931      	ldr	r1, [pc, #196]	; (8001ff4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001f30:	400a      	ands	r2, r1
 8001f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6999      	ldr	r1, [r3, #24]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	021a      	lsls	r2, r3, #8
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	619a      	str	r2, [r3, #24]
      break;
 8001f48:	e048      	b.n	8001fdc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	0011      	movs	r1, r2
 8001f52:	0018      	movs	r0, r3
 8001f54:	f000 f922 	bl	800219c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	69da      	ldr	r2, [r3, #28]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2108      	movs	r1, #8
 8001f64:	430a      	orrs	r2, r1
 8001f66:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	69da      	ldr	r2, [r3, #28]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2104      	movs	r1, #4
 8001f74:	438a      	bics	r2, r1
 8001f76:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	69d9      	ldr	r1, [r3, #28]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	61da      	str	r2, [r3, #28]
      break;
 8001f8a:	e027      	b.n	8001fdc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68ba      	ldr	r2, [r7, #8]
 8001f92:	0011      	movs	r1, r2
 8001f94:	0018      	movs	r0, r3
 8001f96:	f000 f941 	bl	800221c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	69da      	ldr	r2, [r3, #28]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2180      	movs	r1, #128	; 0x80
 8001fa6:	0109      	lsls	r1, r1, #4
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	69da      	ldr	r2, [r3, #28]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	490f      	ldr	r1, [pc, #60]	; (8001ff4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001fb8:	400a      	ands	r2, r1
 8001fba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	69d9      	ldr	r1, [r3, #28]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	021a      	lsls	r2, r3, #8
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	61da      	str	r2, [r3, #28]
      break;
 8001fd0:	e004      	b.n	8001fdc <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8001fd2:	2317      	movs	r3, #23
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
      break;
 8001fda:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2238      	movs	r2, #56	; 0x38
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	5499      	strb	r1, [r3, r2]

  return status;
 8001fe4:	2317      	movs	r3, #23
 8001fe6:	18fb      	adds	r3, r7, r3
 8001fe8:	781b      	ldrb	r3, [r3, #0]
}
 8001fea:	0018      	movs	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b006      	add	sp, #24
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	fffffbff 	.word	0xfffffbff

08001ff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	05db      	lsls	r3, r3, #23
 800200e:	429a      	cmp	r2, r3
 8002010:	d007      	beq.n	8002022 <TIM_Base_SetConfig+0x2a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a1f      	ldr	r2, [pc, #124]	; (8002094 <TIM_Base_SetConfig+0x9c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d003      	beq.n	8002022 <TIM_Base_SetConfig+0x2a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a1e      	ldr	r2, [pc, #120]	; (8002098 <TIM_Base_SetConfig+0xa0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d108      	bne.n	8002034 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2270      	movs	r2, #112	; 0x70
 8002026:	4393      	bics	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4313      	orrs	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	05db      	lsls	r3, r3, #23
 800203a:	429a      	cmp	r2, r3
 800203c:	d007      	beq.n	800204e <TIM_Base_SetConfig+0x56>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a14      	ldr	r2, [pc, #80]	; (8002094 <TIM_Base_SetConfig+0x9c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d003      	beq.n	800204e <TIM_Base_SetConfig+0x56>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a13      	ldr	r2, [pc, #76]	; (8002098 <TIM_Base_SetConfig+0xa0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d108      	bne.n	8002060 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4a12      	ldr	r2, [pc, #72]	; (800209c <TIM_Base_SetConfig+0xa4>)
 8002052:	4013      	ands	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4313      	orrs	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2280      	movs	r2, #128	; 0x80
 8002064:	4393      	bics	r3, r2
 8002066:	001a      	movs	r2, r3
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	615a      	str	r2, [r3, #20]
}
 800208c:	46c0      	nop			; (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	b004      	add	sp, #16
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40010800 	.word	0x40010800
 8002098:	40011400 	.word	0x40011400
 800209c:	fffffcff 	.word	0xfffffcff

080020a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	2201      	movs	r2, #1
 80020b0:	4393      	bics	r3, r2
 80020b2:	001a      	movs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2270      	movs	r2, #112	; 0x70
 80020ce:	4393      	bics	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2203      	movs	r2, #3
 80020d6:	4393      	bics	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	2202      	movs	r2, #2
 80020e8:	4393      	bics	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	621a      	str	r2, [r3, #32]
}
 8002110:	46c0      	nop			; (mov r8, r8)
 8002112:	46bd      	mov	sp, r7
 8002114:	b006      	add	sp, #24
 8002116:	bd80      	pop	{r7, pc}

08002118 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	2210      	movs	r2, #16
 8002128:	4393      	bics	r3, r2
 800212a:	001a      	movs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4a13      	ldr	r2, [pc, #76]	; (8002194 <TIM_OC2_SetConfig+0x7c>)
 8002146:	4013      	ands	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4a12      	ldr	r2, [pc, #72]	; (8002198 <TIM_OC2_SetConfig+0x80>)
 800214e:	4013      	ands	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	2220      	movs	r2, #32
 8002162:	4393      	bics	r3, r2
 8002164:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	4313      	orrs	r3, r2
 8002170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	621a      	str	r2, [r3, #32]
}
 800218c:	46c0      	nop			; (mov r8, r8)
 800218e:	46bd      	mov	sp, r7
 8002190:	b006      	add	sp, #24
 8002192:	bd80      	pop	{r7, pc}
 8002194:	ffff8fff 	.word	0xffff8fff
 8002198:	fffffcff 	.word	0xfffffcff

0800219c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4a1a      	ldr	r2, [pc, #104]	; (8002214 <TIM_OC3_SetConfig+0x78>)
 80021ac:	401a      	ands	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2270      	movs	r2, #112	; 0x70
 80021c8:	4393      	bics	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2203      	movs	r2, #3
 80021d0:	4393      	bics	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	4313      	orrs	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	4a0d      	ldr	r2, [pc, #52]	; (8002218 <TIM_OC3_SetConfig+0x7c>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	621a      	str	r2, [r3, #32]
}
 800220c:	46c0      	nop			; (mov r8, r8)
 800220e:	46bd      	mov	sp, r7
 8002210:	b006      	add	sp, #24
 8002212:	bd80      	pop	{r7, pc}
 8002214:	fffffeff 	.word	0xfffffeff
 8002218:	fffffdff 	.word	0xfffffdff

0800221c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	4a1b      	ldr	r2, [pc, #108]	; (8002298 <TIM_OC4_SetConfig+0x7c>)
 800222c:	401a      	ands	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4a15      	ldr	r2, [pc, #84]	; (800229c <TIM_OC4_SetConfig+0x80>)
 8002248:	4013      	ands	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4a14      	ldr	r2, [pc, #80]	; (80022a0 <TIM_OC4_SetConfig+0x84>)
 8002250:	4013      	ands	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4313      	orrs	r3, r2
 800225e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	4a10      	ldr	r2, [pc, #64]	; (80022a4 <TIM_OC4_SetConfig+0x88>)
 8002264:	4013      	ands	r3, r2
 8002266:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	031b      	lsls	r3, r3, #12
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	4313      	orrs	r3, r2
 8002272:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	621a      	str	r2, [r3, #32]
}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	46bd      	mov	sp, r7
 8002292:	b006      	add	sp, #24
 8002294:	bd80      	pop	{r7, pc}
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	ffffefff 	.word	0xffffefff
 800229c:	ffff8fff 	.word	0xffff8fff
 80022a0:	fffffcff 	.word	0xfffffcff
 80022a4:	ffffdfff 	.word	0xffffdfff

080022a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	221f      	movs	r2, #31
 80022b8:	4013      	ands	r3, r2
 80022ba:	2201      	movs	r2, #1
 80022bc:	409a      	lsls	r2, r3
 80022be:	0013      	movs	r3, r2
 80022c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	43d2      	mvns	r2, r2
 80022ca:	401a      	ands	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6a1a      	ldr	r2, [r3, #32]
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	211f      	movs	r1, #31
 80022d8:	400b      	ands	r3, r1
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4099      	lsls	r1, r3
 80022de:	000b      	movs	r3, r1
 80022e0:	431a      	orrs	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	621a      	str	r2, [r3, #32]
}
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	46bd      	mov	sp, r7
 80022ea:	b006      	add	sp, #24
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2238      	movs	r2, #56	; 0x38
 80022fe:	5c9b      	ldrb	r3, [r3, r2]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002304:	2302      	movs	r3, #2
 8002306:	e042      	b.n	800238e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2238      	movs	r2, #56	; 0x38
 800230c:	2101      	movs	r1, #1
 800230e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2239      	movs	r2, #57	; 0x39
 8002314:	2102      	movs	r1, #2
 8002316:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2270      	movs	r2, #112	; 0x70
 800232c:	4393      	bics	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	4313      	orrs	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	2380      	movs	r3, #128	; 0x80
 8002348:	05db      	lsls	r3, r3, #23
 800234a:	429a      	cmp	r2, r3
 800234c:	d009      	beq.n	8002362 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a11      	ldr	r2, [pc, #68]	; (8002398 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d004      	beq.n	8002362 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a0f      	ldr	r2, [pc, #60]	; (800239c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d10c      	bne.n	800237c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2280      	movs	r2, #128	; 0x80
 8002366:	4393      	bics	r3, r2
 8002368:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	4313      	orrs	r3, r2
 8002372:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2239      	movs	r2, #57	; 0x39
 8002380:	2101      	movs	r1, #1
 8002382:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2238      	movs	r2, #56	; 0x38
 8002388:	2100      	movs	r1, #0
 800238a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	0018      	movs	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	b004      	add	sp, #16
 8002394:	bd80      	pop	{r7, pc}
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	40010800 	.word	0x40010800
 800239c:	40011400 	.word	0x40011400

080023a0 <memset>:
 80023a0:	0003      	movs	r3, r0
 80023a2:	1882      	adds	r2, r0, r2
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d100      	bne.n	80023aa <memset+0xa>
 80023a8:	4770      	bx	lr
 80023aa:	7019      	strb	r1, [r3, #0]
 80023ac:	3301      	adds	r3, #1
 80023ae:	e7f9      	b.n	80023a4 <memset+0x4>

080023b0 <__libc_init_array>:
 80023b0:	b570      	push	{r4, r5, r6, lr}
 80023b2:	2600      	movs	r6, #0
 80023b4:	4c0c      	ldr	r4, [pc, #48]	; (80023e8 <__libc_init_array+0x38>)
 80023b6:	4d0d      	ldr	r5, [pc, #52]	; (80023ec <__libc_init_array+0x3c>)
 80023b8:	1b64      	subs	r4, r4, r5
 80023ba:	10a4      	asrs	r4, r4, #2
 80023bc:	42a6      	cmp	r6, r4
 80023be:	d109      	bne.n	80023d4 <__libc_init_array+0x24>
 80023c0:	2600      	movs	r6, #0
 80023c2:	f000 f819 	bl	80023f8 <_init>
 80023c6:	4c0a      	ldr	r4, [pc, #40]	; (80023f0 <__libc_init_array+0x40>)
 80023c8:	4d0a      	ldr	r5, [pc, #40]	; (80023f4 <__libc_init_array+0x44>)
 80023ca:	1b64      	subs	r4, r4, r5
 80023cc:	10a4      	asrs	r4, r4, #2
 80023ce:	42a6      	cmp	r6, r4
 80023d0:	d105      	bne.n	80023de <__libc_init_array+0x2e>
 80023d2:	bd70      	pop	{r4, r5, r6, pc}
 80023d4:	00b3      	lsls	r3, r6, #2
 80023d6:	58eb      	ldr	r3, [r5, r3]
 80023d8:	4798      	blx	r3
 80023da:	3601      	adds	r6, #1
 80023dc:	e7ee      	b.n	80023bc <__libc_init_array+0xc>
 80023de:	00b3      	lsls	r3, r6, #2
 80023e0:	58eb      	ldr	r3, [r5, r3]
 80023e2:	4798      	blx	r3
 80023e4:	3601      	adds	r6, #1
 80023e6:	e7f2      	b.n	80023ce <__libc_init_array+0x1e>
 80023e8:	08002478 	.word	0x08002478
 80023ec:	08002478 	.word	0x08002478
 80023f0:	0800247c 	.word	0x0800247c
 80023f4:	08002478 	.word	0x08002478

080023f8 <_init>:
 80023f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023fe:	bc08      	pop	{r3}
 8002400:	469e      	mov	lr, r3
 8002402:	4770      	bx	lr

08002404 <_fini>:
 8002404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800240a:	bc08      	pop	{r3}
 800240c:	469e      	mov	lr, r3
 800240e:	4770      	bx	lr
