
BotBuddy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032c8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08003388  08003388  00013388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003468  08003468  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003468  08003468  00013468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003470  08003470  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003470  08003470  00013470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003474  08003474  00013474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  08003484  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08003484  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000af16  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018c0  00000000  00000000  0002af8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a60  00000000  00000000  0002c850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000816  00000000  00000000  0002d2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001609  00000000  00000000  0002dac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c2b1  00000000  00000000  0002f0cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00069e94  00000000  00000000  0003b380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002570  00000000  00000000  000a5214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000a7784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003370 	.word	0x08003370

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003370 	.word	0x08003370

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f834 	bl	8000490 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_lmul>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	46ce      	mov	lr, r9
 8000438:	4699      	mov	r9, r3
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	469c      	mov	ip, r3
 800043e:	0413      	lsls	r3, r2, #16
 8000440:	4647      	mov	r7, r8
 8000442:	0c1b      	lsrs	r3, r3, #16
 8000444:	001d      	movs	r5, r3
 8000446:	000e      	movs	r6, r1
 8000448:	4661      	mov	r1, ip
 800044a:	0404      	lsls	r4, r0, #16
 800044c:	0c24      	lsrs	r4, r4, #16
 800044e:	b580      	push	{r7, lr}
 8000450:	0007      	movs	r7, r0
 8000452:	0c10      	lsrs	r0, r2, #16
 8000454:	434b      	muls	r3, r1
 8000456:	4365      	muls	r5, r4
 8000458:	4341      	muls	r1, r0
 800045a:	4360      	muls	r0, r4
 800045c:	0c2c      	lsrs	r4, r5, #16
 800045e:	18c0      	adds	r0, r0, r3
 8000460:	1820      	adds	r0, r4, r0
 8000462:	468c      	mov	ip, r1
 8000464:	4283      	cmp	r3, r0
 8000466:	d903      	bls.n	8000470 <__aeabi_lmul+0x3c>
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	025b      	lsls	r3, r3, #9
 800046c:	4698      	mov	r8, r3
 800046e:	44c4      	add	ip, r8
 8000470:	4649      	mov	r1, r9
 8000472:	4379      	muls	r1, r7
 8000474:	4356      	muls	r6, r2
 8000476:	0c03      	lsrs	r3, r0, #16
 8000478:	042d      	lsls	r5, r5, #16
 800047a:	0c2d      	lsrs	r5, r5, #16
 800047c:	1989      	adds	r1, r1, r6
 800047e:	4463      	add	r3, ip
 8000480:	0400      	lsls	r0, r0, #16
 8000482:	1940      	adds	r0, r0, r5
 8000484:	18c9      	adds	r1, r1, r3
 8000486:	bcc0      	pop	{r6, r7}
 8000488:	46b9      	mov	r9, r7
 800048a:	46b0      	mov	r8, r6
 800048c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__udivmoddi4>:
 8000490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000492:	4657      	mov	r7, sl
 8000494:	464e      	mov	r6, r9
 8000496:	4645      	mov	r5, r8
 8000498:	46de      	mov	lr, fp
 800049a:	b5e0      	push	{r5, r6, r7, lr}
 800049c:	0004      	movs	r4, r0
 800049e:	000d      	movs	r5, r1
 80004a0:	4692      	mov	sl, r2
 80004a2:	4699      	mov	r9, r3
 80004a4:	b083      	sub	sp, #12
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d830      	bhi.n	800050c <__udivmoddi4+0x7c>
 80004aa:	d02d      	beq.n	8000508 <__udivmoddi4+0x78>
 80004ac:	4649      	mov	r1, r9
 80004ae:	4650      	mov	r0, sl
 80004b0:	f000 f8ba 	bl	8000628 <__clzdi2>
 80004b4:	0029      	movs	r1, r5
 80004b6:	0006      	movs	r6, r0
 80004b8:	0020      	movs	r0, r4
 80004ba:	f000 f8b5 	bl	8000628 <__clzdi2>
 80004be:	1a33      	subs	r3, r6, r0
 80004c0:	4698      	mov	r8, r3
 80004c2:	3b20      	subs	r3, #32
 80004c4:	d434      	bmi.n	8000530 <__udivmoddi4+0xa0>
 80004c6:	469b      	mov	fp, r3
 80004c8:	4653      	mov	r3, sl
 80004ca:	465a      	mov	r2, fp
 80004cc:	4093      	lsls	r3, r2
 80004ce:	4642      	mov	r2, r8
 80004d0:	001f      	movs	r7, r3
 80004d2:	4653      	mov	r3, sl
 80004d4:	4093      	lsls	r3, r2
 80004d6:	001e      	movs	r6, r3
 80004d8:	42af      	cmp	r7, r5
 80004da:	d83b      	bhi.n	8000554 <__udivmoddi4+0xc4>
 80004dc:	42af      	cmp	r7, r5
 80004de:	d100      	bne.n	80004e2 <__udivmoddi4+0x52>
 80004e0:	e079      	b.n	80005d6 <__udivmoddi4+0x146>
 80004e2:	465b      	mov	r3, fp
 80004e4:	1ba4      	subs	r4, r4, r6
 80004e6:	41bd      	sbcs	r5, r7
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	da00      	bge.n	80004ee <__udivmoddi4+0x5e>
 80004ec:	e076      	b.n	80005dc <__udivmoddi4+0x14c>
 80004ee:	2200      	movs	r2, #0
 80004f0:	2300      	movs	r3, #0
 80004f2:	9200      	str	r2, [sp, #0]
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2301      	movs	r3, #1
 80004f8:	465a      	mov	r2, fp
 80004fa:	4093      	lsls	r3, r2
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2301      	movs	r3, #1
 8000500:	4642      	mov	r2, r8
 8000502:	4093      	lsls	r3, r2
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	e029      	b.n	800055c <__udivmoddi4+0xcc>
 8000508:	4282      	cmp	r2, r0
 800050a:	d9cf      	bls.n	80004ac <__udivmoddi4+0x1c>
 800050c:	2200      	movs	r2, #0
 800050e:	2300      	movs	r3, #0
 8000510:	9200      	str	r2, [sp, #0]
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <__udivmoddi4+0x8e>
 800051a:	601c      	str	r4, [r3, #0]
 800051c:	605d      	str	r5, [r3, #4]
 800051e:	9800      	ldr	r0, [sp, #0]
 8000520:	9901      	ldr	r1, [sp, #4]
 8000522:	b003      	add	sp, #12
 8000524:	bcf0      	pop	{r4, r5, r6, r7}
 8000526:	46bb      	mov	fp, r7
 8000528:	46b2      	mov	sl, r6
 800052a:	46a9      	mov	r9, r5
 800052c:	46a0      	mov	r8, r4
 800052e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000530:	4642      	mov	r2, r8
 8000532:	469b      	mov	fp, r3
 8000534:	2320      	movs	r3, #32
 8000536:	1a9b      	subs	r3, r3, r2
 8000538:	4652      	mov	r2, sl
 800053a:	40da      	lsrs	r2, r3
 800053c:	4641      	mov	r1, r8
 800053e:	0013      	movs	r3, r2
 8000540:	464a      	mov	r2, r9
 8000542:	408a      	lsls	r2, r1
 8000544:	0017      	movs	r7, r2
 8000546:	4642      	mov	r2, r8
 8000548:	431f      	orrs	r7, r3
 800054a:	4653      	mov	r3, sl
 800054c:	4093      	lsls	r3, r2
 800054e:	001e      	movs	r6, r3
 8000550:	42af      	cmp	r7, r5
 8000552:	d9c3      	bls.n	80004dc <__udivmoddi4+0x4c>
 8000554:	2200      	movs	r2, #0
 8000556:	2300      	movs	r3, #0
 8000558:	9200      	str	r2, [sp, #0]
 800055a:	9301      	str	r3, [sp, #4]
 800055c:	4643      	mov	r3, r8
 800055e:	2b00      	cmp	r3, #0
 8000560:	d0d8      	beq.n	8000514 <__udivmoddi4+0x84>
 8000562:	07fb      	lsls	r3, r7, #31
 8000564:	0872      	lsrs	r2, r6, #1
 8000566:	431a      	orrs	r2, r3
 8000568:	4646      	mov	r6, r8
 800056a:	087b      	lsrs	r3, r7, #1
 800056c:	e00e      	b.n	800058c <__udivmoddi4+0xfc>
 800056e:	42ab      	cmp	r3, r5
 8000570:	d101      	bne.n	8000576 <__udivmoddi4+0xe6>
 8000572:	42a2      	cmp	r2, r4
 8000574:	d80c      	bhi.n	8000590 <__udivmoddi4+0x100>
 8000576:	1aa4      	subs	r4, r4, r2
 8000578:	419d      	sbcs	r5, r3
 800057a:	2001      	movs	r0, #1
 800057c:	1924      	adds	r4, r4, r4
 800057e:	416d      	adcs	r5, r5
 8000580:	2100      	movs	r1, #0
 8000582:	3e01      	subs	r6, #1
 8000584:	1824      	adds	r4, r4, r0
 8000586:	414d      	adcs	r5, r1
 8000588:	2e00      	cmp	r6, #0
 800058a:	d006      	beq.n	800059a <__udivmoddi4+0x10a>
 800058c:	42ab      	cmp	r3, r5
 800058e:	d9ee      	bls.n	800056e <__udivmoddi4+0xde>
 8000590:	3e01      	subs	r6, #1
 8000592:	1924      	adds	r4, r4, r4
 8000594:	416d      	adcs	r5, r5
 8000596:	2e00      	cmp	r6, #0
 8000598:	d1f8      	bne.n	800058c <__udivmoddi4+0xfc>
 800059a:	9800      	ldr	r0, [sp, #0]
 800059c:	9901      	ldr	r1, [sp, #4]
 800059e:	465b      	mov	r3, fp
 80005a0:	1900      	adds	r0, r0, r4
 80005a2:	4169      	adcs	r1, r5
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	db24      	blt.n	80005f2 <__udivmoddi4+0x162>
 80005a8:	002b      	movs	r3, r5
 80005aa:	465a      	mov	r2, fp
 80005ac:	4644      	mov	r4, r8
 80005ae:	40d3      	lsrs	r3, r2
 80005b0:	002a      	movs	r2, r5
 80005b2:	40e2      	lsrs	r2, r4
 80005b4:	001c      	movs	r4, r3
 80005b6:	465b      	mov	r3, fp
 80005b8:	0015      	movs	r5, r2
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db2a      	blt.n	8000614 <__udivmoddi4+0x184>
 80005be:	0026      	movs	r6, r4
 80005c0:	409e      	lsls	r6, r3
 80005c2:	0033      	movs	r3, r6
 80005c4:	0026      	movs	r6, r4
 80005c6:	4647      	mov	r7, r8
 80005c8:	40be      	lsls	r6, r7
 80005ca:	0032      	movs	r2, r6
 80005cc:	1a80      	subs	r0, r0, r2
 80005ce:	4199      	sbcs	r1, r3
 80005d0:	9000      	str	r0, [sp, #0]
 80005d2:	9101      	str	r1, [sp, #4]
 80005d4:	e79e      	b.n	8000514 <__udivmoddi4+0x84>
 80005d6:	42a3      	cmp	r3, r4
 80005d8:	d8bc      	bhi.n	8000554 <__udivmoddi4+0xc4>
 80005da:	e782      	b.n	80004e2 <__udivmoddi4+0x52>
 80005dc:	4642      	mov	r2, r8
 80005de:	2320      	movs	r3, #32
 80005e0:	2100      	movs	r1, #0
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	2200      	movs	r2, #0
 80005e6:	9100      	str	r1, [sp, #0]
 80005e8:	9201      	str	r2, [sp, #4]
 80005ea:	2201      	movs	r2, #1
 80005ec:	40da      	lsrs	r2, r3
 80005ee:	9201      	str	r2, [sp, #4]
 80005f0:	e785      	b.n	80004fe <__udivmoddi4+0x6e>
 80005f2:	4642      	mov	r2, r8
 80005f4:	2320      	movs	r3, #32
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	002a      	movs	r2, r5
 80005fa:	4646      	mov	r6, r8
 80005fc:	409a      	lsls	r2, r3
 80005fe:	0023      	movs	r3, r4
 8000600:	40f3      	lsrs	r3, r6
 8000602:	4644      	mov	r4, r8
 8000604:	4313      	orrs	r3, r2
 8000606:	002a      	movs	r2, r5
 8000608:	40e2      	lsrs	r2, r4
 800060a:	001c      	movs	r4, r3
 800060c:	465b      	mov	r3, fp
 800060e:	0015      	movs	r5, r2
 8000610:	2b00      	cmp	r3, #0
 8000612:	dad4      	bge.n	80005be <__udivmoddi4+0x12e>
 8000614:	4642      	mov	r2, r8
 8000616:	002f      	movs	r7, r5
 8000618:	2320      	movs	r3, #32
 800061a:	0026      	movs	r6, r4
 800061c:	4097      	lsls	r7, r2
 800061e:	1a9b      	subs	r3, r3, r2
 8000620:	40de      	lsrs	r6, r3
 8000622:	003b      	movs	r3, r7
 8000624:	4333      	orrs	r3, r6
 8000626:	e7cd      	b.n	80005c4 <__udivmoddi4+0x134>

08000628 <__clzdi2>:
 8000628:	b510      	push	{r4, lr}
 800062a:	2900      	cmp	r1, #0
 800062c:	d103      	bne.n	8000636 <__clzdi2+0xe>
 800062e:	f000 f807 	bl	8000640 <__clzsi2>
 8000632:	3020      	adds	r0, #32
 8000634:	e002      	b.n	800063c <__clzdi2+0x14>
 8000636:	0008      	movs	r0, r1
 8000638:	f000 f802 	bl	8000640 <__clzsi2>
 800063c:	bd10      	pop	{r4, pc}
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <__clzsi2>:
 8000640:	211c      	movs	r1, #28
 8000642:	2301      	movs	r3, #1
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	4298      	cmp	r0, r3
 8000648:	d301      	bcc.n	800064e <__clzsi2+0xe>
 800064a:	0c00      	lsrs	r0, r0, #16
 800064c:	3910      	subs	r1, #16
 800064e:	0a1b      	lsrs	r3, r3, #8
 8000650:	4298      	cmp	r0, r3
 8000652:	d301      	bcc.n	8000658 <__clzsi2+0x18>
 8000654:	0a00      	lsrs	r0, r0, #8
 8000656:	3908      	subs	r1, #8
 8000658:	091b      	lsrs	r3, r3, #4
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0x22>
 800065e:	0900      	lsrs	r0, r0, #4
 8000660:	3904      	subs	r1, #4
 8000662:	a202      	add	r2, pc, #8	; (adr r2, 800066c <__clzsi2+0x2c>)
 8000664:	5c10      	ldrb	r0, [r2, r0]
 8000666:	1840      	adds	r0, r0, r1
 8000668:	4770      	bx	lr
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	02020304 	.word	0x02020304
 8000670:	01010101 	.word	0x01010101
	...

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000680:	f000 fbe4 	bl	8000e4c <HAL_Init>

  /* USER CODE BEGIN Init */

  /* Initialize our bot buddy */
   BT_BUDDY_Init();
 8000684:	f000 fa98 	bl	8000bb8 <BT_BUDDY_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f80a 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 f90c 	bl	80008a8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000690:	f000 f8a0 	bl	80007d4 <MX_TIM2_Init>
  MX_LPUART1_UART_Init();
 8000694:	f000 f870 	bl	8000778 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  event_loop();
 8000698:	f000 f950 	bl	800093c <event_loop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069c:	e7fe      	b.n	800069c <main+0x20>
	...

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b099      	sub	sp, #100	; 0x64
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	242c      	movs	r4, #44	; 0x2c
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	0018      	movs	r0, r3
 80006ac:	2334      	movs	r3, #52	; 0x34
 80006ae:	001a      	movs	r2, r3
 80006b0:	2100      	movs	r1, #0
 80006b2:	f002 fe31 	bl	8003318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b6:	2318      	movs	r3, #24
 80006b8:	18fb      	adds	r3, r7, r3
 80006ba:	0018      	movs	r0, r3
 80006bc:	2314      	movs	r3, #20
 80006be:	001a      	movs	r2, r3
 80006c0:	2100      	movs	r1, #0
 80006c2:	f002 fe29 	bl	8003318 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c6:	003b      	movs	r3, r7
 80006c8:	0018      	movs	r0, r3
 80006ca:	2318      	movs	r3, #24
 80006cc:	001a      	movs	r2, r3
 80006ce:	2100      	movs	r1, #0
 80006d0:	f002 fe22 	bl	8003318 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	4b26      	ldr	r3, [pc, #152]	; (8000770 <SystemClock_Config+0xd0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a26      	ldr	r2, [pc, #152]	; (8000774 <SystemClock_Config+0xd4>)
 80006da:	401a      	ands	r2, r3
 80006dc:	4b24      	ldr	r3, [pc, #144]	; (8000770 <SystemClock_Config+0xd0>)
 80006de:	2180      	movs	r1, #128	; 0x80
 80006e0:	0109      	lsls	r1, r1, #4
 80006e2:	430a      	orrs	r2, r1
 80006e4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006e6:	0021      	movs	r1, r4
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2210      	movs	r2, #16
 80006ec:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2201      	movs	r2, #1
 80006f2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	22a0      	movs	r2, #160	; 0xa0
 80006fe:	0212      	lsls	r2, r2, #8
 8000700:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2200      	movs	r2, #0
 8000706:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	187b      	adds	r3, r7, r1
 800070a:	0018      	movs	r0, r3
 800070c:	f000 fe6a 	bl	80013e4 <HAL_RCC_OscConfig>
 8000710:	1e03      	subs	r3, r0, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000714:	f000 fa80 	bl	8000c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000718:	2118      	movs	r1, #24
 800071a:	187b      	adds	r3, r7, r1
 800071c:	220f      	movs	r2, #15
 800071e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2200      	movs	r2, #0
 8000724:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2100      	movs	r1, #0
 800073c:	0018      	movs	r0, r3
 800073e:	f001 f9cd 	bl	8001adc <HAL_RCC_ClockConfig>
 8000742:	1e03      	subs	r3, r0, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000746:	f000 fa67 	bl	8000c18 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800074a:	003b      	movs	r3, r7
 800074c:	2204      	movs	r2, #4
 800074e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000750:	003b      	movs	r3, r7
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000756:	003b      	movs	r3, r7
 8000758:	0018      	movs	r0, r3
 800075a:	f001 fbe3 	bl	8001f24 <HAL_RCCEx_PeriphCLKConfig>
 800075e:	1e03      	subs	r3, r0, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000762:	f000 fa59 	bl	8000c18 <Error_Handler>
  }
}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b019      	add	sp, #100	; 0x64
 800076c:	bd90      	pop	{r4, r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	40007000 	.word	0x40007000
 8000774:	ffffe7ff 	.word	0xffffe7ff

08000778 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800077c:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_LPUART1_UART_Init+0x54>)
 800077e:	4a14      	ldr	r2, [pc, #80]	; (80007d0 <MX_LPUART1_UART_Init+0x58>)
 8000780:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 19200;
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_LPUART1_UART_Init+0x54>)
 8000784:	2296      	movs	r2, #150	; 0x96
 8000786:	01d2      	lsls	r2, r2, #7
 8000788:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MX_LPUART1_UART_Init+0x54>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_LPUART1_UART_Init+0x54>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <MX_LPUART1_UART_Init+0x54>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_LPUART1_UART_Init+0x54>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <MX_LPUART1_UART_Init+0x54>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a8:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_LPUART1_UART_Init+0x54>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ae:	4b07      	ldr	r3, [pc, #28]	; (80007cc <MX_LPUART1_UART_Init+0x54>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <MX_LPUART1_UART_Init+0x54>)
 80007b6:	0018      	movs	r0, r3
 80007b8:	f002 f846 	bl	8002848 <HAL_UART_Init>
 80007bc:	1e03      	subs	r3, r0, #0
 80007be:	d001      	beq.n	80007c4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80007c0:	f000 fa2a 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	20000028 	.word	0x20000028
 80007d0:	40004800 	.word	0x40004800

080007d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007da:	2310      	movs	r3, #16
 80007dc:	18fb      	adds	r3, r7, r3
 80007de:	0018      	movs	r0, r3
 80007e0:	2308      	movs	r3, #8
 80007e2:	001a      	movs	r2, r3
 80007e4:	2100      	movs	r1, #0
 80007e6:	f002 fd97 	bl	8003318 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ea:	003b      	movs	r3, r7
 80007ec:	0018      	movs	r0, r3
 80007ee:	2310      	movs	r3, #16
 80007f0:	001a      	movs	r2, r3
 80007f2:	2100      	movs	r1, #0
 80007f4:	f002 fd90 	bl	8003318 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f8:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <MX_TIM2_Init+0xcc>)
 80007fa:	2280      	movs	r2, #128	; 0x80
 80007fc:	05d2      	lsls	r2, r2, #23
 80007fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000800:	4b27      	ldr	r3, [pc, #156]	; (80008a0 <MX_TIM2_Init+0xcc>)
 8000802:	2200      	movs	r2, #0
 8000804:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000806:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <MX_TIM2_Init+0xcc>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 839;
 800080c:	4b24      	ldr	r3, [pc, #144]	; (80008a0 <MX_TIM2_Init+0xcc>)
 800080e:	4a25      	ldr	r2, [pc, #148]	; (80008a4 <MX_TIM2_Init+0xd0>)
 8000810:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000812:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <MX_TIM2_Init+0xcc>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000818:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <MX_TIM2_Init+0xcc>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <MX_TIM2_Init+0xcc>)
 8000820:	0018      	movs	r0, r3
 8000822:	f001 fcab 	bl	800217c <HAL_TIM_PWM_Init>
 8000826:	1e03      	subs	r3, r0, #0
 8000828:	d001      	beq.n	800082e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800082a:	f000 f9f5 	bl	8000c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082e:	2110      	movs	r1, #16
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2200      	movs	r2, #0
 800083a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800083c:	187a      	adds	r2, r7, r1
 800083e:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <MX_TIM2_Init+0xcc>)
 8000840:	0011      	movs	r1, r2
 8000842:	0018      	movs	r0, r3
 8000844:	f001 ffa8 	bl	8002798 <HAL_TIMEx_MasterConfigSynchronization>
 8000848:	1e03      	subs	r3, r0, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800084c:	f000 f9e4 	bl	8000c18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000850:	003b      	movs	r3, r7
 8000852:	2260      	movs	r2, #96	; 0x60
 8000854:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000856:	003b      	movs	r3, r7
 8000858:	2200      	movs	r2, #0
 800085a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085c:	003b      	movs	r3, r7
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000862:	003b      	movs	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000868:	0039      	movs	r1, r7
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <MX_TIM2_Init+0xcc>)
 800086c:	2200      	movs	r2, #0
 800086e:	0018      	movs	r0, r3
 8000870:	f001 fd50 	bl	8002314 <HAL_TIM_PWM_ConfigChannel>
 8000874:	1e03      	subs	r3, r0, #0
 8000876:	d001      	beq.n	800087c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000878:	f000 f9ce 	bl	8000c18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800087c:	0039      	movs	r1, r7
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MX_TIM2_Init+0xcc>)
 8000880:	2204      	movs	r2, #4
 8000882:	0018      	movs	r0, r3
 8000884:	f001 fd46 	bl	8002314 <HAL_TIM_PWM_ConfigChannel>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800088c:	f000 f9c4 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <MX_TIM2_Init+0xcc>)
 8000892:	0018      	movs	r0, r3
 8000894:	f000 fa34 	bl	8000d00 <HAL_TIM_MspPostInit>

}
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	b006      	add	sp, #24
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000b0 	.word	0x200000b0
 80008a4:	00000347 	.word	0x00000347

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b089      	sub	sp, #36	; 0x24
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	240c      	movs	r4, #12
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	0018      	movs	r0, r3
 80008b4:	2314      	movs	r3, #20
 80008b6:	001a      	movs	r2, r3
 80008b8:	2100      	movs	r1, #0
 80008ba:	f002 fd2d 	bl	8003318 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <MX_GPIO_Init+0x8c>)
 80008c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008c2:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <MX_GPIO_Init+0x8c>)
 80008c4:	2101      	movs	r1, #1
 80008c6:	430a      	orrs	r2, r1
 80008c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_GPIO_Init+0x8c>)
 80008cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ce:	2201      	movs	r2, #1
 80008d0:	4013      	ands	r3, r2
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <MX_GPIO_Init+0x8c>)
 80008d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008da:	4b16      	ldr	r3, [pc, #88]	; (8000934 <MX_GPIO_Init+0x8c>)
 80008dc:	2102      	movs	r1, #2
 80008de:	430a      	orrs	r2, r1
 80008e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_GPIO_Init+0x8c>)
 80008e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e6:	2202      	movs	r2, #2
 80008e8:	4013      	ands	r3, r2
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	22e0      	movs	r2, #224	; 0xe0
 80008f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	2200      	movs	r2, #0
 80008f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	193a      	adds	r2, r7, r4
 8000902:	23a0      	movs	r3, #160	; 0xa0
 8000904:	05db      	lsls	r3, r3, #23
 8000906:	0011      	movs	r1, r2
 8000908:	0018      	movs	r0, r3
 800090a:	f000 fbc3 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800090e:	193b      	adds	r3, r7, r4
 8000910:	2201      	movs	r2, #1
 8000912:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000914:	193b      	adds	r3, r7, r4
 8000916:	2200      	movs	r2, #0
 8000918:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	193b      	adds	r3, r7, r4
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000920:	193b      	adds	r3, r7, r4
 8000922:	4a05      	ldr	r2, [pc, #20]	; (8000938 <MX_GPIO_Init+0x90>)
 8000924:	0019      	movs	r1, r3
 8000926:	0010      	movs	r0, r2
 8000928:	f000 fbb4 	bl	8001094 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	b009      	add	sp, #36	; 0x24
 8000932:	bd90      	pop	{r4, r7, pc}
 8000934:	40021000 	.word	0x40021000
 8000938:	50000400 	.word	0x50000400

0800093c <event_loop>:

/* USER CODE BEGIN 4 */


/* Event loop that handles our botbuddy when it is running */
void event_loop(void) {
 800093c:	b5b0      	push	{r4, r5, r7, lr}
 800093e:	b08e      	sub	sp, #56	; 0x38
 8000940:	af00      	add	r7, sp, #0

	int counter = 0; // FOR TESTING
 8000942:	2300      	movs	r3, #0
 8000944:	637b      	str	r3, [r7, #52]	; 0x34
	int idx = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	633b      	str	r3, [r7, #48]	; 0x30

	while (1) {

		/* FOR TESTING */
		// change button states, go from right, left, backward, forward, power
		idx = (counter % 5);
 800094a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800094c:	2105      	movs	r1, #5
 800094e:	0018      	movs	r0, r3
 8000950:	f7ff fd4a 	bl	80003e8 <__aeabi_idivmod>
 8000954:	000b      	movs	r3, r1
 8000956:	633b      	str	r3, [r7, #48]	; 0x30

		b_buddy.rot_speed = (50 + (idx * 10)) % 100;
 8000958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800095a:	0013      	movs	r3, r2
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	189b      	adds	r3, r3, r2
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	3332      	adds	r3, #50	; 0x32
 8000964:	2164      	movs	r1, #100	; 0x64
 8000966:	0018      	movs	r0, r3
 8000968:	f7ff fd3e 	bl	80003e8 <__aeabi_idivmod>
 800096c:	000b      	movs	r3, r1
 800096e:	001a      	movs	r2, r3
 8000970:	4b70      	ldr	r3, [pc, #448]	; (8000b34 <event_loop+0x1f8>)
 8000972:	605a      	str	r2, [r3, #4]
		//b_buddy.button_state |= (1 << idx);
		//DEBUG_GPIO_TEST();

		while(!b_buddy.button_state){READ_CONTROLLER();}
 8000974:	e001      	b.n	800097a <event_loop+0x3e>
 8000976:	f000 f8eb 	bl	8000b50 <READ_CONTROLLER>
 800097a:	4b6e      	ldr	r3, [pc, #440]	; (8000b34 <event_loop+0x1f8>)
 800097c:	785b      	ldrb	r3, [r3, #1]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	2b00      	cmp	r3, #0
 8000982:	d0f8      	beq.n	8000976 <event_loop+0x3a>



		switch(b_buddy.button_state) {
 8000984:	4b6b      	ldr	r3, [pc, #428]	; (8000b34 <event_loop+0x1f8>)
 8000986:	785b      	ldrb	r3, [r3, #1]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b10      	cmp	r3, #16
 800098c:	d900      	bls.n	8000990 <event_loop+0x54>
 800098e:	e0c8      	b.n	8000b22 <event_loop+0x1e6>
 8000990:	009a      	lsls	r2, r3, #2
 8000992:	4b69      	ldr	r3, [pc, #420]	; (8000b38 <event_loop+0x1fc>)
 8000994:	18d3      	adds	r3, r2, r3
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	469f      	mov	pc, r3
			// run both motors forward by switching GPIO PINs ON for S0 for both motors
			case FORWARD:
				// switch 0 on both motors will be ON
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800099a:	23a0      	movs	r3, #160	; 0xa0
 800099c:	05db      	lsls	r3, r3, #23
 800099e:	2201      	movs	r2, #1
 80009a0:	2108      	movs	r1, #8
 80009a2:	0018      	movs	r0, r3
 80009a4:	f000 fd01 	bl	80013aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80009a8:	23a0      	movs	r3, #160	; 0xa0
 80009aa:	05db      	lsls	r3, r3, #23
 80009ac:	2201      	movs	r2, #1
 80009ae:	2140      	movs	r1, #64	; 0x40
 80009b0:	0018      	movs	r0, r3
 80009b2:	f000 fcfa 	bl	80013aa <HAL_GPIO_WritePin>

				// switch 1 on both motors will be OFF
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80009b6:	23a0      	movs	r3, #160	; 0xa0
 80009b8:	05db      	lsls	r3, r3, #23
 80009ba:	2200      	movs	r2, #0
 80009bc:	2120      	movs	r1, #32
 80009be:	0018      	movs	r0, r3
 80009c0:	f000 fcf3 	bl	80013aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80009c4:	23a0      	movs	r3, #160	; 0xa0
 80009c6:	05db      	lsls	r3, r3, #23
 80009c8:	2200      	movs	r2, #0
 80009ca:	2180      	movs	r1, #128	; 0x80
 80009cc:	0018      	movs	r0, r3
 80009ce:	f000 fcec 	bl	80013aa <HAL_GPIO_WritePin>
				uint8_t Test1[] = "Forward!/n";
 80009d2:	2424      	movs	r4, #36	; 0x24
 80009d4:	193b      	adds	r3, r7, r4
 80009d6:	4a59      	ldr	r2, [pc, #356]	; (8000b3c <event_loop+0x200>)
 80009d8:	ca03      	ldmia	r2!, {r0, r1}
 80009da:	c303      	stmia	r3!, {r0, r1}
 80009dc:	8811      	ldrh	r1, [r2, #0]
 80009de:	8019      	strh	r1, [r3, #0]
 80009e0:	7892      	ldrb	r2, [r2, #2]
 80009e2:	709a      	strb	r2, [r3, #2]
				HAL_UART_Transmit(&hlpuart1, Test1, sizeof(Test1), 10);
 80009e4:	1939      	adds	r1, r7, r4
 80009e6:	4856      	ldr	r0, [pc, #344]	; (8000b40 <event_loop+0x204>)
 80009e8:	230a      	movs	r3, #10
 80009ea:	220b      	movs	r2, #11
 80009ec:	f001 ff80 	bl	80028f0 <HAL_UART_Transmit>
				break;
 80009f0:	e097      	b.n	8000b22 <event_loop+0x1e6>
			// run both motors if it is backward
			case BACKWARD:
				// switch 0 on both motors will be OFF
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80009f2:	23a0      	movs	r3, #160	; 0xa0
 80009f4:	05db      	lsls	r3, r3, #23
 80009f6:	2200      	movs	r2, #0
 80009f8:	2108      	movs	r1, #8
 80009fa:	0018      	movs	r0, r3
 80009fc:	f000 fcd5 	bl	80013aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a00:	23a0      	movs	r3, #160	; 0xa0
 8000a02:	05db      	lsls	r3, r3, #23
 8000a04:	2200      	movs	r2, #0
 8000a06:	2140      	movs	r1, #64	; 0x40
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f000 fcce 	bl	80013aa <HAL_GPIO_WritePin>

				// switch 1 on both motors will be ON
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000a0e:	23a0      	movs	r3, #160	; 0xa0
 8000a10:	05db      	lsls	r3, r3, #23
 8000a12:	2201      	movs	r2, #1
 8000a14:	2120      	movs	r1, #32
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 fcc7 	bl	80013aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000a1c:	23a0      	movs	r3, #160	; 0xa0
 8000a1e:	05db      	lsls	r3, r3, #23
 8000a20:	2201      	movs	r2, #1
 8000a22:	2180      	movs	r1, #128	; 0x80
 8000a24:	0018      	movs	r0, r3
 8000a26:	f000 fcc0 	bl	80013aa <HAL_GPIO_WritePin>

				uint8_t Test2[] = "Backwards!/n";
 8000a2a:	2514      	movs	r5, #20
 8000a2c:	197b      	adds	r3, r7, r5
 8000a2e:	4a45      	ldr	r2, [pc, #276]	; (8000b44 <event_loop+0x208>)
 8000a30:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a32:	c313      	stmia	r3!, {r0, r1, r4}
 8000a34:	7812      	ldrb	r2, [r2, #0]
 8000a36:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&hlpuart1, Test2, sizeof(Test2), 10);
 8000a38:	1979      	adds	r1, r7, r5
 8000a3a:	4841      	ldr	r0, [pc, #260]	; (8000b40 <event_loop+0x204>)
 8000a3c:	230a      	movs	r3, #10
 8000a3e:	220d      	movs	r2, #13
 8000a40:	f001 ff56 	bl	80028f0 <HAL_UART_Transmit>

				break;
 8000a44:	e06d      	b.n	8000b22 <event_loop+0x1e6>
			// run the right motor to turn left
			case LEFT:
				// s1 for left motor will be 1 and s0 for right motor will be 1
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000a46:	23a0      	movs	r3, #160	; 0xa0
 8000a48:	05db      	lsls	r3, r3, #23
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2180      	movs	r1, #128	; 0x80
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f000 fcab 	bl	80013aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000a54:	23a0      	movs	r3, #160	; 0xa0
 8000a56:	05db      	lsls	r3, r3, #23
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2108      	movs	r1, #8
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f000 fca4 	bl	80013aa <HAL_GPIO_WritePin>

				// otherwise 0
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a62:	23a0      	movs	r3, #160	; 0xa0
 8000a64:	05db      	lsls	r3, r3, #23
 8000a66:	2200      	movs	r2, #0
 8000a68:	2140      	movs	r1, #64	; 0x40
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f000 fc9d 	bl	80013aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a70:	23a0      	movs	r3, #160	; 0xa0
 8000a72:	05db      	lsls	r3, r3, #23
 8000a74:	2200      	movs	r2, #0
 8000a76:	2120      	movs	r1, #32
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f000 fc96 	bl	80013aa <HAL_GPIO_WritePin>

				uint8_t Test3[] = "Left!/n";
 8000a7e:	240c      	movs	r4, #12
 8000a80:	193b      	adds	r3, r7, r4
 8000a82:	4a31      	ldr	r2, [pc, #196]	; (8000b48 <event_loop+0x20c>)
 8000a84:	ca03      	ldmia	r2!, {r0, r1}
 8000a86:	c303      	stmia	r3!, {r0, r1}
				HAL_UART_Transmit(&hlpuart1, Test3, sizeof(Test3), 10);
 8000a88:	1939      	adds	r1, r7, r4
 8000a8a:	482d      	ldr	r0, [pc, #180]	; (8000b40 <event_loop+0x204>)
 8000a8c:	230a      	movs	r3, #10
 8000a8e:	2208      	movs	r2, #8
 8000a90:	f001 ff2e 	bl	80028f0 <HAL_UART_Transmit>

				break;
 8000a94:	e045      	b.n	8000b22 <event_loop+0x1e6>
			// run the left motor to turn right
			case RIGHT:

				// s0 for left motor will be 1 and s1 of right motor should be 1
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000a96:	23a0      	movs	r3, #160	; 0xa0
 8000a98:	05db      	lsls	r3, r3, #23
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	2140      	movs	r1, #64	; 0x40
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f000 fc83 	bl	80013aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000aa4:	23a0      	movs	r3, #160	; 0xa0
 8000aa6:	05db      	lsls	r3, r3, #23
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2120      	movs	r1, #32
 8000aac:	0018      	movs	r0, r3
 8000aae:	f000 fc7c 	bl	80013aa <HAL_GPIO_WritePin>

				// otherwise 0
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000ab2:	23a0      	movs	r3, #160	; 0xa0
 8000ab4:	05db      	lsls	r3, r3, #23
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2108      	movs	r1, #8
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 fc75 	bl	80013aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ac0:	23a0      	movs	r3, #160	; 0xa0
 8000ac2:	05db      	lsls	r3, r3, #23
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2180      	movs	r1, #128	; 0x80
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f000 fc6e 	bl	80013aa <HAL_GPIO_WritePin>

				uint8_t Test4[] = "Right!/n";
 8000ace:	003b      	movs	r3, r7
 8000ad0:	4a1e      	ldr	r2, [pc, #120]	; (8000b4c <event_loop+0x210>)
 8000ad2:	ca03      	ldmia	r2!, {r0, r1}
 8000ad4:	c303      	stmia	r3!, {r0, r1}
 8000ad6:	7812      	ldrb	r2, [r2, #0]
 8000ad8:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&hlpuart1, Test4, sizeof(Test4), 10);
 8000ada:	0039      	movs	r1, r7
 8000adc:	4818      	ldr	r0, [pc, #96]	; (8000b40 <event_loop+0x204>)
 8000ade:	230a      	movs	r3, #10
 8000ae0:	2209      	movs	r2, #9
 8000ae2:	f001 ff05 	bl	80028f0 <HAL_UART_Transmit>

				break;
 8000ae6:	e01c      	b.n	8000b22 <event_loop+0x1e6>
			case POWER:
				// turn off all PINS
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000ae8:	23a0      	movs	r3, #160	; 0xa0
 8000aea:	05db      	lsls	r3, r3, #23
 8000aec:	2200      	movs	r2, #0
 8000aee:	2108      	movs	r1, #8
 8000af0:	0018      	movs	r0, r3
 8000af2:	f000 fc5a 	bl	80013aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000af6:	23a0      	movs	r3, #160	; 0xa0
 8000af8:	05db      	lsls	r3, r3, #23
 8000afa:	2200      	movs	r2, #0
 8000afc:	2140      	movs	r1, #64	; 0x40
 8000afe:	0018      	movs	r0, r3
 8000b00:	f000 fc53 	bl	80013aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b04:	23a0      	movs	r3, #160	; 0xa0
 8000b06:	05db      	lsls	r3, r3, #23
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2120      	movs	r1, #32
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f000 fc4c 	bl	80013aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000b12:	23a0      	movs	r3, #160	; 0xa0
 8000b14:	05db      	lsls	r3, r3, #23
 8000b16:	2200      	movs	r2, #0
 8000b18:	2180      	movs	r1, #128	; 0x80
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f000 fc45 	bl	80013aa <HAL_GPIO_WritePin>

				break;
 8000b20:	46c0      	nop			; (mov r8, r8)
		}
		/* For testing */
		// shift the next bit
		counter++;
 8000b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b24:	3301      	adds	r3, #1
 8000b26:	637b      	str	r3, [r7, #52]	; 0x34
		// reset button state
		b_buddy.button_state = 0x00;
 8000b28:	4b02      	ldr	r3, [pc, #8]	; (8000b34 <event_loop+0x1f8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	705a      	strb	r2, [r3, #1]

		RUN_MOTOR();
 8000b2e:	f000 f853 	bl	8000bd8 <RUN_MOTOR>
		idx = (counter % 5);
 8000b32:	e70a      	b.n	800094a <event_loop+0xe>
 8000b34:	200000f0 	.word	0x200000f0
 8000b38:	080033b8 	.word	0x080033b8
 8000b3c:	08003388 	.word	0x08003388
 8000b40:	20000028 	.word	0x20000028
 8000b44:	08003394 	.word	0x08003394
 8000b48:	080033a4 	.word	0x080033a4
 8000b4c:	080033ac 	.word	0x080033ac

08000b50 <READ_CONTROLLER>:
		//HAL_Delay(100);
	}
}

/* Reads our GPIO pin*/
void READ_CONTROLLER(void) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_5)) {b_buddy.button_state = 1;};
 8000b54:	23a0      	movs	r3, #160	; 0xa0
 8000b56:	05db      	lsls	r3, r3, #23
 8000b58:	2120      	movs	r1, #32
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f000 fc08 	bl	8001370 <HAL_GPIO_ReadPin>
 8000b60:	1e03      	subs	r3, r0, #0
 8000b62:	d002      	beq.n	8000b6a <READ_CONTROLLER+0x1a>
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <READ_CONTROLLER+0x60>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	705a      	strb	r2, [r3, #1]

	if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_6)) {b_buddy.button_state = 2;};
 8000b6a:	23a0      	movs	r3, #160	; 0xa0
 8000b6c:	05db      	lsls	r3, r3, #23
 8000b6e:	2140      	movs	r1, #64	; 0x40
 8000b70:	0018      	movs	r0, r3
 8000b72:	f000 fbfd 	bl	8001370 <HAL_GPIO_ReadPin>
 8000b76:	1e03      	subs	r3, r0, #0
 8000b78:	d002      	beq.n	8000b80 <READ_CONTROLLER+0x30>
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <READ_CONTROLLER+0x60>)
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	705a      	strb	r2, [r3, #1]

	if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_7)) {b_buddy.button_state = 4;};
 8000b80:	23a0      	movs	r3, #160	; 0xa0
 8000b82:	05db      	lsls	r3, r3, #23
 8000b84:	2180      	movs	r1, #128	; 0x80
 8000b86:	0018      	movs	r0, r3
 8000b88:	f000 fbf2 	bl	8001370 <HAL_GPIO_ReadPin>
 8000b8c:	1e03      	subs	r3, r0, #0
 8000b8e:	d002      	beq.n	8000b96 <READ_CONTROLLER+0x46>
 8000b90:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <READ_CONTROLLER+0x60>)
 8000b92:	2204      	movs	r2, #4
 8000b94:	705a      	strb	r2, [r3, #1]

	if (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_0)) {b_buddy.button_state = 8;};
 8000b96:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <READ_CONTROLLER+0x64>)
 8000b98:	2101      	movs	r1, #1
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f000 fbe8 	bl	8001370 <HAL_GPIO_ReadPin>
 8000ba0:	1e03      	subs	r3, r0, #0
 8000ba2:	d002      	beq.n	8000baa <READ_CONTROLLER+0x5a>
 8000ba4:	4b02      	ldr	r3, [pc, #8]	; (8000bb0 <READ_CONTROLLER+0x60>)
 8000ba6:	2208      	movs	r2, #8
 8000ba8:	705a      	strb	r2, [r3, #1]
}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200000f0 	.word	0x200000f0
 8000bb4:	50000400 	.word	0x50000400

08000bb8 <BT_BUDDY_Init>:

/* Initialization funciton for our BotBuddy */
void BT_BUDDY_Init(void) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	b_buddy.power = 0x00;
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <BT_BUDDY_Init+0x1c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
	b_buddy.button_state = 0x00;
 8000bc2:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <BT_BUDDY_Init+0x1c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	705a      	strb	r2, [r3, #1]
	b_buddy.rot_speed = 0;
 8000bc8:	4b02      	ldr	r3, [pc, #8]	; (8000bd4 <BT_BUDDY_Init+0x1c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	605a      	str	r2, [r3, #4]
}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200000f0 	.word	0x200000f0

08000bd8 <RUN_MOTOR>:

void RUN_MOTOR(void) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	/* RIGHT MOTOR */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <RUN_MOTOR+0x38>)
 8000bde:	2104      	movs	r1, #4
 8000be0:	0018      	movs	r0, r3
 8000be2:	f001 fb0b 	bl	80021fc <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (PWM_PERIOD / 100) * b_buddy.rot_speed);
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <RUN_MOTOR+0x3c>)
 8000be8:	685a      	ldr	r2, [r3, #4]
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <RUN_MOTOR+0x38>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	00d2      	lsls	r2, r2, #3
 8000bf0:	639a      	str	r2, [r3, #56]	; 0x38

	/* LEFT MOTOR */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <RUN_MOTOR+0x38>)
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f001 fb00 	bl	80021fc <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, (PWM_PERIOD / 100) * b_buddy.rot_speed);
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <RUN_MOTOR+0x3c>)
 8000bfe:	685a      	ldr	r2, [r3, #4]
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <RUN_MOTOR+0x38>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	00d2      	lsls	r2, r2, #3
 8000c06:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	200000b0 	.word	0x200000b0
 8000c14:	200000f0 	.word	0x200000f0

08000c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
}
 8000c1e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <Error_Handler+0x8>
	...

08000c24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c28:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <HAL_MspInit+0x24>)
 8000c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_MspInit+0x24>)
 8000c2e:	2101      	movs	r1, #1
 8000c30:	430a      	orrs	r2, r1
 8000c32:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <HAL_MspInit+0x24>)
 8000c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c38:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <HAL_MspInit+0x24>)
 8000c3a:	2180      	movs	r1, #128	; 0x80
 8000c3c:	0549      	lsls	r1, r1, #21
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40021000 	.word	0x40021000

08000c4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b089      	sub	sp, #36	; 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	240c      	movs	r4, #12
 8000c56:	193b      	adds	r3, r7, r4
 8000c58:	0018      	movs	r0, r3
 8000c5a:	2314      	movs	r3, #20
 8000c5c:	001a      	movs	r2, r3
 8000c5e:	2100      	movs	r1, #0
 8000c60:	f002 fb5a 	bl	8003318 <memset>
  if(huart->Instance==LPUART1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a18      	ldr	r2, [pc, #96]	; (8000ccc <HAL_UART_MspInit+0x80>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d129      	bne.n	8000cc2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <HAL_UART_MspInit+0x84>)
 8000c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <HAL_UART_MspInit+0x84>)
 8000c74:	2180      	movs	r1, #128	; 0x80
 8000c76:	02c9      	lsls	r1, r1, #11
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_UART_MspInit+0x84>)
 8000c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <HAL_UART_MspInit+0x84>)
 8000c82:	2101      	movs	r1, #1
 8000c84:	430a      	orrs	r2, r1
 8000c86:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <HAL_UART_MspInit+0x84>)
 8000c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	4013      	ands	r3, r2
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c94:	0021      	movs	r1, r4
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	220c      	movs	r2, #12
 8000c9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	2203      	movs	r2, #3
 8000cac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	2206      	movs	r2, #6
 8000cb2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb4:	187a      	adds	r2, r7, r1
 8000cb6:	23a0      	movs	r3, #160	; 0xa0
 8000cb8:	05db      	lsls	r3, r3, #23
 8000cba:	0011      	movs	r1, r2
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f000 f9e9 	bl	8001094 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b009      	add	sp, #36	; 0x24
 8000cc8:	bd90      	pop	{r4, r7, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	40004800 	.word	0x40004800
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	2380      	movs	r3, #128	; 0x80
 8000ce2:	05db      	lsls	r3, r3, #23
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d105      	bne.n	8000cf4 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ce8:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <HAL_TIM_PWM_MspInit+0x28>)
 8000cea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <HAL_TIM_PWM_MspInit+0x28>)
 8000cee:	2101      	movs	r1, #1
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b002      	add	sp, #8
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40021000 	.word	0x40021000

08000d00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d00:	b590      	push	{r4, r7, lr}
 8000d02:	b08b      	sub	sp, #44	; 0x2c
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	2414      	movs	r4, #20
 8000d0a:	193b      	adds	r3, r7, r4
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	2314      	movs	r3, #20
 8000d10:	001a      	movs	r2, r3
 8000d12:	2100      	movs	r1, #0
 8000d14:	f002 fb00 	bl	8003318 <memset>
  if(htim->Instance==TIM2)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	2380      	movs	r3, #128	; 0x80
 8000d1e:	05db      	lsls	r3, r3, #23
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d144      	bne.n	8000dae <HAL_TIM_MspPostInit+0xae>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d24:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <HAL_TIM_MspPostInit+0xb8>)
 8000d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d28:	4b23      	ldr	r3, [pc, #140]	; (8000db8 <HAL_TIM_MspPostInit+0xb8>)
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d30:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <HAL_TIM_MspPostInit+0xb8>)
 8000d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d34:	2201      	movs	r2, #1
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <HAL_TIM_MspPostInit+0xb8>)
 8000d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d40:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <HAL_TIM_MspPostInit+0xb8>)
 8000d42:	2102      	movs	r1, #2
 8000d44:	430a      	orrs	r2, r1
 8000d46:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d48:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <HAL_TIM_MspPostInit+0xb8>)
 8000d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	4013      	ands	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d54:	193b      	adds	r3, r7, r4
 8000d56:	2280      	movs	r2, #128	; 0x80
 8000d58:	0212      	lsls	r2, r2, #8
 8000d5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	193b      	adds	r3, r7, r4
 8000d5e:	2202      	movs	r2, #2
 8000d60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	193b      	adds	r3, r7, r4
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	193b      	adds	r3, r7, r4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8000d6e:	193b      	adds	r3, r7, r4
 8000d70:	2205      	movs	r2, #5
 8000d72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d74:	193a      	adds	r2, r7, r4
 8000d76:	23a0      	movs	r3, #160	; 0xa0
 8000d78:	05db      	lsls	r3, r3, #23
 8000d7a:	0011      	movs	r1, r2
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f000 f989 	bl	8001094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d82:	0021      	movs	r1, r4
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	2208      	movs	r2, #8
 8000d88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	2202      	movs	r2, #2
 8000da0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <HAL_TIM_MspPostInit+0xbc>)
 8000da6:	0019      	movs	r1, r3
 8000da8:	0010      	movs	r0, r2
 8000daa:	f000 f973 	bl	8001094 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	46bd      	mov	sp, r7
 8000db2:	b00b      	add	sp, #44	; 0x2c
 8000db4:	bd90      	pop	{r4, r7, pc}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	50000400 	.word	0x50000400

08000dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <NMI_Handler+0x4>

08000dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <HardFault_Handler+0x4>

08000dcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dd0:	46c0      	nop			; (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de4:	f000 f886 	bl	8000ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000df8:	480d      	ldr	r0, [pc, #52]	; (8000e30 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000dfa:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dfc:	f7ff fff7 	bl	8000dee <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e00:	480c      	ldr	r0, [pc, #48]	; (8000e34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e02:	490d      	ldr	r1, [pc, #52]	; (8000e38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e04:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <LoopForever+0xe>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e08:	e002      	b.n	8000e10 <LoopCopyDataInit>

08000e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0e:	3304      	adds	r3, #4

08000e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e14:	d3f9      	bcc.n	8000e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e18:	4c0a      	ldr	r4, [pc, #40]	; (8000e44 <LoopForever+0x16>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e1c:	e001      	b.n	8000e22 <LoopFillZerobss>

08000e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e20:	3204      	adds	r2, #4

08000e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e24:	d3fb      	bcc.n	8000e1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e26:	f002 fa7f 	bl	8003328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2a:	f7ff fc27 	bl	800067c <main>

08000e2e <LoopForever>:

LoopForever:
    b LoopForever
 8000e2e:	e7fe      	b.n	8000e2e <LoopForever>
   ldr   r0, =_estack
 8000e30:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e3c:	08003478 	.word	0x08003478
  ldr r2, =_sbss
 8000e40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e44:	200000fc 	.word	0x200000fc

08000e48 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e48:	e7fe      	b.n	8000e48 <ADC1_COMP_IRQHandler>
	...

08000e4c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000e58:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <HAL_Init+0x3c>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HAL_Init+0x3c>)
 8000e5e:	2140      	movs	r1, #64	; 0x40
 8000e60:	430a      	orrs	r2, r1
 8000e62:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e64:	2003      	movs	r0, #3
 8000e66:	f000 f811 	bl	8000e8c <HAL_InitTick>
 8000e6a:	1e03      	subs	r3, r0, #0
 8000e6c:	d003      	beq.n	8000e76 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000e6e:	1dfb      	adds	r3, r7, #7
 8000e70:	2201      	movs	r2, #1
 8000e72:	701a      	strb	r2, [r3, #0]
 8000e74:	e001      	b.n	8000e7a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e76:	f7ff fed5 	bl	8000c24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e7a:	1dfb      	adds	r3, r7, #7
 8000e7c:	781b      	ldrb	r3, [r3, #0]
}
 8000e7e:	0018      	movs	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b002      	add	sp, #8
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	40022000 	.word	0x40022000

08000e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e94:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <HAL_InitTick+0x5c>)
 8000e96:	681c      	ldr	r4, [r3, #0]
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <HAL_InitTick+0x60>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	0019      	movs	r1, r3
 8000e9e:	23fa      	movs	r3, #250	; 0xfa
 8000ea0:	0098      	lsls	r0, r3, #2
 8000ea2:	f7ff f931 	bl	8000108 <__udivsi3>
 8000ea6:	0003      	movs	r3, r0
 8000ea8:	0019      	movs	r1, r3
 8000eaa:	0020      	movs	r0, r4
 8000eac:	f7ff f92c 	bl	8000108 <__udivsi3>
 8000eb0:	0003      	movs	r3, r0
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f000 f8e1 	bl	800107a <HAL_SYSTICK_Config>
 8000eb8:	1e03      	subs	r3, r0, #0
 8000eba:	d001      	beq.n	8000ec0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e00f      	b.n	8000ee0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d80b      	bhi.n	8000ede <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	425b      	negs	r3, r3
 8000ecc:	2200      	movs	r2, #0
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f000 f8be 	bl	8001050 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_InitTick+0x64>)
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e000      	b.n	8000ee0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
}
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	b003      	add	sp, #12
 8000ee6:	bd90      	pop	{r4, r7, pc}
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	20000004 	.word	0x20000004

08000ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <HAL_IncTick+0x1c>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	001a      	movs	r2, r3
 8000efe:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <HAL_IncTick+0x20>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	18d2      	adds	r2, r2, r3
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <HAL_IncTick+0x20>)
 8000f06:	601a      	str	r2, [r3, #0]
}
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	20000008 	.word	0x20000008
 8000f14:	200000f8 	.word	0x200000f8

08000f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f1c:	4b02      	ldr	r3, [pc, #8]	; (8000f28 <HAL_GetTick+0x10>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	0018      	movs	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	200000f8 	.word	0x200000f8

08000f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	0002      	movs	r2, r0
 8000f34:	6039      	str	r1, [r7, #0]
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f3a:	1dfb      	adds	r3, r7, #7
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b7f      	cmp	r3, #127	; 0x7f
 8000f40:	d828      	bhi.n	8000f94 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f42:	4a2f      	ldr	r2, [pc, #188]	; (8001000 <__NVIC_SetPriority+0xd4>)
 8000f44:	1dfb      	adds	r3, r7, #7
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b25b      	sxtb	r3, r3
 8000f4a:	089b      	lsrs	r3, r3, #2
 8000f4c:	33c0      	adds	r3, #192	; 0xc0
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	589b      	ldr	r3, [r3, r2]
 8000f52:	1dfa      	adds	r2, r7, #7
 8000f54:	7812      	ldrb	r2, [r2, #0]
 8000f56:	0011      	movs	r1, r2
 8000f58:	2203      	movs	r2, #3
 8000f5a:	400a      	ands	r2, r1
 8000f5c:	00d2      	lsls	r2, r2, #3
 8000f5e:	21ff      	movs	r1, #255	; 0xff
 8000f60:	4091      	lsls	r1, r2
 8000f62:	000a      	movs	r2, r1
 8000f64:	43d2      	mvns	r2, r2
 8000f66:	401a      	ands	r2, r3
 8000f68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	019b      	lsls	r3, r3, #6
 8000f6e:	22ff      	movs	r2, #255	; 0xff
 8000f70:	401a      	ands	r2, r3
 8000f72:	1dfb      	adds	r3, r7, #7
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	0018      	movs	r0, r3
 8000f78:	2303      	movs	r3, #3
 8000f7a:	4003      	ands	r3, r0
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f80:	481f      	ldr	r0, [pc, #124]	; (8001000 <__NVIC_SetPriority+0xd4>)
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	b25b      	sxtb	r3, r3
 8000f88:	089b      	lsrs	r3, r3, #2
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	33c0      	adds	r3, #192	; 0xc0
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f92:	e031      	b.n	8000ff8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f94:	4a1b      	ldr	r2, [pc, #108]	; (8001004 <__NVIC_SetPriority+0xd8>)
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	0019      	movs	r1, r3
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	400b      	ands	r3, r1
 8000fa0:	3b08      	subs	r3, #8
 8000fa2:	089b      	lsrs	r3, r3, #2
 8000fa4:	3306      	adds	r3, #6
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	18d3      	adds	r3, r2, r3
 8000faa:	3304      	adds	r3, #4
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	1dfa      	adds	r2, r7, #7
 8000fb0:	7812      	ldrb	r2, [r2, #0]
 8000fb2:	0011      	movs	r1, r2
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	400a      	ands	r2, r1
 8000fb8:	00d2      	lsls	r2, r2, #3
 8000fba:	21ff      	movs	r1, #255	; 0xff
 8000fbc:	4091      	lsls	r1, r2
 8000fbe:	000a      	movs	r2, r1
 8000fc0:	43d2      	mvns	r2, r2
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	019b      	lsls	r3, r3, #6
 8000fca:	22ff      	movs	r2, #255	; 0xff
 8000fcc:	401a      	ands	r2, r3
 8000fce:	1dfb      	adds	r3, r7, #7
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	4003      	ands	r3, r0
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fdc:	4809      	ldr	r0, [pc, #36]	; (8001004 <__NVIC_SetPriority+0xd8>)
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	001c      	movs	r4, r3
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	4023      	ands	r3, r4
 8000fe8:	3b08      	subs	r3, #8
 8000fea:	089b      	lsrs	r3, r3, #2
 8000fec:	430a      	orrs	r2, r1
 8000fee:	3306      	adds	r3, #6
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	18c3      	adds	r3, r0, r3
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	601a      	str	r2, [r3, #0]
}
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b003      	add	sp, #12
 8000ffe:	bd90      	pop	{r4, r7, pc}
 8001000:	e000e100 	.word	0xe000e100
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	1e5a      	subs	r2, r3, #1
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	045b      	lsls	r3, r3, #17
 8001018:	429a      	cmp	r2, r3
 800101a:	d301      	bcc.n	8001020 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101c:	2301      	movs	r3, #1
 800101e:	e010      	b.n	8001042 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <SysTick_Config+0x44>)
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	3a01      	subs	r2, #1
 8001026:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001028:	2301      	movs	r3, #1
 800102a:	425b      	negs	r3, r3
 800102c:	2103      	movs	r1, #3
 800102e:	0018      	movs	r0, r3
 8001030:	f7ff ff7c 	bl	8000f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <SysTick_Config+0x44>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103a:	4b04      	ldr	r3, [pc, #16]	; (800104c <SysTick_Config+0x44>)
 800103c:	2207      	movs	r2, #7
 800103e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001040:	2300      	movs	r3, #0
}
 8001042:	0018      	movs	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	b002      	add	sp, #8
 8001048:	bd80      	pop	{r7, pc}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	e000e010 	.word	0xe000e010

08001050 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	210f      	movs	r1, #15
 800105c:	187b      	adds	r3, r7, r1
 800105e:	1c02      	adds	r2, r0, #0
 8001060:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	187b      	adds	r3, r7, r1
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b25b      	sxtb	r3, r3
 800106a:	0011      	movs	r1, r2
 800106c:	0018      	movs	r0, r3
 800106e:	f7ff ff5d 	bl	8000f2c <__NVIC_SetPriority>
}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	46bd      	mov	sp, r7
 8001076:	b004      	add	sp, #16
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	0018      	movs	r0, r3
 8001086:	f7ff ffbf 	bl	8001008 <SysTick_Config>
 800108a:	0003      	movs	r3, r0
}
 800108c:	0018      	movs	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	b002      	add	sp, #8
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80010aa:	e149      	b.n	8001340 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2101      	movs	r1, #1
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	4091      	lsls	r1, r2
 80010b6:	000a      	movs	r2, r1
 80010b8:	4013      	ands	r3, r2
 80010ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d100      	bne.n	80010c4 <HAL_GPIO_Init+0x30>
 80010c2:	e13a      	b.n	800133a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2203      	movs	r2, #3
 80010ca:	4013      	ands	r3, r2
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d005      	beq.n	80010dc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2203      	movs	r2, #3
 80010d6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d130      	bne.n	800113e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	2203      	movs	r2, #3
 80010e8:	409a      	lsls	r2, r3
 80010ea:	0013      	movs	r3, r2
 80010ec:	43da      	mvns	r2, r3
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	68da      	ldr	r2, [r3, #12]
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	409a      	lsls	r2, r3
 80010fe:	0013      	movs	r3, r2
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001112:	2201      	movs	r2, #1
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
 8001118:	0013      	movs	r3, r2
 800111a:	43da      	mvns	r2, r3
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	091b      	lsrs	r3, r3, #4
 8001128:	2201      	movs	r2, #1
 800112a:	401a      	ands	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	409a      	lsls	r2, r3
 8001130:	0013      	movs	r3, r2
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2203      	movs	r2, #3
 8001144:	4013      	ands	r3, r2
 8001146:	2b03      	cmp	r3, #3
 8001148:	d017      	beq.n	800117a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	409a      	lsls	r2, r3
 8001158:	0013      	movs	r3, r2
 800115a:	43da      	mvns	r2, r3
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	689a      	ldr	r2, [r3, #8]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	409a      	lsls	r2, r3
 800116c:	0013      	movs	r3, r2
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2203      	movs	r2, #3
 8001180:	4013      	ands	r3, r2
 8001182:	2b02      	cmp	r3, #2
 8001184:	d123      	bne.n	80011ce <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	08da      	lsrs	r2, r3, #3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3208      	adds	r2, #8
 800118e:	0092      	lsls	r2, r2, #2
 8001190:	58d3      	ldr	r3, [r2, r3]
 8001192:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	2207      	movs	r2, #7
 8001198:	4013      	ands	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	220f      	movs	r2, #15
 800119e:	409a      	lsls	r2, r3
 80011a0:	0013      	movs	r3, r2
 80011a2:	43da      	mvns	r2, r3
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	691a      	ldr	r2, [r3, #16]
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	2107      	movs	r1, #7
 80011b2:	400b      	ands	r3, r1
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	409a      	lsls	r2, r3
 80011b8:	0013      	movs	r3, r2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	08da      	lsrs	r2, r3, #3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3208      	adds	r2, #8
 80011c8:	0092      	lsls	r2, r2, #2
 80011ca:	6939      	ldr	r1, [r7, #16]
 80011cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	2203      	movs	r2, #3
 80011da:	409a      	lsls	r2, r3
 80011dc:	0013      	movs	r3, r2
 80011de:	43da      	mvns	r2, r3
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2203      	movs	r2, #3
 80011ec:	401a      	ands	r2, r3
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	409a      	lsls	r2, r3
 80011f4:	0013      	movs	r3, r2
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	23c0      	movs	r3, #192	; 0xc0
 8001208:	029b      	lsls	r3, r3, #10
 800120a:	4013      	ands	r3, r2
 800120c:	d100      	bne.n	8001210 <HAL_GPIO_Init+0x17c>
 800120e:	e094      	b.n	800133a <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001210:	4b51      	ldr	r3, [pc, #324]	; (8001358 <HAL_GPIO_Init+0x2c4>)
 8001212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001214:	4b50      	ldr	r3, [pc, #320]	; (8001358 <HAL_GPIO_Init+0x2c4>)
 8001216:	2101      	movs	r1, #1
 8001218:	430a      	orrs	r2, r1
 800121a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800121c:	4a4f      	ldr	r2, [pc, #316]	; (800135c <HAL_GPIO_Init+0x2c8>)
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	089b      	lsrs	r3, r3, #2
 8001222:	3302      	adds	r3, #2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	589b      	ldr	r3, [r3, r2]
 8001228:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	2203      	movs	r2, #3
 800122e:	4013      	ands	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	220f      	movs	r2, #15
 8001234:	409a      	lsls	r2, r3
 8001236:	0013      	movs	r3, r2
 8001238:	43da      	mvns	r2, r3
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	23a0      	movs	r3, #160	; 0xa0
 8001244:	05db      	lsls	r3, r3, #23
 8001246:	429a      	cmp	r2, r3
 8001248:	d013      	beq.n	8001272 <HAL_GPIO_Init+0x1de>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a44      	ldr	r2, [pc, #272]	; (8001360 <HAL_GPIO_Init+0x2cc>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d00d      	beq.n	800126e <HAL_GPIO_Init+0x1da>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a43      	ldr	r2, [pc, #268]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d007      	beq.n	800126a <HAL_GPIO_Init+0x1d6>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a42      	ldr	r2, [pc, #264]	; (8001368 <HAL_GPIO_Init+0x2d4>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d101      	bne.n	8001266 <HAL_GPIO_Init+0x1d2>
 8001262:	2305      	movs	r3, #5
 8001264:	e006      	b.n	8001274 <HAL_GPIO_Init+0x1e0>
 8001266:	2306      	movs	r3, #6
 8001268:	e004      	b.n	8001274 <HAL_GPIO_Init+0x1e0>
 800126a:	2302      	movs	r3, #2
 800126c:	e002      	b.n	8001274 <HAL_GPIO_Init+0x1e0>
 800126e:	2301      	movs	r3, #1
 8001270:	e000      	b.n	8001274 <HAL_GPIO_Init+0x1e0>
 8001272:	2300      	movs	r3, #0
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	2103      	movs	r1, #3
 8001278:	400a      	ands	r2, r1
 800127a:	0092      	lsls	r2, r2, #2
 800127c:	4093      	lsls	r3, r2
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001284:	4935      	ldr	r1, [pc, #212]	; (800135c <HAL_GPIO_Init+0x2c8>)
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	089b      	lsrs	r3, r3, #2
 800128a:	3302      	adds	r3, #2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001292:	4b36      	ldr	r3, [pc, #216]	; (800136c <HAL_GPIO_Init+0x2d8>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	43da      	mvns	r2, r3
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	2380      	movs	r3, #128	; 0x80
 80012a8:	035b      	lsls	r3, r3, #13
 80012aa:	4013      	ands	r3, r2
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012b6:	4b2d      	ldr	r3, [pc, #180]	; (800136c <HAL_GPIO_Init+0x2d8>)
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012bc:	4b2b      	ldr	r3, [pc, #172]	; (800136c <HAL_GPIO_Init+0x2d8>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	43da      	mvns	r2, r3
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	039b      	lsls	r3, r3, #14
 80012d4:	4013      	ands	r3, r2
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012e0:	4b22      	ldr	r3, [pc, #136]	; (800136c <HAL_GPIO_Init+0x2d8>)
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80012e6:	4b21      	ldr	r3, [pc, #132]	; (800136c <HAL_GPIO_Init+0x2d8>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	43da      	mvns	r2, r3
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	2380      	movs	r3, #128	; 0x80
 80012fc:	029b      	lsls	r3, r3, #10
 80012fe:	4013      	ands	r3, r2
 8001300:	d003      	beq.n	800130a <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4313      	orrs	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <HAL_GPIO_Init+0x2d8>)
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <HAL_GPIO_Init+0x2d8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	43da      	mvns	r2, r3
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	4013      	ands	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	025b      	lsls	r3, r3, #9
 8001328:	4013      	ands	r3, r2
 800132a:	d003      	beq.n	8001334 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001334:	4b0d      	ldr	r3, [pc, #52]	; (800136c <HAL_GPIO_Init+0x2d8>)
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	3301      	adds	r3, #1
 800133e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	40da      	lsrs	r2, r3
 8001348:	1e13      	subs	r3, r2, #0
 800134a:	d000      	beq.n	800134e <HAL_GPIO_Init+0x2ba>
 800134c:	e6ae      	b.n	80010ac <HAL_GPIO_Init+0x18>
  }
}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	46c0      	nop			; (mov r8, r8)
 8001352:	46bd      	mov	sp, r7
 8001354:	b006      	add	sp, #24
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40021000 	.word	0x40021000
 800135c:	40010000 	.word	0x40010000
 8001360:	50000400 	.word	0x50000400
 8001364:	50000800 	.word	0x50000800
 8001368:	50001c00 	.word	0x50001c00
 800136c:	40010400 	.word	0x40010400

08001370 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	000a      	movs	r2, r1
 800137a:	1cbb      	adds	r3, r7, #2
 800137c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	1cba      	adds	r2, r7, #2
 8001384:	8812      	ldrh	r2, [r2, #0]
 8001386:	4013      	ands	r3, r2
 8001388:	d004      	beq.n	8001394 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800138a:	230f      	movs	r3, #15
 800138c:	18fb      	adds	r3, r7, r3
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	e003      	b.n	800139c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001394:	230f      	movs	r3, #15
 8001396:	18fb      	adds	r3, r7, r3
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800139c:	230f      	movs	r3, #15
 800139e:	18fb      	adds	r3, r7, r3
 80013a0:	781b      	ldrb	r3, [r3, #0]
}
 80013a2:	0018      	movs	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	b004      	add	sp, #16
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	0008      	movs	r0, r1
 80013b4:	0011      	movs	r1, r2
 80013b6:	1cbb      	adds	r3, r7, #2
 80013b8:	1c02      	adds	r2, r0, #0
 80013ba:	801a      	strh	r2, [r3, #0]
 80013bc:	1c7b      	adds	r3, r7, #1
 80013be:	1c0a      	adds	r2, r1, #0
 80013c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013c2:	1c7b      	adds	r3, r7, #1
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d004      	beq.n	80013d4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ca:	1cbb      	adds	r3, r7, #2
 80013cc:	881a      	ldrh	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80013d2:	e003      	b.n	80013dc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80013d4:	1cbb      	adds	r3, r7, #2
 80013d6:	881a      	ldrh	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013dc:	46c0      	nop			; (mov r8, r8)
 80013de:	46bd      	mov	sp, r7
 80013e0:	b002      	add	sp, #8
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e4:	b5b0      	push	{r4, r5, r7, lr}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d102      	bne.n	80013f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	f000 fb6c 	bl	8001ad0 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013f8:	4bc8      	ldr	r3, [pc, #800]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	220c      	movs	r2, #12
 80013fe:	4013      	ands	r3, r2
 8001400:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001402:	4bc6      	ldr	r3, [pc, #792]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	025b      	lsls	r3, r3, #9
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2201      	movs	r2, #1
 8001414:	4013      	ands	r3, r2
 8001416:	d100      	bne.n	800141a <HAL_RCC_OscConfig+0x36>
 8001418:	e07d      	b.n	8001516 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	2b08      	cmp	r3, #8
 800141e:	d007      	beq.n	8001430 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	2b0c      	cmp	r3, #12
 8001424:	d112      	bne.n	800144c <HAL_RCC_OscConfig+0x68>
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	2380      	movs	r3, #128	; 0x80
 800142a:	025b      	lsls	r3, r3, #9
 800142c:	429a      	cmp	r2, r3
 800142e:	d10d      	bne.n	800144c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001430:	4bba      	ldr	r3, [pc, #744]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	2380      	movs	r3, #128	; 0x80
 8001436:	029b      	lsls	r3, r3, #10
 8001438:	4013      	ands	r3, r2
 800143a:	d100      	bne.n	800143e <HAL_RCC_OscConfig+0x5a>
 800143c:	e06a      	b.n	8001514 <HAL_RCC_OscConfig+0x130>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d166      	bne.n	8001514 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	f000 fb42 	bl	8001ad0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	025b      	lsls	r3, r3, #9
 8001454:	429a      	cmp	r2, r3
 8001456:	d107      	bne.n	8001468 <HAL_RCC_OscConfig+0x84>
 8001458:	4bb0      	ldr	r3, [pc, #704]	; (800171c <HAL_RCC_OscConfig+0x338>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4baf      	ldr	r3, [pc, #700]	; (800171c <HAL_RCC_OscConfig+0x338>)
 800145e:	2180      	movs	r1, #128	; 0x80
 8001460:	0249      	lsls	r1, r1, #9
 8001462:	430a      	orrs	r2, r1
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	e027      	b.n	80014b8 <HAL_RCC_OscConfig+0xd4>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	23a0      	movs	r3, #160	; 0xa0
 800146e:	02db      	lsls	r3, r3, #11
 8001470:	429a      	cmp	r2, r3
 8001472:	d10e      	bne.n	8001492 <HAL_RCC_OscConfig+0xae>
 8001474:	4ba9      	ldr	r3, [pc, #676]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4ba8      	ldr	r3, [pc, #672]	; (800171c <HAL_RCC_OscConfig+0x338>)
 800147a:	2180      	movs	r1, #128	; 0x80
 800147c:	02c9      	lsls	r1, r1, #11
 800147e:	430a      	orrs	r2, r1
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	4ba6      	ldr	r3, [pc, #664]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	4ba5      	ldr	r3, [pc, #660]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001488:	2180      	movs	r1, #128	; 0x80
 800148a:	0249      	lsls	r1, r1, #9
 800148c:	430a      	orrs	r2, r1
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	e012      	b.n	80014b8 <HAL_RCC_OscConfig+0xd4>
 8001492:	4ba2      	ldr	r3, [pc, #648]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	4ba1      	ldr	r3, [pc, #644]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001498:	49a1      	ldr	r1, [pc, #644]	; (8001720 <HAL_RCC_OscConfig+0x33c>)
 800149a:	400a      	ands	r2, r1
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	4b9f      	ldr	r3, [pc, #636]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	025b      	lsls	r3, r3, #9
 80014a6:	4013      	ands	r3, r2
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4b9b      	ldr	r3, [pc, #620]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b9a      	ldr	r3, [pc, #616]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80014b2:	499c      	ldr	r1, [pc, #624]	; (8001724 <HAL_RCC_OscConfig+0x340>)
 80014b4:	400a      	ands	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d014      	beq.n	80014ea <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7ff fd2a 	bl	8000f18 <HAL_GetTick>
 80014c4:	0003      	movs	r3, r0
 80014c6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ca:	f7ff fd25 	bl	8000f18 <HAL_GetTick>
 80014ce:	0002      	movs	r2, r0
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b64      	cmp	r3, #100	; 0x64
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e2f9      	b.n	8001ad0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014dc:	4b8f      	ldr	r3, [pc, #572]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	029b      	lsls	r3, r3, #10
 80014e4:	4013      	ands	r3, r2
 80014e6:	d0f0      	beq.n	80014ca <HAL_RCC_OscConfig+0xe6>
 80014e8:	e015      	b.n	8001516 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ea:	f7ff fd15 	bl	8000f18 <HAL_GetTick>
 80014ee:	0003      	movs	r3, r0
 80014f0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f4:	f7ff fd10 	bl	8000f18 <HAL_GetTick>
 80014f8:	0002      	movs	r2, r0
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b64      	cmp	r3, #100	; 0x64
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e2e4      	b.n	8001ad0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001506:	4b85      	ldr	r3, [pc, #532]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	029b      	lsls	r3, r3, #10
 800150e:	4013      	ands	r3, r2
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x110>
 8001512:	e000      	b.n	8001516 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001514:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2202      	movs	r2, #2
 800151c:	4013      	ands	r3, r2
 800151e:	d100      	bne.n	8001522 <HAL_RCC_OscConfig+0x13e>
 8001520:	e099      	b.n	8001656 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	2220      	movs	r2, #32
 800152c:	4013      	ands	r3, r2
 800152e:	d009      	beq.n	8001544 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001530:	4b7a      	ldr	r3, [pc, #488]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b79      	ldr	r3, [pc, #484]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001536:	2120      	movs	r1, #32
 8001538:	430a      	orrs	r2, r1
 800153a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	2220      	movs	r2, #32
 8001540:	4393      	bics	r3, r2
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	2b04      	cmp	r3, #4
 8001548:	d005      	beq.n	8001556 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	2b0c      	cmp	r3, #12
 800154e:	d13e      	bne.n	80015ce <HAL_RCC_OscConfig+0x1ea>
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d13b      	bne.n	80015ce <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001556:	4b71      	ldr	r3, [pc, #452]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2204      	movs	r2, #4
 800155c:	4013      	ands	r3, r2
 800155e:	d004      	beq.n	800156a <HAL_RCC_OscConfig+0x186>
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e2b2      	b.n	8001ad0 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156a:	4b6c      	ldr	r3, [pc, #432]	; (800171c <HAL_RCC_OscConfig+0x338>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	4a6e      	ldr	r2, [pc, #440]	; (8001728 <HAL_RCC_OscConfig+0x344>)
 8001570:	4013      	ands	r3, r2
 8001572:	0019      	movs	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	021a      	lsls	r2, r3, #8
 800157a:	4b68      	ldr	r3, [pc, #416]	; (800171c <HAL_RCC_OscConfig+0x338>)
 800157c:	430a      	orrs	r2, r1
 800157e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001580:	4b66      	ldr	r3, [pc, #408]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2209      	movs	r2, #9
 8001586:	4393      	bics	r3, r2
 8001588:	0019      	movs	r1, r3
 800158a:	4b64      	ldr	r3, [pc, #400]	; (800171c <HAL_RCC_OscConfig+0x338>)
 800158c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800158e:	430a      	orrs	r2, r1
 8001590:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001592:	f000 fbeb 	bl	8001d6c <HAL_RCC_GetSysClockFreq>
 8001596:	0001      	movs	r1, r0
 8001598:	4b60      	ldr	r3, [pc, #384]	; (800171c <HAL_RCC_OscConfig+0x338>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	091b      	lsrs	r3, r3, #4
 800159e:	220f      	movs	r2, #15
 80015a0:	4013      	ands	r3, r2
 80015a2:	4a62      	ldr	r2, [pc, #392]	; (800172c <HAL_RCC_OscConfig+0x348>)
 80015a4:	5cd3      	ldrb	r3, [r2, r3]
 80015a6:	000a      	movs	r2, r1
 80015a8:	40da      	lsrs	r2, r3
 80015aa:	4b61      	ldr	r3, [pc, #388]	; (8001730 <HAL_RCC_OscConfig+0x34c>)
 80015ac:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80015ae:	4b61      	ldr	r3, [pc, #388]	; (8001734 <HAL_RCC_OscConfig+0x350>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2513      	movs	r5, #19
 80015b4:	197c      	adds	r4, r7, r5
 80015b6:	0018      	movs	r0, r3
 80015b8:	f7ff fc68 	bl	8000e8c <HAL_InitTick>
 80015bc:	0003      	movs	r3, r0
 80015be:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80015c0:	197b      	adds	r3, r7, r5
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d046      	beq.n	8001656 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80015c8:	197b      	adds	r3, r7, r5
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	e280      	b.n	8001ad0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d027      	beq.n	8001624 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80015d4:	4b51      	ldr	r3, [pc, #324]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2209      	movs	r2, #9
 80015da:	4393      	bics	r3, r2
 80015dc:	0019      	movs	r1, r3
 80015de:	4b4f      	ldr	r3, [pc, #316]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80015e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e2:	430a      	orrs	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e6:	f7ff fc97 	bl	8000f18 <HAL_GetTick>
 80015ea:	0003      	movs	r3, r0
 80015ec:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f0:	f7ff fc92 	bl	8000f18 <HAL_GetTick>
 80015f4:	0002      	movs	r2, r0
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e266      	b.n	8001ad0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001602:	4b46      	ldr	r3, [pc, #280]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2204      	movs	r2, #4
 8001608:	4013      	ands	r3, r2
 800160a:	d0f1      	beq.n	80015f0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160c:	4b43      	ldr	r3, [pc, #268]	; (800171c <HAL_RCC_OscConfig+0x338>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	4a45      	ldr	r2, [pc, #276]	; (8001728 <HAL_RCC_OscConfig+0x344>)
 8001612:	4013      	ands	r3, r2
 8001614:	0019      	movs	r1, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	021a      	lsls	r2, r3, #8
 800161c:	4b3f      	ldr	r3, [pc, #252]	; (800171c <HAL_RCC_OscConfig+0x338>)
 800161e:	430a      	orrs	r2, r1
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	e018      	b.n	8001656 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001624:	4b3d      	ldr	r3, [pc, #244]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b3c      	ldr	r3, [pc, #240]	; (800171c <HAL_RCC_OscConfig+0x338>)
 800162a:	2101      	movs	r1, #1
 800162c:	438a      	bics	r2, r1
 800162e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001630:	f7ff fc72 	bl	8000f18 <HAL_GetTick>
 8001634:	0003      	movs	r3, r0
 8001636:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800163a:	f7ff fc6d 	bl	8000f18 <HAL_GetTick>
 800163e:	0002      	movs	r2, r0
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e241      	b.n	8001ad0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800164c:	4b33      	ldr	r3, [pc, #204]	; (800171c <HAL_RCC_OscConfig+0x338>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2204      	movs	r2, #4
 8001652:	4013      	ands	r3, r2
 8001654:	d1f1      	bne.n	800163a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2210      	movs	r2, #16
 800165c:	4013      	ands	r3, r2
 800165e:	d100      	bne.n	8001662 <HAL_RCC_OscConfig+0x27e>
 8001660:	e0a1      	b.n	80017a6 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d140      	bne.n	80016ea <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001668:	4b2c      	ldr	r3, [pc, #176]	; (800171c <HAL_RCC_OscConfig+0x338>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4013      	ands	r3, r2
 8001672:	d005      	beq.n	8001680 <HAL_RCC_OscConfig+0x29c>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e227      	b.n	8001ad0 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001680:	4b26      	ldr	r3, [pc, #152]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	4a2c      	ldr	r2, [pc, #176]	; (8001738 <HAL_RCC_OscConfig+0x354>)
 8001686:	4013      	ands	r3, r2
 8001688:	0019      	movs	r1, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a1a      	ldr	r2, [r3, #32]
 800168e:	4b23      	ldr	r3, [pc, #140]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001690:	430a      	orrs	r2, r1
 8001692:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001694:	4b21      	ldr	r3, [pc, #132]	; (800171c <HAL_RCC_OscConfig+0x338>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	021b      	lsls	r3, r3, #8
 800169a:	0a19      	lsrs	r1, r3, #8
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	061a      	lsls	r2, r3, #24
 80016a2:	4b1e      	ldr	r3, [pc, #120]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80016a4:	430a      	orrs	r2, r1
 80016a6:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	0b5b      	lsrs	r3, r3, #13
 80016ae:	3301      	adds	r3, #1
 80016b0:	2280      	movs	r2, #128	; 0x80
 80016b2:	0212      	lsls	r2, r2, #8
 80016b4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80016b6:	4b19      	ldr	r3, [pc, #100]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	091b      	lsrs	r3, r3, #4
 80016bc:	210f      	movs	r1, #15
 80016be:	400b      	ands	r3, r1
 80016c0:	491a      	ldr	r1, [pc, #104]	; (800172c <HAL_RCC_OscConfig+0x348>)
 80016c2:	5ccb      	ldrb	r3, [r1, r3]
 80016c4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016c6:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <HAL_RCC_OscConfig+0x34c>)
 80016c8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_RCC_OscConfig+0x350>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2513      	movs	r5, #19
 80016d0:	197c      	adds	r4, r7, r5
 80016d2:	0018      	movs	r0, r3
 80016d4:	f7ff fbda 	bl	8000e8c <HAL_InitTick>
 80016d8:	0003      	movs	r3, r0
 80016da:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80016dc:	197b      	adds	r3, r7, r5
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d060      	beq.n	80017a6 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80016e4:	197b      	adds	r3, r7, r5
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	e1f2      	b.n	8001ad0 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d03f      	beq.n	8001772 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016f2:	4b0a      	ldr	r3, [pc, #40]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80016f8:	2180      	movs	r1, #128	; 0x80
 80016fa:	0049      	lsls	r1, r1, #1
 80016fc:	430a      	orrs	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7ff fc0a 	bl	8000f18 <HAL_GetTick>
 8001704:	0003      	movs	r3, r0
 8001706:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001708:	e018      	b.n	800173c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800170a:	f7ff fc05 	bl	8000f18 <HAL_GetTick>
 800170e:	0002      	movs	r2, r0
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d911      	bls.n	800173c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e1d9      	b.n	8001ad0 <HAL_RCC_OscConfig+0x6ec>
 800171c:	40021000 	.word	0x40021000
 8001720:	fffeffff 	.word	0xfffeffff
 8001724:	fffbffff 	.word	0xfffbffff
 8001728:	ffffe0ff 	.word	0xffffe0ff
 800172c:	080033fc 	.word	0x080033fc
 8001730:	20000000 	.word	0x20000000
 8001734:	20000004 	.word	0x20000004
 8001738:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800173c:	4bc9      	ldr	r3, [pc, #804]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4013      	ands	r3, r2
 8001746:	d0e0      	beq.n	800170a <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001748:	4bc6      	ldr	r3, [pc, #792]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	4ac6      	ldr	r2, [pc, #792]	; (8001a68 <HAL_RCC_OscConfig+0x684>)
 800174e:	4013      	ands	r3, r2
 8001750:	0019      	movs	r1, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a1a      	ldr	r2, [r3, #32]
 8001756:	4bc3      	ldr	r3, [pc, #780]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 8001758:	430a      	orrs	r2, r1
 800175a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800175c:	4bc1      	ldr	r3, [pc, #772]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	021b      	lsls	r3, r3, #8
 8001762:	0a19      	lsrs	r1, r3, #8
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	69db      	ldr	r3, [r3, #28]
 8001768:	061a      	lsls	r2, r3, #24
 800176a:	4bbe      	ldr	r3, [pc, #760]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 800176c:	430a      	orrs	r2, r1
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	e019      	b.n	80017a6 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001772:	4bbc      	ldr	r3, [pc, #752]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	4bbb      	ldr	r3, [pc, #748]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 8001778:	49bc      	ldr	r1, [pc, #752]	; (8001a6c <HAL_RCC_OscConfig+0x688>)
 800177a:	400a      	ands	r2, r1
 800177c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177e:	f7ff fbcb 	bl	8000f18 <HAL_GetTick>
 8001782:	0003      	movs	r3, r0
 8001784:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001788:	f7ff fbc6 	bl	8000f18 <HAL_GetTick>
 800178c:	0002      	movs	r2, r0
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e19a      	b.n	8001ad0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800179a:	4bb2      	ldr	r3, [pc, #712]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4013      	ands	r3, r2
 80017a4:	d1f0      	bne.n	8001788 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2208      	movs	r2, #8
 80017ac:	4013      	ands	r3, r2
 80017ae:	d036      	beq.n	800181e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d019      	beq.n	80017ec <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b8:	4baa      	ldr	r3, [pc, #680]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 80017ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017bc:	4ba9      	ldr	r3, [pc, #676]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 80017be:	2101      	movs	r1, #1
 80017c0:	430a      	orrs	r2, r1
 80017c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c4:	f7ff fba8 	bl	8000f18 <HAL_GetTick>
 80017c8:	0003      	movs	r3, r0
 80017ca:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ce:	f7ff fba3 	bl	8000f18 <HAL_GetTick>
 80017d2:	0002      	movs	r2, r0
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e177      	b.n	8001ad0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017e0:	4ba0      	ldr	r3, [pc, #640]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 80017e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017e4:	2202      	movs	r2, #2
 80017e6:	4013      	ands	r3, r2
 80017e8:	d0f1      	beq.n	80017ce <HAL_RCC_OscConfig+0x3ea>
 80017ea:	e018      	b.n	800181e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ec:	4b9d      	ldr	r3, [pc, #628]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 80017ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017f0:	4b9c      	ldr	r3, [pc, #624]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 80017f2:	2101      	movs	r1, #1
 80017f4:	438a      	bics	r2, r1
 80017f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f8:	f7ff fb8e 	bl	8000f18 <HAL_GetTick>
 80017fc:	0003      	movs	r3, r0
 80017fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001802:	f7ff fb89 	bl	8000f18 <HAL_GetTick>
 8001806:	0002      	movs	r2, r0
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e15d      	b.n	8001ad0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001814:	4b93      	ldr	r3, [pc, #588]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 8001816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001818:	2202      	movs	r2, #2
 800181a:	4013      	ands	r3, r2
 800181c:	d1f1      	bne.n	8001802 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2204      	movs	r2, #4
 8001824:	4013      	ands	r3, r2
 8001826:	d100      	bne.n	800182a <HAL_RCC_OscConfig+0x446>
 8001828:	e0ae      	b.n	8001988 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800182a:	2023      	movs	r0, #35	; 0x23
 800182c:	183b      	adds	r3, r7, r0
 800182e:	2200      	movs	r2, #0
 8001830:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001832:	4b8c      	ldr	r3, [pc, #560]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 8001834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001836:	2380      	movs	r3, #128	; 0x80
 8001838:	055b      	lsls	r3, r3, #21
 800183a:	4013      	ands	r3, r2
 800183c:	d109      	bne.n	8001852 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800183e:	4b89      	ldr	r3, [pc, #548]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 8001840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001842:	4b88      	ldr	r3, [pc, #544]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 8001844:	2180      	movs	r1, #128	; 0x80
 8001846:	0549      	lsls	r1, r1, #21
 8001848:	430a      	orrs	r2, r1
 800184a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800184c:	183b      	adds	r3, r7, r0
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001852:	4b87      	ldr	r3, [pc, #540]	; (8001a70 <HAL_RCC_OscConfig+0x68c>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	2380      	movs	r3, #128	; 0x80
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	4013      	ands	r3, r2
 800185c:	d11a      	bne.n	8001894 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800185e:	4b84      	ldr	r3, [pc, #528]	; (8001a70 <HAL_RCC_OscConfig+0x68c>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4b83      	ldr	r3, [pc, #524]	; (8001a70 <HAL_RCC_OscConfig+0x68c>)
 8001864:	2180      	movs	r1, #128	; 0x80
 8001866:	0049      	lsls	r1, r1, #1
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800186c:	f7ff fb54 	bl	8000f18 <HAL_GetTick>
 8001870:	0003      	movs	r3, r0
 8001872:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001876:	f7ff fb4f 	bl	8000f18 <HAL_GetTick>
 800187a:	0002      	movs	r2, r0
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b64      	cmp	r3, #100	; 0x64
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e123      	b.n	8001ad0 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001888:	4b79      	ldr	r3, [pc, #484]	; (8001a70 <HAL_RCC_OscConfig+0x68c>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4013      	ands	r3, r2
 8001892:	d0f0      	beq.n	8001876 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	429a      	cmp	r2, r3
 800189e:	d107      	bne.n	80018b0 <HAL_RCC_OscConfig+0x4cc>
 80018a0:	4b70      	ldr	r3, [pc, #448]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 80018a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018a4:	4b6f      	ldr	r3, [pc, #444]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 80018a6:	2180      	movs	r1, #128	; 0x80
 80018a8:	0049      	lsls	r1, r1, #1
 80018aa:	430a      	orrs	r2, r1
 80018ac:	651a      	str	r2, [r3, #80]	; 0x50
 80018ae:	e031      	b.n	8001914 <HAL_RCC_OscConfig+0x530>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10c      	bne.n	80018d2 <HAL_RCC_OscConfig+0x4ee>
 80018b8:	4b6a      	ldr	r3, [pc, #424]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 80018ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018bc:	4b69      	ldr	r3, [pc, #420]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 80018be:	496b      	ldr	r1, [pc, #428]	; (8001a6c <HAL_RCC_OscConfig+0x688>)
 80018c0:	400a      	ands	r2, r1
 80018c2:	651a      	str	r2, [r3, #80]	; 0x50
 80018c4:	4b67      	ldr	r3, [pc, #412]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 80018c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018c8:	4b66      	ldr	r3, [pc, #408]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 80018ca:	496a      	ldr	r1, [pc, #424]	; (8001a74 <HAL_RCC_OscConfig+0x690>)
 80018cc:	400a      	ands	r2, r1
 80018ce:	651a      	str	r2, [r3, #80]	; 0x50
 80018d0:	e020      	b.n	8001914 <HAL_RCC_OscConfig+0x530>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	23a0      	movs	r3, #160	; 0xa0
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	429a      	cmp	r2, r3
 80018dc:	d10e      	bne.n	80018fc <HAL_RCC_OscConfig+0x518>
 80018de:	4b61      	ldr	r3, [pc, #388]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 80018e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018e2:	4b60      	ldr	r3, [pc, #384]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 80018e4:	2180      	movs	r1, #128	; 0x80
 80018e6:	00c9      	lsls	r1, r1, #3
 80018e8:	430a      	orrs	r2, r1
 80018ea:	651a      	str	r2, [r3, #80]	; 0x50
 80018ec:	4b5d      	ldr	r3, [pc, #372]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 80018ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018f0:	4b5c      	ldr	r3, [pc, #368]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 80018f2:	2180      	movs	r1, #128	; 0x80
 80018f4:	0049      	lsls	r1, r1, #1
 80018f6:	430a      	orrs	r2, r1
 80018f8:	651a      	str	r2, [r3, #80]	; 0x50
 80018fa:	e00b      	b.n	8001914 <HAL_RCC_OscConfig+0x530>
 80018fc:	4b59      	ldr	r3, [pc, #356]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 80018fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001900:	4b58      	ldr	r3, [pc, #352]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 8001902:	495a      	ldr	r1, [pc, #360]	; (8001a6c <HAL_RCC_OscConfig+0x688>)
 8001904:	400a      	ands	r2, r1
 8001906:	651a      	str	r2, [r3, #80]	; 0x50
 8001908:	4b56      	ldr	r3, [pc, #344]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 800190a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800190c:	4b55      	ldr	r3, [pc, #340]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 800190e:	4959      	ldr	r1, [pc, #356]	; (8001a74 <HAL_RCC_OscConfig+0x690>)
 8001910:	400a      	ands	r2, r1
 8001912:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d015      	beq.n	8001948 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191c:	f7ff fafc 	bl	8000f18 <HAL_GetTick>
 8001920:	0003      	movs	r3, r0
 8001922:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001924:	e009      	b.n	800193a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001926:	f7ff faf7 	bl	8000f18 <HAL_GetTick>
 800192a:	0002      	movs	r2, r0
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	4a51      	ldr	r2, [pc, #324]	; (8001a78 <HAL_RCC_OscConfig+0x694>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e0ca      	b.n	8001ad0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800193a:	4b4a      	ldr	r3, [pc, #296]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 800193c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4013      	ands	r3, r2
 8001944:	d0ef      	beq.n	8001926 <HAL_RCC_OscConfig+0x542>
 8001946:	e014      	b.n	8001972 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001948:	f7ff fae6 	bl	8000f18 <HAL_GetTick>
 800194c:	0003      	movs	r3, r0
 800194e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001950:	e009      	b.n	8001966 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001952:	f7ff fae1 	bl	8000f18 <HAL_GetTick>
 8001956:	0002      	movs	r2, r0
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	4a46      	ldr	r2, [pc, #280]	; (8001a78 <HAL_RCC_OscConfig+0x694>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e0b4      	b.n	8001ad0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001966:	4b3f      	ldr	r3, [pc, #252]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 8001968:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800196a:	2380      	movs	r3, #128	; 0x80
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4013      	ands	r3, r2
 8001970:	d1ef      	bne.n	8001952 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001972:	2323      	movs	r3, #35	; 0x23
 8001974:	18fb      	adds	r3, r7, r3
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d105      	bne.n	8001988 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800197c:	4b39      	ldr	r3, [pc, #228]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 800197e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001980:	4b38      	ldr	r3, [pc, #224]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 8001982:	493e      	ldr	r1, [pc, #248]	; (8001a7c <HAL_RCC_OscConfig+0x698>)
 8001984:	400a      	ands	r2, r1
 8001986:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	2b00      	cmp	r3, #0
 800198e:	d100      	bne.n	8001992 <HAL_RCC_OscConfig+0x5ae>
 8001990:	e09d      	b.n	8001ace <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	2b0c      	cmp	r3, #12
 8001996:	d100      	bne.n	800199a <HAL_RCC_OscConfig+0x5b6>
 8001998:	e076      	b.n	8001a88 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d145      	bne.n	8001a2e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a2:	4b30      	ldr	r3, [pc, #192]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	4b2f      	ldr	r3, [pc, #188]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 80019a8:	4935      	ldr	r1, [pc, #212]	; (8001a80 <HAL_RCC_OscConfig+0x69c>)
 80019aa:	400a      	ands	r2, r1
 80019ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ae:	f7ff fab3 	bl	8000f18 <HAL_GetTick>
 80019b2:	0003      	movs	r3, r0
 80019b4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b8:	f7ff faae 	bl	8000f18 <HAL_GetTick>
 80019bc:	0002      	movs	r2, r0
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e082      	b.n	8001ad0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019ca:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	2380      	movs	r3, #128	; 0x80
 80019d0:	049b      	lsls	r3, r3, #18
 80019d2:	4013      	ands	r3, r2
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019d6:	4b23      	ldr	r3, [pc, #140]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	4a2a      	ldr	r2, [pc, #168]	; (8001a84 <HAL_RCC_OscConfig+0x6a0>)
 80019dc:	4013      	ands	r3, r2
 80019de:	0019      	movs	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	431a      	orrs	r2, r3
 80019f0:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 80019f2:	430a      	orrs	r2, r1
 80019f4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f6:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 80019fc:	2180      	movs	r1, #128	; 0x80
 80019fe:	0449      	lsls	r1, r1, #17
 8001a00:	430a      	orrs	r2, r1
 8001a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a04:	f7ff fa88 	bl	8000f18 <HAL_GetTick>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a0e:	f7ff fa83 	bl	8000f18 <HAL_GetTick>
 8001a12:	0002      	movs	r2, r0
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e057      	b.n	8001ad0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a20:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	049b      	lsls	r3, r3, #18
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x62a>
 8001a2c:	e04f      	b.n	8001ace <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 8001a34:	4912      	ldr	r1, [pc, #72]	; (8001a80 <HAL_RCC_OscConfig+0x69c>)
 8001a36:	400a      	ands	r2, r1
 8001a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3a:	f7ff fa6d 	bl	8000f18 <HAL_GetTick>
 8001a3e:	0003      	movs	r3, r0
 8001a40:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a44:	f7ff fa68 	bl	8000f18 <HAL_GetTick>
 8001a48:	0002      	movs	r2, r0
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e03c      	b.n	8001ad0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a56:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <HAL_RCC_OscConfig+0x680>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	049b      	lsls	r3, r3, #18
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x660>
 8001a62:	e034      	b.n	8001ace <HAL_RCC_OscConfig+0x6ea>
 8001a64:	40021000 	.word	0x40021000
 8001a68:	ffff1fff 	.word	0xffff1fff
 8001a6c:	fffffeff 	.word	0xfffffeff
 8001a70:	40007000 	.word	0x40007000
 8001a74:	fffffbff 	.word	0xfffffbff
 8001a78:	00001388 	.word	0x00001388
 8001a7c:	efffffff 	.word	0xefffffff
 8001a80:	feffffff 	.word	0xfeffffff
 8001a84:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e01d      	b.n	8001ad0 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a94:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <HAL_RCC_OscConfig+0x6f4>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	025b      	lsls	r3, r3, #9
 8001aa0:	401a      	ands	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d10f      	bne.n	8001aca <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	23f0      	movs	r3, #240	; 0xf0
 8001aae:	039b      	lsls	r3, r3, #14
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d107      	bne.n	8001aca <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	23c0      	movs	r3, #192	; 0xc0
 8001abe:	041b      	lsls	r3, r3, #16
 8001ac0:	401a      	ands	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d001      	beq.n	8001ace <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b00a      	add	sp, #40	; 0x28
 8001ad6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ad8:	40021000 	.word	0x40021000

08001adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001adc:	b5b0      	push	{r4, r5, r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e128      	b.n	8001d42 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001af0:	4b96      	ldr	r3, [pc, #600]	; (8001d4c <HAL_RCC_ClockConfig+0x270>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2201      	movs	r2, #1
 8001af6:	4013      	ands	r3, r2
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d91e      	bls.n	8001b3c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afe:	4b93      	ldr	r3, [pc, #588]	; (8001d4c <HAL_RCC_ClockConfig+0x270>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2201      	movs	r2, #1
 8001b04:	4393      	bics	r3, r2
 8001b06:	0019      	movs	r1, r3
 8001b08:	4b90      	ldr	r3, [pc, #576]	; (8001d4c <HAL_RCC_ClockConfig+0x270>)
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b10:	f7ff fa02 	bl	8000f18 <HAL_GetTick>
 8001b14:	0003      	movs	r3, r0
 8001b16:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b18:	e009      	b.n	8001b2e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b1a:	f7ff f9fd 	bl	8000f18 <HAL_GetTick>
 8001b1e:	0002      	movs	r2, r0
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	4a8a      	ldr	r2, [pc, #552]	; (8001d50 <HAL_RCC_ClockConfig+0x274>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e109      	b.n	8001d42 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2e:	4b87      	ldr	r3, [pc, #540]	; (8001d4c <HAL_RCC_ClockConfig+0x270>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2201      	movs	r2, #1
 8001b34:	4013      	ands	r3, r2
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d1ee      	bne.n	8001b1a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2202      	movs	r2, #2
 8001b42:	4013      	ands	r3, r2
 8001b44:	d009      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b46:	4b83      	ldr	r3, [pc, #524]	; (8001d54 <HAL_RCC_ClockConfig+0x278>)
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	22f0      	movs	r2, #240	; 0xf0
 8001b4c:	4393      	bics	r3, r2
 8001b4e:	0019      	movs	r1, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	4b7f      	ldr	r3, [pc, #508]	; (8001d54 <HAL_RCC_ClockConfig+0x278>)
 8001b56:	430a      	orrs	r2, r1
 8001b58:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	4013      	ands	r3, r2
 8001b62:	d100      	bne.n	8001b66 <HAL_RCC_ClockConfig+0x8a>
 8001b64:	e089      	b.n	8001c7a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d107      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b6e:	4b79      	ldr	r3, [pc, #484]	; (8001d54 <HAL_RCC_ClockConfig+0x278>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	2380      	movs	r3, #128	; 0x80
 8001b74:	029b      	lsls	r3, r3, #10
 8001b76:	4013      	ands	r3, r2
 8001b78:	d120      	bne.n	8001bbc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e0e1      	b.n	8001d42 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b86:	4b73      	ldr	r3, [pc, #460]	; (8001d54 <HAL_RCC_ClockConfig+0x278>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	2380      	movs	r3, #128	; 0x80
 8001b8c:	049b      	lsls	r3, r3, #18
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d114      	bne.n	8001bbc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e0d5      	b.n	8001d42 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d106      	bne.n	8001bac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b9e:	4b6d      	ldr	r3, [pc, #436]	; (8001d54 <HAL_RCC_ClockConfig+0x278>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d109      	bne.n	8001bbc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0ca      	b.n	8001d42 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001bac:	4b69      	ldr	r3, [pc, #420]	; (8001d54 <HAL_RCC_ClockConfig+0x278>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0c2      	b.n	8001d42 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bbc:	4b65      	ldr	r3, [pc, #404]	; (8001d54 <HAL_RCC_ClockConfig+0x278>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	4393      	bics	r3, r2
 8001bc4:	0019      	movs	r1, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	4b62      	ldr	r3, [pc, #392]	; (8001d54 <HAL_RCC_ClockConfig+0x278>)
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd0:	f7ff f9a2 	bl	8000f18 <HAL_GetTick>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d111      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001be0:	e009      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be2:	f7ff f999 	bl	8000f18 <HAL_GetTick>
 8001be6:	0002      	movs	r2, r0
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	4a58      	ldr	r2, [pc, #352]	; (8001d50 <HAL_RCC_ClockConfig+0x274>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e0a5      	b.n	8001d42 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bf6:	4b57      	ldr	r3, [pc, #348]	; (8001d54 <HAL_RCC_ClockConfig+0x278>)
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d1ef      	bne.n	8001be2 <HAL_RCC_ClockConfig+0x106>
 8001c02:	e03a      	b.n	8001c7a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b03      	cmp	r3, #3
 8001c0a:	d111      	bne.n	8001c30 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c0c:	e009      	b.n	8001c22 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0e:	f7ff f983 	bl	8000f18 <HAL_GetTick>
 8001c12:	0002      	movs	r2, r0
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	4a4d      	ldr	r2, [pc, #308]	; (8001d50 <HAL_RCC_ClockConfig+0x274>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e08f      	b.n	8001d42 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c22:	4b4c      	ldr	r3, [pc, #304]	; (8001d54 <HAL_RCC_ClockConfig+0x278>)
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	220c      	movs	r2, #12
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b0c      	cmp	r3, #12
 8001c2c:	d1ef      	bne.n	8001c0e <HAL_RCC_ClockConfig+0x132>
 8001c2e:	e024      	b.n	8001c7a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d11b      	bne.n	8001c70 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c38:	e009      	b.n	8001c4e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c3a:	f7ff f96d 	bl	8000f18 <HAL_GetTick>
 8001c3e:	0002      	movs	r2, r0
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	4a42      	ldr	r2, [pc, #264]	; (8001d50 <HAL_RCC_ClockConfig+0x274>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e079      	b.n	8001d42 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c4e:	4b41      	ldr	r3, [pc, #260]	; (8001d54 <HAL_RCC_ClockConfig+0x278>)
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	220c      	movs	r2, #12
 8001c54:	4013      	ands	r3, r2
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d1ef      	bne.n	8001c3a <HAL_RCC_ClockConfig+0x15e>
 8001c5a:	e00e      	b.n	8001c7a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c5c:	f7ff f95c 	bl	8000f18 <HAL_GetTick>
 8001c60:	0002      	movs	r2, r0
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	4a3a      	ldr	r2, [pc, #232]	; (8001d50 <HAL_RCC_ClockConfig+0x274>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e068      	b.n	8001d42 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c70:	4b38      	ldr	r3, [pc, #224]	; (8001d54 <HAL_RCC_ClockConfig+0x278>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	220c      	movs	r2, #12
 8001c76:	4013      	ands	r3, r2
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c7a:	4b34      	ldr	r3, [pc, #208]	; (8001d4c <HAL_RCC_ClockConfig+0x270>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	4013      	ands	r3, r2
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d21e      	bcs.n	8001cc6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c88:	4b30      	ldr	r3, [pc, #192]	; (8001d4c <HAL_RCC_ClockConfig+0x270>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	4393      	bics	r3, r2
 8001c90:	0019      	movs	r1, r3
 8001c92:	4b2e      	ldr	r3, [pc, #184]	; (8001d4c <HAL_RCC_ClockConfig+0x270>)
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c9a:	f7ff f93d 	bl	8000f18 <HAL_GetTick>
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca2:	e009      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca4:	f7ff f938 	bl	8000f18 <HAL_GetTick>
 8001ca8:	0002      	movs	r2, r0
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	4a28      	ldr	r2, [pc, #160]	; (8001d50 <HAL_RCC_ClockConfig+0x274>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e044      	b.n	8001d42 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb8:	4b24      	ldr	r3, [pc, #144]	; (8001d4c <HAL_RCC_ClockConfig+0x270>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d1ee      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2204      	movs	r2, #4
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d009      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd0:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <HAL_RCC_ClockConfig+0x278>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	4a20      	ldr	r2, [pc, #128]	; (8001d58 <HAL_RCC_ClockConfig+0x27c>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	0019      	movs	r1, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <HAL_RCC_ClockConfig+0x278>)
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2208      	movs	r2, #8
 8001cea:	4013      	ands	r3, r2
 8001cec:	d00a      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cee:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_RCC_ClockConfig+0x278>)
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	4a1a      	ldr	r2, [pc, #104]	; (8001d5c <HAL_RCC_ClockConfig+0x280>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	0019      	movs	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	00da      	lsls	r2, r3, #3
 8001cfe:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <HAL_RCC_ClockConfig+0x278>)
 8001d00:	430a      	orrs	r2, r1
 8001d02:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d04:	f000 f832 	bl	8001d6c <HAL_RCC_GetSysClockFreq>
 8001d08:	0001      	movs	r1, r0
 8001d0a:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_RCC_ClockConfig+0x278>)
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	091b      	lsrs	r3, r3, #4
 8001d10:	220f      	movs	r2, #15
 8001d12:	4013      	ands	r3, r2
 8001d14:	4a12      	ldr	r2, [pc, #72]	; (8001d60 <HAL_RCC_ClockConfig+0x284>)
 8001d16:	5cd3      	ldrb	r3, [r2, r3]
 8001d18:	000a      	movs	r2, r1
 8001d1a:	40da      	lsrs	r2, r3
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <HAL_RCC_ClockConfig+0x288>)
 8001d1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d20:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <HAL_RCC_ClockConfig+0x28c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	250b      	movs	r5, #11
 8001d26:	197c      	adds	r4, r7, r5
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f7ff f8af 	bl	8000e8c <HAL_InitTick>
 8001d2e:	0003      	movs	r3, r0
 8001d30:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001d32:	197b      	adds	r3, r7, r5
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d002      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001d3a:	197b      	adds	r3, r7, r5
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	e000      	b.n	8001d42 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	0018      	movs	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	b004      	add	sp, #16
 8001d48:	bdb0      	pop	{r4, r5, r7, pc}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	40022000 	.word	0x40022000
 8001d50:	00001388 	.word	0x00001388
 8001d54:	40021000 	.word	0x40021000
 8001d58:	fffff8ff 	.word	0xfffff8ff
 8001d5c:	ffffc7ff 	.word	0xffffc7ff
 8001d60:	080033fc 	.word	0x080033fc
 8001d64:	20000000 	.word	0x20000000
 8001d68:	20000004 	.word	0x20000004

08001d6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d6c:	b5b0      	push	{r4, r5, r7, lr}
 8001d6e:	b08e      	sub	sp, #56	; 0x38
 8001d70:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001d72:	4b4c      	ldr	r3, [pc, #304]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d7a:	230c      	movs	r3, #12
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2b0c      	cmp	r3, #12
 8001d80:	d014      	beq.n	8001dac <HAL_RCC_GetSysClockFreq+0x40>
 8001d82:	d900      	bls.n	8001d86 <HAL_RCC_GetSysClockFreq+0x1a>
 8001d84:	e07b      	b.n	8001e7e <HAL_RCC_GetSysClockFreq+0x112>
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d002      	beq.n	8001d90 <HAL_RCC_GetSysClockFreq+0x24>
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d00b      	beq.n	8001da6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d8e:	e076      	b.n	8001e7e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d90:	4b44      	ldr	r3, [pc, #272]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2210      	movs	r2, #16
 8001d96:	4013      	ands	r3, r2
 8001d98:	d002      	beq.n	8001da0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001d9a:	4b43      	ldr	r3, [pc, #268]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d9c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001d9e:	e07c      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001da0:	4b42      	ldr	r3, [pc, #264]	; (8001eac <HAL_RCC_GetSysClockFreq+0x140>)
 8001da2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001da4:	e079      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001da6:	4b42      	ldr	r3, [pc, #264]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x144>)
 8001da8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001daa:	e076      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dae:	0c9a      	lsrs	r2, r3, #18
 8001db0:	230f      	movs	r3, #15
 8001db2:	401a      	ands	r2, r3
 8001db4:	4b3f      	ldr	r3, [pc, #252]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x148>)
 8001db6:	5c9b      	ldrb	r3, [r3, r2]
 8001db8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dbc:	0d9a      	lsrs	r2, r3, #22
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dc6:	4b37      	ldr	r3, [pc, #220]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	2380      	movs	r3, #128	; 0x80
 8001dcc:	025b      	lsls	r3, r3, #9
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d01a      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd4:	61bb      	str	r3, [r7, #24]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	4a35      	ldr	r2, [pc, #212]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ddc:	2300      	movs	r3, #0
 8001dde:	69b8      	ldr	r0, [r7, #24]
 8001de0:	69f9      	ldr	r1, [r7, #28]
 8001de2:	f7fe fb27 	bl	8000434 <__aeabi_lmul>
 8001de6:	0002      	movs	r2, r0
 8001de8:	000b      	movs	r3, r1
 8001dea:	0010      	movs	r0, r2
 8001dec:	0019      	movs	r1, r3
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	f7fe fafb 	bl	80003f4 <__aeabi_uldivmod>
 8001dfe:	0002      	movs	r2, r0
 8001e00:	000b      	movs	r3, r1
 8001e02:	0013      	movs	r3, r2
 8001e04:	637b      	str	r3, [r7, #52]	; 0x34
 8001e06:	e037      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e08:	4b26      	ldr	r3, [pc, #152]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2210      	movs	r2, #16
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d01a      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	4a23      	ldr	r2, [pc, #140]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	68b8      	ldr	r0, [r7, #8]
 8001e20:	68f9      	ldr	r1, [r7, #12]
 8001e22:	f7fe fb07 	bl	8000434 <__aeabi_lmul>
 8001e26:	0002      	movs	r2, r0
 8001e28:	000b      	movs	r3, r1
 8001e2a:	0010      	movs	r0, r2
 8001e2c:	0019      	movs	r1, r3
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	603b      	str	r3, [r7, #0]
 8001e32:	2300      	movs	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f7fe fadb 	bl	80003f4 <__aeabi_uldivmod>
 8001e3e:	0002      	movs	r2, r0
 8001e40:	000b      	movs	r3, r1
 8001e42:	0013      	movs	r3, r2
 8001e44:	637b      	str	r3, [r7, #52]	; 0x34
 8001e46:	e017      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	0019      	movs	r1, r3
 8001e50:	4a16      	ldr	r2, [pc, #88]	; (8001eac <HAL_RCC_GetSysClockFreq+0x140>)
 8001e52:	2300      	movs	r3, #0
 8001e54:	f7fe faee 	bl	8000434 <__aeabi_lmul>
 8001e58:	0002      	movs	r2, r0
 8001e5a:	000b      	movs	r3, r1
 8001e5c:	0010      	movs	r0, r2
 8001e5e:	0019      	movs	r1, r3
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	001c      	movs	r4, r3
 8001e64:	2300      	movs	r3, #0
 8001e66:	001d      	movs	r5, r3
 8001e68:	0022      	movs	r2, r4
 8001e6a:	002b      	movs	r3, r5
 8001e6c:	f7fe fac2 	bl	80003f4 <__aeabi_uldivmod>
 8001e70:	0002      	movs	r2, r0
 8001e72:	000b      	movs	r3, r1
 8001e74:	0013      	movs	r3, r2
 8001e76:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e7a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e7c:	e00d      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001e7e:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	0b5b      	lsrs	r3, r3, #13
 8001e84:	2207      	movs	r2, #7
 8001e86:	4013      	ands	r3, r2
 8001e88:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	2280      	movs	r2, #128	; 0x80
 8001e90:	0212      	lsls	r2, r2, #8
 8001e92:	409a      	lsls	r2, r3
 8001e94:	0013      	movs	r3, r2
 8001e96:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e98:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b00e      	add	sp, #56	; 0x38
 8001ea2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	003d0900 	.word	0x003d0900
 8001eac:	00f42400 	.word	0x00f42400
 8001eb0:	007a1200 	.word	0x007a1200
 8001eb4:	08003414 	.word	0x08003414

08001eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ebc:	4b02      	ldr	r3, [pc, #8]	; (8001ec8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	20000000 	.word	0x20000000

08001ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ed0:	f7ff fff2 	bl	8001eb8 <HAL_RCC_GetHCLKFreq>
 8001ed4:	0001      	movs	r1, r0
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	0a1b      	lsrs	r3, r3, #8
 8001edc:	2207      	movs	r2, #7
 8001ede:	4013      	ands	r3, r2
 8001ee0:	4a04      	ldr	r2, [pc, #16]	; (8001ef4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ee2:	5cd3      	ldrb	r3, [r2, r3]
 8001ee4:	40d9      	lsrs	r1, r3
 8001ee6:	000b      	movs	r3, r1
}
 8001ee8:	0018      	movs	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	0800340c 	.word	0x0800340c

08001ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001efc:	f7ff ffdc 	bl	8001eb8 <HAL_RCC_GetHCLKFreq>
 8001f00:	0001      	movs	r1, r0
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	0adb      	lsrs	r3, r3, #11
 8001f08:	2207      	movs	r2, #7
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f0e:	5cd3      	ldrb	r3, [r2, r3]
 8001f10:	40d9      	lsrs	r1, r3
 8001f12:	000b      	movs	r3, r1
}
 8001f14:	0018      	movs	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	0800340c 	.word	0x0800340c

08001f24 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001f2c:	2017      	movs	r0, #23
 8001f2e:	183b      	adds	r3, r7, r0
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d100      	bne.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001f3e:	e0c7      	b.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f40:	4b84      	ldr	r3, [pc, #528]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	055b      	lsls	r3, r3, #21
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d109      	bne.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f4c:	4b81      	ldr	r3, [pc, #516]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f50:	4b80      	ldr	r3, [pc, #512]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f52:	2180      	movs	r1, #128	; 0x80
 8001f54:	0549      	lsls	r1, r1, #21
 8001f56:	430a      	orrs	r2, r1
 8001f58:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001f5a:	183b      	adds	r3, r7, r0
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f60:	4b7d      	ldr	r3, [pc, #500]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d11a      	bne.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f6c:	4b7a      	ldr	r3, [pc, #488]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4b79      	ldr	r3, [pc, #484]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001f72:	2180      	movs	r1, #128	; 0x80
 8001f74:	0049      	lsls	r1, r1, #1
 8001f76:	430a      	orrs	r2, r1
 8001f78:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f7a:	f7fe ffcd 	bl	8000f18 <HAL_GetTick>
 8001f7e:	0003      	movs	r3, r0
 8001f80:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f82:	e008      	b.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f84:	f7fe ffc8 	bl	8000f18 <HAL_GetTick>
 8001f88:	0002      	movs	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b64      	cmp	r3, #100	; 0x64
 8001f90:	d901      	bls.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e0d9      	b.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f96:	4b70      	ldr	r3, [pc, #448]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	2380      	movs	r3, #128	; 0x80
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001fa2:	4b6c      	ldr	r3, [pc, #432]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	23c0      	movs	r3, #192	; 0xc0
 8001fa8:	039b      	lsls	r3, r3, #14
 8001faa:	4013      	ands	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	23c0      	movs	r3, #192	; 0xc0
 8001fb4:	039b      	lsls	r3, r3, #14
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d013      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	23c0      	movs	r3, #192	; 0xc0
 8001fc4:	029b      	lsls	r3, r3, #10
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	23c0      	movs	r3, #192	; 0xc0
 8001fca:	029b      	lsls	r3, r3, #10
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d10a      	bne.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001fd0:	4b60      	ldr	r3, [pc, #384]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	029b      	lsls	r3, r3, #10
 8001fd8:	401a      	ands	r2, r3
 8001fda:	2380      	movs	r3, #128	; 0x80
 8001fdc:	029b      	lsls	r3, r3, #10
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e0b1      	b.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001fe6:	4b5b      	ldr	r3, [pc, #364]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fe8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fea:	23c0      	movs	r3, #192	; 0xc0
 8001fec:	029b      	lsls	r3, r3, #10
 8001fee:	4013      	ands	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d03b      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	23c0      	movs	r3, #192	; 0xc0
 8001ffe:	029b      	lsls	r3, r3, #10
 8002000:	4013      	ands	r3, r2
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	429a      	cmp	r2, r3
 8002006:	d033      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2220      	movs	r2, #32
 800200e:	4013      	ands	r3, r2
 8002010:	d02e      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002012:	4b50      	ldr	r3, [pc, #320]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002016:	4a51      	ldr	r2, [pc, #324]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002018:	4013      	ands	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800201c:	4b4d      	ldr	r3, [pc, #308]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800201e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002020:	4b4c      	ldr	r3, [pc, #304]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002022:	2180      	movs	r1, #128	; 0x80
 8002024:	0309      	lsls	r1, r1, #12
 8002026:	430a      	orrs	r2, r1
 8002028:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800202a:	4b4a      	ldr	r3, [pc, #296]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800202c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800202e:	4b49      	ldr	r3, [pc, #292]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002030:	494b      	ldr	r1, [pc, #300]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002032:	400a      	ands	r2, r1
 8002034:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002036:	4b47      	ldr	r3, [pc, #284]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4013      	ands	r3, r2
 8002044:	d014      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002046:	f7fe ff67 	bl	8000f18 <HAL_GetTick>
 800204a:	0003      	movs	r3, r0
 800204c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800204e:	e009      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002050:	f7fe ff62 	bl	8000f18 <HAL_GetTick>
 8002054:	0002      	movs	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	4a42      	ldr	r2, [pc, #264]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d901      	bls.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e072      	b.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002064:	4b3b      	ldr	r3, [pc, #236]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002066:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4013      	ands	r3, r2
 800206e:	d0ef      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2220      	movs	r2, #32
 8002076:	4013      	ands	r3, r2
 8002078:	d01f      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	23c0      	movs	r3, #192	; 0xc0
 8002080:	029b      	lsls	r3, r3, #10
 8002082:	401a      	ands	r2, r3
 8002084:	23c0      	movs	r3, #192	; 0xc0
 8002086:	029b      	lsls	r3, r3, #10
 8002088:	429a      	cmp	r2, r3
 800208a:	d10c      	bne.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800208c:	4b31      	ldr	r3, [pc, #196]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a35      	ldr	r2, [pc, #212]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002092:	4013      	ands	r3, r2
 8002094:	0019      	movs	r1, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	23c0      	movs	r3, #192	; 0xc0
 800209c:	039b      	lsls	r3, r3, #14
 800209e:	401a      	ands	r2, r3
 80020a0:	4b2c      	ldr	r3, [pc, #176]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020a2:	430a      	orrs	r2, r1
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	4b2b      	ldr	r3, [pc, #172]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020a8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	23c0      	movs	r3, #192	; 0xc0
 80020b0:	029b      	lsls	r3, r3, #10
 80020b2:	401a      	ands	r2, r3
 80020b4:	4b27      	ldr	r3, [pc, #156]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020b6:	430a      	orrs	r2, r1
 80020b8:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020ba:	2317      	movs	r3, #23
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d105      	bne.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c4:	4b23      	ldr	r3, [pc, #140]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020c8:	4b22      	ldr	r3, [pc, #136]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020ca:	4928      	ldr	r1, [pc, #160]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020cc:	400a      	ands	r2, r1
 80020ce:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2202      	movs	r2, #2
 80020d6:	4013      	ands	r3, r2
 80020d8:	d009      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020da:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020de:	220c      	movs	r2, #12
 80020e0:	4393      	bics	r3, r2
 80020e2:	0019      	movs	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020ea:	430a      	orrs	r2, r1
 80020ec:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2204      	movs	r2, #4
 80020f4:	4013      	ands	r3, r2
 80020f6:	d009      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020f8:	4b16      	ldr	r3, [pc, #88]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fc:	4a1c      	ldr	r2, [pc, #112]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80020fe:	4013      	ands	r3, r2
 8002100:	0019      	movs	r1, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	4b13      	ldr	r3, [pc, #76]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002108:	430a      	orrs	r2, r1
 800210a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2208      	movs	r2, #8
 8002112:	4013      	ands	r3, r2
 8002114:	d009      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002116:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211a:	4a16      	ldr	r2, [pc, #88]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800211c:	4013      	ands	r3, r2
 800211e:	0019      	movs	r1, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691a      	ldr	r2, [r3, #16]
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002126:	430a      	orrs	r2, r1
 8002128:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2280      	movs	r2, #128	; 0x80
 8002130:	4013      	ands	r3, r2
 8002132:	d009      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002134:	4b07      	ldr	r3, [pc, #28]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002138:	4a0f      	ldr	r2, [pc, #60]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800213a:	4013      	ands	r3, r2
 800213c:	0019      	movs	r1, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695a      	ldr	r2, [r3, #20]
 8002142:	4b04      	ldr	r3, [pc, #16]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002144:	430a      	orrs	r2, r1
 8002146:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	0018      	movs	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	b006      	add	sp, #24
 8002150:	bd80      	pop	{r7, pc}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	40021000 	.word	0x40021000
 8002158:	40007000 	.word	0x40007000
 800215c:	fffcffff 	.word	0xfffcffff
 8002160:	fff7ffff 	.word	0xfff7ffff
 8002164:	00001388 	.word	0x00001388
 8002168:	ffcfffff 	.word	0xffcfffff
 800216c:	efffffff 	.word	0xefffffff
 8002170:	fffff3ff 	.word	0xfffff3ff
 8002174:	ffffcfff 	.word	0xffffcfff
 8002178:	fff3ffff 	.word	0xfff3ffff

0800217c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e032      	b.n	80021f4 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2239      	movs	r2, #57	; 0x39
 8002192:	5c9b      	ldrb	r3, [r3, r2]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d107      	bne.n	80021aa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2238      	movs	r2, #56	; 0x38
 800219e:	2100      	movs	r1, #0
 80021a0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	0018      	movs	r0, r3
 80021a6:	f7fe fd95 	bl	8000cd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2239      	movs	r2, #57	; 0x39
 80021ae:	2102      	movs	r1, #2
 80021b0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3304      	adds	r3, #4
 80021ba:	0019      	movs	r1, r3
 80021bc:	0010      	movs	r0, r2
 80021be:	f000 f96f 	bl	80024a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	223e      	movs	r2, #62	; 0x3e
 80021c6:	2101      	movs	r1, #1
 80021c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	223a      	movs	r2, #58	; 0x3a
 80021ce:	2101      	movs	r1, #1
 80021d0:	5499      	strb	r1, [r3, r2]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	223b      	movs	r2, #59	; 0x3b
 80021d6:	2101      	movs	r1, #1
 80021d8:	5499      	strb	r1, [r3, r2]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	223c      	movs	r2, #60	; 0x3c
 80021de:	2101      	movs	r1, #1
 80021e0:	5499      	strb	r1, [r3, r2]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	223d      	movs	r2, #61	; 0x3d
 80021e6:	2101      	movs	r1, #1
 80021e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2239      	movs	r2, #57	; 0x39
 80021ee:	2101      	movs	r1, #1
 80021f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	0018      	movs	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	b002      	add	sp, #8
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d108      	bne.n	800221e <HAL_TIM_PWM_Start+0x22>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	223a      	movs	r2, #58	; 0x3a
 8002210:	5c9b      	ldrb	r3, [r3, r2]
 8002212:	b2db      	uxtb	r3, r3
 8002214:	3b01      	subs	r3, #1
 8002216:	1e5a      	subs	r2, r3, #1
 8002218:	4193      	sbcs	r3, r2
 800221a:	b2db      	uxtb	r3, r3
 800221c:	e01f      	b.n	800225e <HAL_TIM_PWM_Start+0x62>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	2b04      	cmp	r3, #4
 8002222:	d108      	bne.n	8002236 <HAL_TIM_PWM_Start+0x3a>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	223b      	movs	r2, #59	; 0x3b
 8002228:	5c9b      	ldrb	r3, [r3, r2]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	3b01      	subs	r3, #1
 800222e:	1e5a      	subs	r2, r3, #1
 8002230:	4193      	sbcs	r3, r2
 8002232:	b2db      	uxtb	r3, r3
 8002234:	e013      	b.n	800225e <HAL_TIM_PWM_Start+0x62>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b08      	cmp	r3, #8
 800223a:	d108      	bne.n	800224e <HAL_TIM_PWM_Start+0x52>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	223c      	movs	r2, #60	; 0x3c
 8002240:	5c9b      	ldrb	r3, [r3, r2]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	3b01      	subs	r3, #1
 8002246:	1e5a      	subs	r2, r3, #1
 8002248:	4193      	sbcs	r3, r2
 800224a:	b2db      	uxtb	r3, r3
 800224c:	e007      	b.n	800225e <HAL_TIM_PWM_Start+0x62>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	223d      	movs	r2, #61	; 0x3d
 8002252:	5c9b      	ldrb	r3, [r3, r2]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	3b01      	subs	r3, #1
 8002258:	1e5a      	subs	r2, r3, #1
 800225a:	4193      	sbcs	r3, r2
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e04d      	b.n	8002302 <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d104      	bne.n	8002276 <HAL_TIM_PWM_Start+0x7a>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	223a      	movs	r2, #58	; 0x3a
 8002270:	2102      	movs	r1, #2
 8002272:	5499      	strb	r1, [r3, r2]
 8002274:	e013      	b.n	800229e <HAL_TIM_PWM_Start+0xa2>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	2b04      	cmp	r3, #4
 800227a:	d104      	bne.n	8002286 <HAL_TIM_PWM_Start+0x8a>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	223b      	movs	r2, #59	; 0x3b
 8002280:	2102      	movs	r1, #2
 8002282:	5499      	strb	r1, [r3, r2]
 8002284:	e00b      	b.n	800229e <HAL_TIM_PWM_Start+0xa2>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	2b08      	cmp	r3, #8
 800228a:	d104      	bne.n	8002296 <HAL_TIM_PWM_Start+0x9a>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	223c      	movs	r2, #60	; 0x3c
 8002290:	2102      	movs	r1, #2
 8002292:	5499      	strb	r1, [r3, r2]
 8002294:	e003      	b.n	800229e <HAL_TIM_PWM_Start+0xa2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	223d      	movs	r2, #61	; 0x3d
 800229a:	2102      	movs	r1, #2
 800229c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6839      	ldr	r1, [r7, #0]
 80022a4:	2201      	movs	r2, #1
 80022a6:	0018      	movs	r0, r3
 80022a8:	f000 fa52 	bl	8002750 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	2380      	movs	r3, #128	; 0x80
 80022b2:	05db      	lsls	r3, r3, #23
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d009      	beq.n	80022cc <HAL_TIM_PWM_Start+0xd0>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a13      	ldr	r2, [pc, #76]	; (800230c <HAL_TIM_PWM_Start+0x110>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d004      	beq.n	80022cc <HAL_TIM_PWM_Start+0xd0>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a12      	ldr	r2, [pc, #72]	; (8002310 <HAL_TIM_PWM_Start+0x114>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d111      	bne.n	80022f0 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2207      	movs	r2, #7
 80022d4:	4013      	ands	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d010      	beq.n	8002300 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2101      	movs	r1, #1
 80022ea:	430a      	orrs	r2, r1
 80022ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ee:	e007      	b.n	8002300 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2101      	movs	r1, #1
 80022fc:	430a      	orrs	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	0018      	movs	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	b004      	add	sp, #16
 8002308:	bd80      	pop	{r7, pc}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	40010800 	.word	0x40010800
 8002310:	40011400 	.word	0x40011400

08002314 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002320:	2317      	movs	r3, #23
 8002322:	18fb      	adds	r3, r7, r3
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2238      	movs	r2, #56	; 0x38
 800232c:	5c9b      	ldrb	r3, [r3, r2]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002332:	2302      	movs	r3, #2
 8002334:	e0ad      	b.n	8002492 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2238      	movs	r2, #56	; 0x38
 800233a:	2101      	movs	r1, #1
 800233c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b0c      	cmp	r3, #12
 8002342:	d100      	bne.n	8002346 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002344:	e076      	b.n	8002434 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b0c      	cmp	r3, #12
 800234a:	d900      	bls.n	800234e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800234c:	e095      	b.n	800247a <HAL_TIM_PWM_ConfigChannel+0x166>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b08      	cmp	r3, #8
 8002352:	d04e      	beq.n	80023f2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b08      	cmp	r3, #8
 8002358:	d900      	bls.n	800235c <HAL_TIM_PWM_ConfigChannel+0x48>
 800235a:	e08e      	b.n	800247a <HAL_TIM_PWM_ConfigChannel+0x166>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_TIM_PWM_ConfigChannel+0x56>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b04      	cmp	r3, #4
 8002366:	d021      	beq.n	80023ac <HAL_TIM_PWM_ConfigChannel+0x98>
 8002368:	e087      	b.n	800247a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	0011      	movs	r1, r2
 8002372:	0018      	movs	r0, r3
 8002374:	f000 f8e8 	bl	8002548 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699a      	ldr	r2, [r3, #24]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2108      	movs	r1, #8
 8002384:	430a      	orrs	r2, r1
 8002386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2104      	movs	r1, #4
 8002394:	438a      	bics	r2, r1
 8002396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6999      	ldr	r1, [r3, #24]
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	619a      	str	r2, [r3, #24]
      break;
 80023aa:	e06b      	b.n	8002484 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	0011      	movs	r1, r2
 80023b4:	0018      	movs	r0, r3
 80023b6:	f000 f903 	bl	80025c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699a      	ldr	r2, [r3, #24]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2180      	movs	r1, #128	; 0x80
 80023c6:	0109      	lsls	r1, r1, #4
 80023c8:	430a      	orrs	r2, r1
 80023ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	699a      	ldr	r2, [r3, #24]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4931      	ldr	r1, [pc, #196]	; (800249c <HAL_TIM_PWM_ConfigChannel+0x188>)
 80023d8:	400a      	ands	r2, r1
 80023da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6999      	ldr	r1, [r3, #24]
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	021a      	lsls	r2, r3, #8
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	619a      	str	r2, [r3, #24]
      break;
 80023f0:	e048      	b.n	8002484 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	0011      	movs	r1, r2
 80023fa:	0018      	movs	r0, r3
 80023fc:	f000 f922 	bl	8002644 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	69da      	ldr	r2, [r3, #28]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2108      	movs	r1, #8
 800240c:	430a      	orrs	r2, r1
 800240e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	69da      	ldr	r2, [r3, #28]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2104      	movs	r1, #4
 800241c:	438a      	bics	r2, r1
 800241e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	69d9      	ldr	r1, [r3, #28]
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	61da      	str	r2, [r3, #28]
      break;
 8002432:	e027      	b.n	8002484 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	0011      	movs	r1, r2
 800243c:	0018      	movs	r0, r3
 800243e:	f000 f941 	bl	80026c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	69da      	ldr	r2, [r3, #28]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2180      	movs	r1, #128	; 0x80
 800244e:	0109      	lsls	r1, r1, #4
 8002450:	430a      	orrs	r2, r1
 8002452:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	69da      	ldr	r2, [r3, #28]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	490f      	ldr	r1, [pc, #60]	; (800249c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002460:	400a      	ands	r2, r1
 8002462:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	69d9      	ldr	r1, [r3, #28]
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	021a      	lsls	r2, r3, #8
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	61da      	str	r2, [r3, #28]
      break;
 8002478:	e004      	b.n	8002484 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800247a:	2317      	movs	r3, #23
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	2201      	movs	r2, #1
 8002480:	701a      	strb	r2, [r3, #0]
      break;
 8002482:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2238      	movs	r2, #56	; 0x38
 8002488:	2100      	movs	r1, #0
 800248a:	5499      	strb	r1, [r3, r2]

  return status;
 800248c:	2317      	movs	r3, #23
 800248e:	18fb      	adds	r3, r7, r3
 8002490:	781b      	ldrb	r3, [r3, #0]
}
 8002492:	0018      	movs	r0, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	b006      	add	sp, #24
 8002498:	bd80      	pop	{r7, pc}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	fffffbff 	.word	0xfffffbff

080024a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	05db      	lsls	r3, r3, #23
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d007      	beq.n	80024ca <TIM_Base_SetConfig+0x2a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a1f      	ldr	r2, [pc, #124]	; (800253c <TIM_Base_SetConfig+0x9c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d003      	beq.n	80024ca <TIM_Base_SetConfig+0x2a>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a1e      	ldr	r2, [pc, #120]	; (8002540 <TIM_Base_SetConfig+0xa0>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d108      	bne.n	80024dc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2270      	movs	r2, #112	; 0x70
 80024ce:	4393      	bics	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	4313      	orrs	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	2380      	movs	r3, #128	; 0x80
 80024e0:	05db      	lsls	r3, r3, #23
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d007      	beq.n	80024f6 <TIM_Base_SetConfig+0x56>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a14      	ldr	r2, [pc, #80]	; (800253c <TIM_Base_SetConfig+0x9c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d003      	beq.n	80024f6 <TIM_Base_SetConfig+0x56>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a13      	ldr	r2, [pc, #76]	; (8002540 <TIM_Base_SetConfig+0xa0>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d108      	bne.n	8002508 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4a12      	ldr	r2, [pc, #72]	; (8002544 <TIM_Base_SetConfig+0xa4>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	4313      	orrs	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2280      	movs	r2, #128	; 0x80
 800250c:	4393      	bics	r3, r2
 800250e:	001a      	movs	r2, r3
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	615a      	str	r2, [r3, #20]
}
 8002534:	46c0      	nop			; (mov r8, r8)
 8002536:	46bd      	mov	sp, r7
 8002538:	b004      	add	sp, #16
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40010800 	.word	0x40010800
 8002540:	40011400 	.word	0x40011400
 8002544:	fffffcff 	.word	0xfffffcff

08002548 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	2201      	movs	r2, #1
 8002558:	4393      	bics	r3, r2
 800255a:	001a      	movs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2270      	movs	r2, #112	; 0x70
 8002576:	4393      	bics	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2203      	movs	r2, #3
 800257e:	4393      	bics	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	4313      	orrs	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	2202      	movs	r2, #2
 8002590:	4393      	bics	r3, r2
 8002592:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	4313      	orrs	r3, r2
 800259c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	621a      	str	r2, [r3, #32]
}
 80025b8:	46c0      	nop			; (mov r8, r8)
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b006      	add	sp, #24
 80025be:	bd80      	pop	{r7, pc}

080025c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	2210      	movs	r2, #16
 80025d0:	4393      	bics	r3, r2
 80025d2:	001a      	movs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4a13      	ldr	r2, [pc, #76]	; (800263c <TIM_OC2_SetConfig+0x7c>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4a12      	ldr	r2, [pc, #72]	; (8002640 <TIM_OC2_SetConfig+0x80>)
 80025f6:	4013      	ands	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	021b      	lsls	r3, r3, #8
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	4313      	orrs	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	2220      	movs	r2, #32
 800260a:	4393      	bics	r3, r2
 800260c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	4313      	orrs	r3, r2
 8002618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	621a      	str	r2, [r3, #32]
}
 8002634:	46c0      	nop			; (mov r8, r8)
 8002636:	46bd      	mov	sp, r7
 8002638:	b006      	add	sp, #24
 800263a:	bd80      	pop	{r7, pc}
 800263c:	ffff8fff 	.word	0xffff8fff
 8002640:	fffffcff 	.word	0xfffffcff

08002644 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	4a1a      	ldr	r2, [pc, #104]	; (80026bc <TIM_OC3_SetConfig+0x78>)
 8002654:	401a      	ands	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2270      	movs	r2, #112	; 0x70
 8002670:	4393      	bics	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2203      	movs	r2, #3
 8002678:	4393      	bics	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	4a0d      	ldr	r2, [pc, #52]	; (80026c0 <TIM_OC3_SetConfig+0x7c>)
 800268a:	4013      	ands	r3, r2
 800268c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	021b      	lsls	r3, r3, #8
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	4313      	orrs	r3, r2
 8002698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	621a      	str	r2, [r3, #32]
}
 80026b4:	46c0      	nop			; (mov r8, r8)
 80026b6:	46bd      	mov	sp, r7
 80026b8:	b006      	add	sp, #24
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	fffffeff 	.word	0xfffffeff
 80026c0:	fffffdff 	.word	0xfffffdff

080026c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <TIM_OC4_SetConfig+0x7c>)
 80026d4:	401a      	ands	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4a15      	ldr	r2, [pc, #84]	; (8002744 <TIM_OC4_SetConfig+0x80>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4a14      	ldr	r2, [pc, #80]	; (8002748 <TIM_OC4_SetConfig+0x84>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	021b      	lsls	r3, r3, #8
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	4313      	orrs	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	4a10      	ldr	r2, [pc, #64]	; (800274c <TIM_OC4_SetConfig+0x88>)
 800270c:	4013      	ands	r3, r2
 800270e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	031b      	lsls	r3, r3, #12
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	4313      	orrs	r3, r2
 800271a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	621a      	str	r2, [r3, #32]
}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	46bd      	mov	sp, r7
 800273a:	b006      	add	sp, #24
 800273c:	bd80      	pop	{r7, pc}
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	ffffefff 	.word	0xffffefff
 8002744:	ffff8fff 	.word	0xffff8fff
 8002748:	fffffcff 	.word	0xfffffcff
 800274c:	ffffdfff 	.word	0xffffdfff

08002750 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	221f      	movs	r2, #31
 8002760:	4013      	ands	r3, r2
 8002762:	2201      	movs	r2, #1
 8002764:	409a      	lsls	r2, r3
 8002766:	0013      	movs	r3, r2
 8002768:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	43d2      	mvns	r2, r2
 8002772:	401a      	ands	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a1a      	ldr	r2, [r3, #32]
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	211f      	movs	r1, #31
 8002780:	400b      	ands	r3, r1
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4099      	lsls	r1, r3
 8002786:	000b      	movs	r3, r1
 8002788:	431a      	orrs	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	621a      	str	r2, [r3, #32]
}
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	46bd      	mov	sp, r7
 8002792:	b006      	add	sp, #24
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2238      	movs	r2, #56	; 0x38
 80027a6:	5c9b      	ldrb	r3, [r3, r2]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027ac:	2302      	movs	r3, #2
 80027ae:	e042      	b.n	8002836 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2238      	movs	r2, #56	; 0x38
 80027b4:	2101      	movs	r1, #1
 80027b6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2239      	movs	r2, #57	; 0x39
 80027bc:	2102      	movs	r1, #2
 80027be:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2270      	movs	r2, #112	; 0x70
 80027d4:	4393      	bics	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	4313      	orrs	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	2380      	movs	r3, #128	; 0x80
 80027f0:	05db      	lsls	r3, r3, #23
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d009      	beq.n	800280a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a11      	ldr	r2, [pc, #68]	; (8002840 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d004      	beq.n	800280a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a0f      	ldr	r2, [pc, #60]	; (8002844 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d10c      	bne.n	8002824 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2280      	movs	r2, #128	; 0x80
 800280e:	4393      	bics	r3, r2
 8002810:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	4313      	orrs	r3, r2
 800281a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2239      	movs	r2, #57	; 0x39
 8002828:	2101      	movs	r1, #1
 800282a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2238      	movs	r2, #56	; 0x38
 8002830:	2100      	movs	r1, #0
 8002832:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	0018      	movs	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	b004      	add	sp, #16
 800283c:	bd80      	pop	{r7, pc}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	40010800 	.word	0x40010800
 8002844:	40011400 	.word	0x40011400

08002848 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e044      	b.n	80028e4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800285e:	2b00      	cmp	r3, #0
 8002860:	d107      	bne.n	8002872 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2278      	movs	r2, #120	; 0x78
 8002866:	2100      	movs	r1, #0
 8002868:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	0018      	movs	r0, r3
 800286e:	f7fe f9ed 	bl	8000c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2224      	movs	r2, #36	; 0x24
 8002876:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2101      	movs	r1, #1
 8002884:	438a      	bics	r2, r1
 8002886:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	0018      	movs	r0, r3
 800288c:	f000 f8d0 	bl	8002a30 <UART_SetConfig>
 8002890:	0003      	movs	r3, r0
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e024      	b.n	80028e4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	0018      	movs	r0, r3
 80028a6:	f000 fb0d 	bl	8002ec4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	490d      	ldr	r1, [pc, #52]	; (80028ec <HAL_UART_Init+0xa4>)
 80028b6:	400a      	ands	r2, r1
 80028b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	212a      	movs	r1, #42	; 0x2a
 80028c6:	438a      	bics	r2, r1
 80028c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2101      	movs	r1, #1
 80028d6:	430a      	orrs	r2, r1
 80028d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	0018      	movs	r0, r3
 80028de:	f000 fba5 	bl	800302c <UART_CheckIdleState>
 80028e2:	0003      	movs	r3, r0
}
 80028e4:	0018      	movs	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b002      	add	sp, #8
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	ffffb7ff 	.word	0xffffb7ff

080028f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08a      	sub	sp, #40	; 0x28
 80028f4:	af02      	add	r7, sp, #8
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	1dbb      	adds	r3, r7, #6
 80028fe:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002904:	2b20      	cmp	r3, #32
 8002906:	d000      	beq.n	800290a <HAL_UART_Transmit+0x1a>
 8002908:	e08c      	b.n	8002a24 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_UART_Transmit+0x28>
 8002910:	1dbb      	adds	r3, r7, #6
 8002912:	881b      	ldrh	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e084      	b.n	8002a26 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	015b      	lsls	r3, r3, #5
 8002924:	429a      	cmp	r2, r3
 8002926:	d109      	bne.n	800293c <HAL_UART_Transmit+0x4c>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d105      	bne.n	800293c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2201      	movs	r2, #1
 8002934:	4013      	ands	r3, r2
 8002936:	d001      	beq.n	800293c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e074      	b.n	8002a26 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2284      	movs	r2, #132	; 0x84
 8002940:	2100      	movs	r1, #0
 8002942:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2221      	movs	r2, #33	; 0x21
 8002948:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800294a:	f7fe fae5 	bl	8000f18 <HAL_GetTick>
 800294e:	0003      	movs	r3, r0
 8002950:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1dba      	adds	r2, r7, #6
 8002956:	2150      	movs	r1, #80	; 0x50
 8002958:	8812      	ldrh	r2, [r2, #0]
 800295a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1dba      	adds	r2, r7, #6
 8002960:	2152      	movs	r1, #82	; 0x52
 8002962:	8812      	ldrh	r2, [r2, #0]
 8002964:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	2380      	movs	r3, #128	; 0x80
 800296c:	015b      	lsls	r3, r3, #5
 800296e:	429a      	cmp	r2, r3
 8002970:	d108      	bne.n	8002984 <HAL_UART_Transmit+0x94>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d104      	bne.n	8002984 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	61bb      	str	r3, [r7, #24]
 8002982:	e003      	b.n	800298c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002988:	2300      	movs	r3, #0
 800298a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800298c:	e02f      	b.n	80029ee <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	0013      	movs	r3, r2
 8002998:	2200      	movs	r2, #0
 800299a:	2180      	movs	r1, #128	; 0x80
 800299c:	f000 fbee 	bl	800317c <UART_WaitOnFlagUntilTimeout>
 80029a0:	1e03      	subs	r3, r0, #0
 80029a2:	d004      	beq.n	80029ae <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e03b      	b.n	8002a26 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10b      	bne.n	80029cc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	001a      	movs	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	05d2      	lsls	r2, r2, #23
 80029c0:	0dd2      	lsrs	r2, r2, #23
 80029c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	3302      	adds	r3, #2
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	e007      	b.n	80029dc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	781a      	ldrb	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3301      	adds	r3, #1
 80029da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2252      	movs	r2, #82	; 0x52
 80029e0:	5a9b      	ldrh	r3, [r3, r2]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	3b01      	subs	r3, #1
 80029e6:	b299      	uxth	r1, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2252      	movs	r2, #82	; 0x52
 80029ec:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2252      	movs	r2, #82	; 0x52
 80029f2:	5a9b      	ldrh	r3, [r3, r2]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1c9      	bne.n	800298e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	0013      	movs	r3, r2
 8002a04:	2200      	movs	r2, #0
 8002a06:	2140      	movs	r1, #64	; 0x40
 8002a08:	f000 fbb8 	bl	800317c <UART_WaitOnFlagUntilTimeout>
 8002a0c:	1e03      	subs	r3, r0, #0
 8002a0e:	d004      	beq.n	8002a1a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2220      	movs	r2, #32
 8002a14:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e005      	b.n	8002a26 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	e000      	b.n	8002a26 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002a24:	2302      	movs	r3, #2
  }
}
 8002a26:	0018      	movs	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	b008      	add	sp, #32
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a30:	b5b0      	push	{r4, r5, r7, lr}
 8002a32:	b08e      	sub	sp, #56	; 0x38
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a38:	231a      	movs	r3, #26
 8002a3a:	2218      	movs	r2, #24
 8002a3c:	189b      	adds	r3, r3, r2
 8002a3e:	19db      	adds	r3, r3, r7
 8002a40:	2200      	movs	r2, #0
 8002a42:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4ab4      	ldr	r2, [pc, #720]	; (8002d34 <UART_SetConfig+0x304>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	0019      	movs	r1, r3
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	4aaf      	ldr	r2, [pc, #700]	; (8002d38 <UART_SetConfig+0x308>)
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	0019      	movs	r1, r3
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4aa9      	ldr	r2, [pc, #676]	; (8002d3c <UART_SetConfig+0x30c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d004      	beq.n	8002aa4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	4aa5      	ldr	r2, [pc, #660]	; (8002d40 <UART_SetConfig+0x310>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	0019      	movs	r1, r3
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4aa1      	ldr	r2, [pc, #644]	; (8002d44 <UART_SetConfig+0x314>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d131      	bne.n	8002b28 <UART_SetConfig+0xf8>
 8002ac4:	4ba0      	ldr	r3, [pc, #640]	; (8002d48 <UART_SetConfig+0x318>)
 8002ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac8:	220c      	movs	r2, #12
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b0c      	cmp	r3, #12
 8002ace:	d01d      	beq.n	8002b0c <UART_SetConfig+0xdc>
 8002ad0:	d823      	bhi.n	8002b1a <UART_SetConfig+0xea>
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d00c      	beq.n	8002af0 <UART_SetConfig+0xc0>
 8002ad6:	d820      	bhi.n	8002b1a <UART_SetConfig+0xea>
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <UART_SetConfig+0xb2>
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d00e      	beq.n	8002afe <UART_SetConfig+0xce>
 8002ae0:	e01b      	b.n	8002b1a <UART_SetConfig+0xea>
 8002ae2:	231b      	movs	r3, #27
 8002ae4:	2218      	movs	r2, #24
 8002ae6:	189b      	adds	r3, r3, r2
 8002ae8:	19db      	adds	r3, r3, r7
 8002aea:	2200      	movs	r2, #0
 8002aec:	701a      	strb	r2, [r3, #0]
 8002aee:	e065      	b.n	8002bbc <UART_SetConfig+0x18c>
 8002af0:	231b      	movs	r3, #27
 8002af2:	2218      	movs	r2, #24
 8002af4:	189b      	adds	r3, r3, r2
 8002af6:	19db      	adds	r3, r3, r7
 8002af8:	2202      	movs	r2, #2
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	e05e      	b.n	8002bbc <UART_SetConfig+0x18c>
 8002afe:	231b      	movs	r3, #27
 8002b00:	2218      	movs	r2, #24
 8002b02:	189b      	adds	r3, r3, r2
 8002b04:	19db      	adds	r3, r3, r7
 8002b06:	2204      	movs	r2, #4
 8002b08:	701a      	strb	r2, [r3, #0]
 8002b0a:	e057      	b.n	8002bbc <UART_SetConfig+0x18c>
 8002b0c:	231b      	movs	r3, #27
 8002b0e:	2218      	movs	r2, #24
 8002b10:	189b      	adds	r3, r3, r2
 8002b12:	19db      	adds	r3, r3, r7
 8002b14:	2208      	movs	r2, #8
 8002b16:	701a      	strb	r2, [r3, #0]
 8002b18:	e050      	b.n	8002bbc <UART_SetConfig+0x18c>
 8002b1a:	231b      	movs	r3, #27
 8002b1c:	2218      	movs	r2, #24
 8002b1e:	189b      	adds	r3, r3, r2
 8002b20:	19db      	adds	r3, r3, r7
 8002b22:	2210      	movs	r2, #16
 8002b24:	701a      	strb	r2, [r3, #0]
 8002b26:	e049      	b.n	8002bbc <UART_SetConfig+0x18c>
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a83      	ldr	r2, [pc, #524]	; (8002d3c <UART_SetConfig+0x30c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d13e      	bne.n	8002bb0 <UART_SetConfig+0x180>
 8002b32:	4b85      	ldr	r3, [pc, #532]	; (8002d48 <UART_SetConfig+0x318>)
 8002b34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b36:	23c0      	movs	r3, #192	; 0xc0
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	22c0      	movs	r2, #192	; 0xc0
 8002b3e:	0112      	lsls	r2, r2, #4
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d027      	beq.n	8002b94 <UART_SetConfig+0x164>
 8002b44:	22c0      	movs	r2, #192	; 0xc0
 8002b46:	0112      	lsls	r2, r2, #4
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d82a      	bhi.n	8002ba2 <UART_SetConfig+0x172>
 8002b4c:	2280      	movs	r2, #128	; 0x80
 8002b4e:	0112      	lsls	r2, r2, #4
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d011      	beq.n	8002b78 <UART_SetConfig+0x148>
 8002b54:	2280      	movs	r2, #128	; 0x80
 8002b56:	0112      	lsls	r2, r2, #4
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d822      	bhi.n	8002ba2 <UART_SetConfig+0x172>
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d004      	beq.n	8002b6a <UART_SetConfig+0x13a>
 8002b60:	2280      	movs	r2, #128	; 0x80
 8002b62:	00d2      	lsls	r2, r2, #3
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d00e      	beq.n	8002b86 <UART_SetConfig+0x156>
 8002b68:	e01b      	b.n	8002ba2 <UART_SetConfig+0x172>
 8002b6a:	231b      	movs	r3, #27
 8002b6c:	2218      	movs	r2, #24
 8002b6e:	189b      	adds	r3, r3, r2
 8002b70:	19db      	adds	r3, r3, r7
 8002b72:	2200      	movs	r2, #0
 8002b74:	701a      	strb	r2, [r3, #0]
 8002b76:	e021      	b.n	8002bbc <UART_SetConfig+0x18c>
 8002b78:	231b      	movs	r3, #27
 8002b7a:	2218      	movs	r2, #24
 8002b7c:	189b      	adds	r3, r3, r2
 8002b7e:	19db      	adds	r3, r3, r7
 8002b80:	2202      	movs	r2, #2
 8002b82:	701a      	strb	r2, [r3, #0]
 8002b84:	e01a      	b.n	8002bbc <UART_SetConfig+0x18c>
 8002b86:	231b      	movs	r3, #27
 8002b88:	2218      	movs	r2, #24
 8002b8a:	189b      	adds	r3, r3, r2
 8002b8c:	19db      	adds	r3, r3, r7
 8002b8e:	2204      	movs	r2, #4
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	e013      	b.n	8002bbc <UART_SetConfig+0x18c>
 8002b94:	231b      	movs	r3, #27
 8002b96:	2218      	movs	r2, #24
 8002b98:	189b      	adds	r3, r3, r2
 8002b9a:	19db      	adds	r3, r3, r7
 8002b9c:	2208      	movs	r2, #8
 8002b9e:	701a      	strb	r2, [r3, #0]
 8002ba0:	e00c      	b.n	8002bbc <UART_SetConfig+0x18c>
 8002ba2:	231b      	movs	r3, #27
 8002ba4:	2218      	movs	r2, #24
 8002ba6:	189b      	adds	r3, r3, r2
 8002ba8:	19db      	adds	r3, r3, r7
 8002baa:	2210      	movs	r2, #16
 8002bac:	701a      	strb	r2, [r3, #0]
 8002bae:	e005      	b.n	8002bbc <UART_SetConfig+0x18c>
 8002bb0:	231b      	movs	r3, #27
 8002bb2:	2218      	movs	r2, #24
 8002bb4:	189b      	adds	r3, r3, r2
 8002bb6:	19db      	adds	r3, r3, r7
 8002bb8:	2210      	movs	r2, #16
 8002bba:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a5e      	ldr	r2, [pc, #376]	; (8002d3c <UART_SetConfig+0x30c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d000      	beq.n	8002bc8 <UART_SetConfig+0x198>
 8002bc6:	e084      	b.n	8002cd2 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002bc8:	231b      	movs	r3, #27
 8002bca:	2218      	movs	r2, #24
 8002bcc:	189b      	adds	r3, r3, r2
 8002bce:	19db      	adds	r3, r3, r7
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d01d      	beq.n	8002c12 <UART_SetConfig+0x1e2>
 8002bd6:	dc20      	bgt.n	8002c1a <UART_SetConfig+0x1ea>
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d015      	beq.n	8002c08 <UART_SetConfig+0x1d8>
 8002bdc:	dc1d      	bgt.n	8002c1a <UART_SetConfig+0x1ea>
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d002      	beq.n	8002be8 <UART_SetConfig+0x1b8>
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d005      	beq.n	8002bf2 <UART_SetConfig+0x1c2>
 8002be6:	e018      	b.n	8002c1a <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002be8:	f7ff f970 	bl	8001ecc <HAL_RCC_GetPCLK1Freq>
 8002bec:	0003      	movs	r3, r0
 8002bee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bf0:	e01c      	b.n	8002c2c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bf2:	4b55      	ldr	r3, [pc, #340]	; (8002d48 <UART_SetConfig+0x318>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2210      	movs	r2, #16
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d002      	beq.n	8002c02 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002bfc:	4b53      	ldr	r3, [pc, #332]	; (8002d4c <UART_SetConfig+0x31c>)
 8002bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002c00:	e014      	b.n	8002c2c <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8002c02:	4b53      	ldr	r3, [pc, #332]	; (8002d50 <UART_SetConfig+0x320>)
 8002c04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c06:	e011      	b.n	8002c2c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c08:	f7ff f8b0 	bl	8001d6c <HAL_RCC_GetSysClockFreq>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c10:	e00c      	b.n	8002c2c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c12:	2380      	movs	r3, #128	; 0x80
 8002c14:	021b      	lsls	r3, r3, #8
 8002c16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c18:	e008      	b.n	8002c2c <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002c1e:	231a      	movs	r3, #26
 8002c20:	2218      	movs	r2, #24
 8002c22:	189b      	adds	r3, r3, r2
 8002c24:	19db      	adds	r3, r3, r7
 8002c26:	2201      	movs	r2, #1
 8002c28:	701a      	strb	r2, [r3, #0]
        break;
 8002c2a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d100      	bne.n	8002c34 <UART_SetConfig+0x204>
 8002c32:	e12f      	b.n	8002e94 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	0013      	movs	r3, r2
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	189b      	adds	r3, r3, r2
 8002c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d305      	bcc.n	8002c50 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d906      	bls.n	8002c5e <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8002c50:	231a      	movs	r3, #26
 8002c52:	2218      	movs	r2, #24
 8002c54:	189b      	adds	r3, r3, r2
 8002c56:	19db      	adds	r3, r3, r7
 8002c58:	2201      	movs	r2, #1
 8002c5a:	701a      	strb	r2, [r3, #0]
 8002c5c:	e11a      	b.n	8002e94 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	6939      	ldr	r1, [r7, #16]
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	000b      	movs	r3, r1
 8002c6c:	0e1b      	lsrs	r3, r3, #24
 8002c6e:	0010      	movs	r0, r2
 8002c70:	0205      	lsls	r5, r0, #8
 8002c72:	431d      	orrs	r5, r3
 8002c74:	000b      	movs	r3, r1
 8002c76:	021c      	lsls	r4, r3, #8
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	085b      	lsrs	r3, r3, #1
 8002c7e:	60bb      	str	r3, [r7, #8]
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68b8      	ldr	r0, [r7, #8]
 8002c86:	68f9      	ldr	r1, [r7, #12]
 8002c88:	1900      	adds	r0, r0, r4
 8002c8a:	4169      	adcs	r1, r5
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	603b      	str	r3, [r7, #0]
 8002c92:	2300      	movs	r3, #0
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f7fd fbab 	bl	80003f4 <__aeabi_uldivmod>
 8002c9e:	0002      	movs	r2, r0
 8002ca0:	000b      	movs	r3, r1
 8002ca2:	0013      	movs	r3, r2
 8002ca4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ca8:	23c0      	movs	r3, #192	; 0xc0
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d309      	bcc.n	8002cc4 <UART_SetConfig+0x294>
 8002cb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cb2:	2380      	movs	r3, #128	; 0x80
 8002cb4:	035b      	lsls	r3, r3, #13
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d204      	bcs.n	8002cc4 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	e0e7      	b.n	8002e94 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8002cc4:	231a      	movs	r3, #26
 8002cc6:	2218      	movs	r2, #24
 8002cc8:	189b      	adds	r3, r3, r2
 8002cca:	19db      	adds	r3, r3, r7
 8002ccc:	2201      	movs	r2, #1
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	e0e0      	b.n	8002e94 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	69da      	ldr	r2, [r3, #28]
 8002cd6:	2380      	movs	r3, #128	; 0x80
 8002cd8:	021b      	lsls	r3, r3, #8
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d000      	beq.n	8002ce0 <UART_SetConfig+0x2b0>
 8002cde:	e082      	b.n	8002de6 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8002ce0:	231b      	movs	r3, #27
 8002ce2:	2218      	movs	r2, #24
 8002ce4:	189b      	adds	r3, r3, r2
 8002ce6:	19db      	adds	r3, r3, r7
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d834      	bhi.n	8002d58 <UART_SetConfig+0x328>
 8002cee:	009a      	lsls	r2, r3, #2
 8002cf0:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <UART_SetConfig+0x324>)
 8002cf2:	18d3      	adds	r3, r2, r3
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cf8:	f7ff f8e8 	bl	8001ecc <HAL_RCC_GetPCLK1Freq>
 8002cfc:	0003      	movs	r3, r0
 8002cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d00:	e033      	b.n	8002d6a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d02:	f7ff f8f9 	bl	8001ef8 <HAL_RCC_GetPCLK2Freq>
 8002d06:	0003      	movs	r3, r0
 8002d08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d0a:	e02e      	b.n	8002d6a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d0c:	4b0e      	ldr	r3, [pc, #56]	; (8002d48 <UART_SetConfig+0x318>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2210      	movs	r2, #16
 8002d12:	4013      	ands	r3, r2
 8002d14:	d002      	beq.n	8002d1c <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d16:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <UART_SetConfig+0x31c>)
 8002d18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002d1a:	e026      	b.n	8002d6a <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <UART_SetConfig+0x320>)
 8002d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d20:	e023      	b.n	8002d6a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d22:	f7ff f823 	bl	8001d6c <HAL_RCC_GetSysClockFreq>
 8002d26:	0003      	movs	r3, r0
 8002d28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d2a:	e01e      	b.n	8002d6a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d2c:	2380      	movs	r3, #128	; 0x80
 8002d2e:	021b      	lsls	r3, r3, #8
 8002d30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d32:	e01a      	b.n	8002d6a <UART_SetConfig+0x33a>
 8002d34:	efff69f3 	.word	0xefff69f3
 8002d38:	ffffcfff 	.word	0xffffcfff
 8002d3c:	40004800 	.word	0x40004800
 8002d40:	fffff4ff 	.word	0xfffff4ff
 8002d44:	40004400 	.word	0x40004400
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	003d0900 	.word	0x003d0900
 8002d50:	00f42400 	.word	0x00f42400
 8002d54:	08003420 	.word	0x08003420
      default:
        pclk = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002d5c:	231a      	movs	r3, #26
 8002d5e:	2218      	movs	r2, #24
 8002d60:	189b      	adds	r3, r3, r2
 8002d62:	19db      	adds	r3, r3, r7
 8002d64:	2201      	movs	r2, #1
 8002d66:	701a      	strb	r2, [r3, #0]
        break;
 8002d68:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d100      	bne.n	8002d72 <UART_SetConfig+0x342>
 8002d70:	e090      	b.n	8002e94 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d74:	005a      	lsls	r2, r3, #1
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	085b      	lsrs	r3, r3, #1
 8002d7c:	18d2      	adds	r2, r2, r3
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	0019      	movs	r1, r3
 8002d84:	0010      	movs	r0, r2
 8002d86:	f7fd f9bf 	bl	8000108 <__udivsi3>
 8002d8a:	0003      	movs	r3, r0
 8002d8c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d90:	2b0f      	cmp	r3, #15
 8002d92:	d921      	bls.n	8002dd8 <UART_SetConfig+0x3a8>
 8002d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d96:	2380      	movs	r3, #128	; 0x80
 8002d98:	025b      	lsls	r3, r3, #9
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d21c      	bcs.n	8002dd8 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	200e      	movs	r0, #14
 8002da4:	2418      	movs	r4, #24
 8002da6:	1903      	adds	r3, r0, r4
 8002da8:	19db      	adds	r3, r3, r7
 8002daa:	210f      	movs	r1, #15
 8002dac:	438a      	bics	r2, r1
 8002dae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db2:	085b      	lsrs	r3, r3, #1
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2207      	movs	r2, #7
 8002db8:	4013      	ands	r3, r2
 8002dba:	b299      	uxth	r1, r3
 8002dbc:	1903      	adds	r3, r0, r4
 8002dbe:	19db      	adds	r3, r3, r7
 8002dc0:	1902      	adds	r2, r0, r4
 8002dc2:	19d2      	adds	r2, r2, r7
 8002dc4:	8812      	ldrh	r2, [r2, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	1902      	adds	r2, r0, r4
 8002dd0:	19d2      	adds	r2, r2, r7
 8002dd2:	8812      	ldrh	r2, [r2, #0]
 8002dd4:	60da      	str	r2, [r3, #12]
 8002dd6:	e05d      	b.n	8002e94 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8002dd8:	231a      	movs	r3, #26
 8002dda:	2218      	movs	r2, #24
 8002ddc:	189b      	adds	r3, r3, r2
 8002dde:	19db      	adds	r3, r3, r7
 8002de0:	2201      	movs	r2, #1
 8002de2:	701a      	strb	r2, [r3, #0]
 8002de4:	e056      	b.n	8002e94 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002de6:	231b      	movs	r3, #27
 8002de8:	2218      	movs	r2, #24
 8002dea:	189b      	adds	r3, r3, r2
 8002dec:	19db      	adds	r3, r3, r7
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d822      	bhi.n	8002e3a <UART_SetConfig+0x40a>
 8002df4:	009a      	lsls	r2, r3, #2
 8002df6:	4b2f      	ldr	r3, [pc, #188]	; (8002eb4 <UART_SetConfig+0x484>)
 8002df8:	18d3      	adds	r3, r2, r3
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dfe:	f7ff f865 	bl	8001ecc <HAL_RCC_GetPCLK1Freq>
 8002e02:	0003      	movs	r3, r0
 8002e04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e06:	e021      	b.n	8002e4c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e08:	f7ff f876 	bl	8001ef8 <HAL_RCC_GetPCLK2Freq>
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e10:	e01c      	b.n	8002e4c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e12:	4b29      	ldr	r3, [pc, #164]	; (8002eb8 <UART_SetConfig+0x488>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2210      	movs	r2, #16
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d002      	beq.n	8002e22 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e1c:	4b27      	ldr	r3, [pc, #156]	; (8002ebc <UART_SetConfig+0x48c>)
 8002e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002e20:	e014      	b.n	8002e4c <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8002e22:	4b27      	ldr	r3, [pc, #156]	; (8002ec0 <UART_SetConfig+0x490>)
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e26:	e011      	b.n	8002e4c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e28:	f7fe ffa0 	bl	8001d6c <HAL_RCC_GetSysClockFreq>
 8002e2c:	0003      	movs	r3, r0
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e30:	e00c      	b.n	8002e4c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e32:	2380      	movs	r3, #128	; 0x80
 8002e34:	021b      	lsls	r3, r3, #8
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e38:	e008      	b.n	8002e4c <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002e3e:	231a      	movs	r3, #26
 8002e40:	2218      	movs	r2, #24
 8002e42:	189b      	adds	r3, r3, r2
 8002e44:	19db      	adds	r3, r3, r7
 8002e46:	2201      	movs	r2, #1
 8002e48:	701a      	strb	r2, [r3, #0]
        break;
 8002e4a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d020      	beq.n	8002e94 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	085a      	lsrs	r2, r3, #1
 8002e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5a:	18d2      	adds	r2, r2, r3
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	0019      	movs	r1, r3
 8002e62:	0010      	movs	r0, r2
 8002e64:	f7fd f950 	bl	8000108 <__udivsi3>
 8002e68:	0003      	movs	r3, r0
 8002e6a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6e:	2b0f      	cmp	r3, #15
 8002e70:	d90a      	bls.n	8002e88 <UART_SetConfig+0x458>
 8002e72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e74:	2380      	movs	r3, #128	; 0x80
 8002e76:	025b      	lsls	r3, r3, #9
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d205      	bcs.n	8002e88 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	e005      	b.n	8002e94 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8002e88:	231a      	movs	r3, #26
 8002e8a:	2218      	movs	r2, #24
 8002e8c:	189b      	adds	r3, r3, r2
 8002e8e:	19db      	adds	r3, r3, r7
 8002e90:	2201      	movs	r2, #1
 8002e92:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	2200      	movs	r2, #0
 8002e98:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002ea0:	231a      	movs	r3, #26
 8002ea2:	2218      	movs	r2, #24
 8002ea4:	189b      	adds	r3, r3, r2
 8002ea6:	19db      	adds	r3, r3, r7
 8002ea8:	781b      	ldrb	r3, [r3, #0]
}
 8002eaa:	0018      	movs	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	b00e      	add	sp, #56	; 0x38
 8002eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	08003444 	.word	0x08003444
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	003d0900 	.word	0x003d0900
 8002ec0:	00f42400 	.word	0x00f42400

08002ec4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d00b      	beq.n	8002eee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4a4a      	ldr	r2, [pc, #296]	; (8003008 <UART_AdvFeatureConfig+0x144>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	0019      	movs	r1, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d00b      	beq.n	8002f10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	4a43      	ldr	r2, [pc, #268]	; (800300c <UART_AdvFeatureConfig+0x148>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	0019      	movs	r1, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	2204      	movs	r2, #4
 8002f16:	4013      	ands	r3, r2
 8002f18:	d00b      	beq.n	8002f32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	4a3b      	ldr	r2, [pc, #236]	; (8003010 <UART_AdvFeatureConfig+0x14c>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	0019      	movs	r1, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	2208      	movs	r2, #8
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d00b      	beq.n	8002f54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4a34      	ldr	r2, [pc, #208]	; (8003014 <UART_AdvFeatureConfig+0x150>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	0019      	movs	r1, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	2210      	movs	r2, #16
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d00b      	beq.n	8002f76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	4a2c      	ldr	r2, [pc, #176]	; (8003018 <UART_AdvFeatureConfig+0x154>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	0019      	movs	r1, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d00b      	beq.n	8002f98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	4a25      	ldr	r2, [pc, #148]	; (800301c <UART_AdvFeatureConfig+0x158>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	0019      	movs	r1, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	2240      	movs	r2, #64	; 0x40
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	d01d      	beq.n	8002fde <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	4a1d      	ldr	r2, [pc, #116]	; (8003020 <UART_AdvFeatureConfig+0x15c>)
 8002faa:	4013      	ands	r3, r2
 8002fac:	0019      	movs	r1, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	035b      	lsls	r3, r3, #13
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d10b      	bne.n	8002fde <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	4a15      	ldr	r2, [pc, #84]	; (8003024 <UART_AdvFeatureConfig+0x160>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	0019      	movs	r1, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	2280      	movs	r2, #128	; 0x80
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	d00b      	beq.n	8003000 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	4a0e      	ldr	r2, [pc, #56]	; (8003028 <UART_AdvFeatureConfig+0x164>)
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	0019      	movs	r1, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	605a      	str	r2, [r3, #4]
  }
}
 8003000:	46c0      	nop			; (mov r8, r8)
 8003002:	46bd      	mov	sp, r7
 8003004:	b002      	add	sp, #8
 8003006:	bd80      	pop	{r7, pc}
 8003008:	fffdffff 	.word	0xfffdffff
 800300c:	fffeffff 	.word	0xfffeffff
 8003010:	fffbffff 	.word	0xfffbffff
 8003014:	ffff7fff 	.word	0xffff7fff
 8003018:	ffffefff 	.word	0xffffefff
 800301c:	ffffdfff 	.word	0xffffdfff
 8003020:	ffefffff 	.word	0xffefffff
 8003024:	ff9fffff 	.word	0xff9fffff
 8003028:	fff7ffff 	.word	0xfff7ffff

0800302c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b092      	sub	sp, #72	; 0x48
 8003030:	af02      	add	r7, sp, #8
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2284      	movs	r2, #132	; 0x84
 8003038:	2100      	movs	r1, #0
 800303a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800303c:	f7fd ff6c 	bl	8000f18 <HAL_GetTick>
 8003040:	0003      	movs	r3, r0
 8003042:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2208      	movs	r2, #8
 800304c:	4013      	ands	r3, r2
 800304e:	2b08      	cmp	r3, #8
 8003050:	d12c      	bne.n	80030ac <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003054:	2280      	movs	r2, #128	; 0x80
 8003056:	0391      	lsls	r1, r2, #14
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	4a46      	ldr	r2, [pc, #280]	; (8003174 <UART_CheckIdleState+0x148>)
 800305c:	9200      	str	r2, [sp, #0]
 800305e:	2200      	movs	r2, #0
 8003060:	f000 f88c 	bl	800317c <UART_WaitOnFlagUntilTimeout>
 8003064:	1e03      	subs	r3, r0, #0
 8003066:	d021      	beq.n	80030ac <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003068:	f3ef 8310 	mrs	r3, PRIMASK
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003070:	63bb      	str	r3, [r7, #56]	; 0x38
 8003072:	2301      	movs	r3, #1
 8003074:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003078:	f383 8810 	msr	PRIMASK, r3
}
 800307c:	46c0      	nop			; (mov r8, r8)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2180      	movs	r1, #128	; 0x80
 800308a:	438a      	bics	r2, r1
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003090:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003094:	f383 8810 	msr	PRIMASK, r3
}
 8003098:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2220      	movs	r2, #32
 800309e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2278      	movs	r2, #120	; 0x78
 80030a4:	2100      	movs	r1, #0
 80030a6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e05f      	b.n	800316c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2204      	movs	r2, #4
 80030b4:	4013      	ands	r3, r2
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d146      	bne.n	8003148 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030bc:	2280      	movs	r2, #128	; 0x80
 80030be:	03d1      	lsls	r1, r2, #15
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	4a2c      	ldr	r2, [pc, #176]	; (8003174 <UART_CheckIdleState+0x148>)
 80030c4:	9200      	str	r2, [sp, #0]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f000 f858 	bl	800317c <UART_WaitOnFlagUntilTimeout>
 80030cc:	1e03      	subs	r3, r0, #0
 80030ce:	d03b      	beq.n	8003148 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030d0:	f3ef 8310 	mrs	r3, PRIMASK
 80030d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80030d6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030d8:	637b      	str	r3, [r7, #52]	; 0x34
 80030da:	2301      	movs	r3, #1
 80030dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f383 8810 	msr	PRIMASK, r3
}
 80030e4:	46c0      	nop			; (mov r8, r8)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4921      	ldr	r1, [pc, #132]	; (8003178 <UART_CheckIdleState+0x14c>)
 80030f2:	400a      	ands	r2, r1
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f383 8810 	msr	PRIMASK, r3
}
 8003100:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003102:	f3ef 8310 	mrs	r3, PRIMASK
 8003106:	61bb      	str	r3, [r7, #24]
  return(result);
 8003108:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800310a:	633b      	str	r3, [r7, #48]	; 0x30
 800310c:	2301      	movs	r3, #1
 800310e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	f383 8810 	msr	PRIMASK, r3
}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2101      	movs	r1, #1
 8003124:	438a      	bics	r2, r1
 8003126:	609a      	str	r2, [r3, #8]
 8003128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	f383 8810 	msr	PRIMASK, r3
}
 8003132:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2280      	movs	r2, #128	; 0x80
 8003138:	2120      	movs	r1, #32
 800313a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2278      	movs	r2, #120	; 0x78
 8003140:	2100      	movs	r1, #0
 8003142:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e011      	b.n	800316c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2220      	movs	r2, #32
 800314c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2280      	movs	r2, #128	; 0x80
 8003152:	2120      	movs	r1, #32
 8003154:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2278      	movs	r2, #120	; 0x78
 8003166:	2100      	movs	r1, #0
 8003168:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	0018      	movs	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	b010      	add	sp, #64	; 0x40
 8003172:	bd80      	pop	{r7, pc}
 8003174:	01ffffff 	.word	0x01ffffff
 8003178:	fffffedf 	.word	0xfffffedf

0800317c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	603b      	str	r3, [r7, #0]
 8003188:	1dfb      	adds	r3, r7, #7
 800318a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800318c:	e04b      	b.n	8003226 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	3301      	adds	r3, #1
 8003192:	d048      	beq.n	8003226 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003194:	f7fd fec0 	bl	8000f18 <HAL_GetTick>
 8003198:	0002      	movs	r2, r0
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d302      	bcc.n	80031aa <UART_WaitOnFlagUntilTimeout+0x2e>
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e04b      	b.n	8003246 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2204      	movs	r2, #4
 80031b6:	4013      	ands	r3, r2
 80031b8:	d035      	beq.n	8003226 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	2208      	movs	r2, #8
 80031c2:	4013      	ands	r3, r2
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d111      	bne.n	80031ec <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2208      	movs	r2, #8
 80031ce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	0018      	movs	r0, r3
 80031d4:	f000 f83c 	bl	8003250 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2284      	movs	r2, #132	; 0x84
 80031dc:	2108      	movs	r1, #8
 80031de:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2278      	movs	r2, #120	; 0x78
 80031e4:	2100      	movs	r1, #0
 80031e6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e02c      	b.n	8003246 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	69da      	ldr	r2, [r3, #28]
 80031f2:	2380      	movs	r3, #128	; 0x80
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	401a      	ands	r2, r3
 80031f8:	2380      	movs	r3, #128	; 0x80
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d112      	bne.n	8003226 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2280      	movs	r2, #128	; 0x80
 8003206:	0112      	lsls	r2, r2, #4
 8003208:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	0018      	movs	r0, r3
 800320e:	f000 f81f 	bl	8003250 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2284      	movs	r2, #132	; 0x84
 8003216:	2120      	movs	r1, #32
 8003218:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2278      	movs	r2, #120	; 0x78
 800321e:	2100      	movs	r1, #0
 8003220:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e00f      	b.n	8003246 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	4013      	ands	r3, r2
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	425a      	negs	r2, r3
 8003236:	4153      	adcs	r3, r2
 8003238:	b2db      	uxtb	r3, r3
 800323a:	001a      	movs	r2, r3
 800323c:	1dfb      	adds	r3, r7, #7
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d0a4      	beq.n	800318e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	0018      	movs	r0, r3
 8003248:	46bd      	mov	sp, r7
 800324a:	b004      	add	sp, #16
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08e      	sub	sp, #56	; 0x38
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003258:	f3ef 8310 	mrs	r3, PRIMASK
 800325c:	617b      	str	r3, [r7, #20]
  return(result);
 800325e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003260:	637b      	str	r3, [r7, #52]	; 0x34
 8003262:	2301      	movs	r3, #1
 8003264:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	f383 8810 	msr	PRIMASK, r3
}
 800326c:	46c0      	nop			; (mov r8, r8)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4926      	ldr	r1, [pc, #152]	; (8003314 <UART_EndRxTransfer+0xc4>)
 800327a:	400a      	ands	r2, r1
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003280:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	f383 8810 	msr	PRIMASK, r3
}
 8003288:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800328a:	f3ef 8310 	mrs	r3, PRIMASK
 800328e:	623b      	str	r3, [r7, #32]
  return(result);
 8003290:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003292:	633b      	str	r3, [r7, #48]	; 0x30
 8003294:	2301      	movs	r3, #1
 8003296:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	f383 8810 	msr	PRIMASK, r3
}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2101      	movs	r1, #1
 80032ac:	438a      	bics	r2, r1
 80032ae:	609a      	str	r2, [r3, #8]
 80032b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b6:	f383 8810 	msr	PRIMASK, r3
}
 80032ba:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d118      	bne.n	80032f6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032c4:	f3ef 8310 	mrs	r3, PRIMASK
 80032c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80032ca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ce:	2301      	movs	r3, #1
 80032d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f383 8810 	msr	PRIMASK, r3
}
 80032d8:	46c0      	nop			; (mov r8, r8)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2110      	movs	r1, #16
 80032e6:	438a      	bics	r2, r1
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f383 8810 	msr	PRIMASK, r3
}
 80032f4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2280      	movs	r2, #128	; 0x80
 80032fa:	2120      	movs	r1, #32
 80032fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	669a      	str	r2, [r3, #104]	; 0x68
}
 800330a:	46c0      	nop			; (mov r8, r8)
 800330c:	46bd      	mov	sp, r7
 800330e:	b00e      	add	sp, #56	; 0x38
 8003310:	bd80      	pop	{r7, pc}
 8003312:	46c0      	nop			; (mov r8, r8)
 8003314:	fffffedf 	.word	0xfffffedf

08003318 <memset>:
 8003318:	0003      	movs	r3, r0
 800331a:	1882      	adds	r2, r0, r2
 800331c:	4293      	cmp	r3, r2
 800331e:	d100      	bne.n	8003322 <memset+0xa>
 8003320:	4770      	bx	lr
 8003322:	7019      	strb	r1, [r3, #0]
 8003324:	3301      	adds	r3, #1
 8003326:	e7f9      	b.n	800331c <memset+0x4>

08003328 <__libc_init_array>:
 8003328:	b570      	push	{r4, r5, r6, lr}
 800332a:	2600      	movs	r6, #0
 800332c:	4c0c      	ldr	r4, [pc, #48]	; (8003360 <__libc_init_array+0x38>)
 800332e:	4d0d      	ldr	r5, [pc, #52]	; (8003364 <__libc_init_array+0x3c>)
 8003330:	1b64      	subs	r4, r4, r5
 8003332:	10a4      	asrs	r4, r4, #2
 8003334:	42a6      	cmp	r6, r4
 8003336:	d109      	bne.n	800334c <__libc_init_array+0x24>
 8003338:	2600      	movs	r6, #0
 800333a:	f000 f819 	bl	8003370 <_init>
 800333e:	4c0a      	ldr	r4, [pc, #40]	; (8003368 <__libc_init_array+0x40>)
 8003340:	4d0a      	ldr	r5, [pc, #40]	; (800336c <__libc_init_array+0x44>)
 8003342:	1b64      	subs	r4, r4, r5
 8003344:	10a4      	asrs	r4, r4, #2
 8003346:	42a6      	cmp	r6, r4
 8003348:	d105      	bne.n	8003356 <__libc_init_array+0x2e>
 800334a:	bd70      	pop	{r4, r5, r6, pc}
 800334c:	00b3      	lsls	r3, r6, #2
 800334e:	58eb      	ldr	r3, [r5, r3]
 8003350:	4798      	blx	r3
 8003352:	3601      	adds	r6, #1
 8003354:	e7ee      	b.n	8003334 <__libc_init_array+0xc>
 8003356:	00b3      	lsls	r3, r6, #2
 8003358:	58eb      	ldr	r3, [r5, r3]
 800335a:	4798      	blx	r3
 800335c:	3601      	adds	r6, #1
 800335e:	e7f2      	b.n	8003346 <__libc_init_array+0x1e>
 8003360:	08003470 	.word	0x08003470
 8003364:	08003470 	.word	0x08003470
 8003368:	08003474 	.word	0x08003474
 800336c:	08003470 	.word	0x08003470

08003370 <_init>:
 8003370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003376:	bc08      	pop	{r3}
 8003378:	469e      	mov	lr, r3
 800337a:	4770      	bx	lr

0800337c <_fini>:
 800337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003382:	bc08      	pop	{r3}
 8003384:	469e      	mov	lr, r3
 8003386:	4770      	bx	lr
